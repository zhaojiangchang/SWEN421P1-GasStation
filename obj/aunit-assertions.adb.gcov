        -:    0:Source:C:/GNAT/2016/include/aunit/aunit-assertions.adb
        -:    0:Programs:35
        -:    1:------------------------------------------------------------------------------
        -:    2:--                                                                          --
        -:    3:--                         GNAT COMPILER COMPONENTS                         --
        -:    4:--                                                                          --
        -:    5:--                     A U N I T . A S S E R T I O N S                      --
        -:    6:--                                                                          --
        -:    7:--                                 B o d y                                  --
        -:    8:--                                                                          --
        -:    9:--                                                                          --
        -:   10:--                       Copyright (C) 2000-2011, AdaCore                   --
        -:   11:--                                                                          --
        -:   12:-- GNAT is free software;  you can  redistribute it  and/or modify it under --
        -:   13:-- terms of the  GNU General Public License as published  by the Free Soft- --
        -:   14:-- ware  Foundation;  either version 3,  or (at your option) any later ver- --
        -:   15:-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --
        -:   16:-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --
        -:   17:-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --
        -:   18:--                                                                          --
        -:   19:--                                                                          --
        -:   20:--                                                                          --
        -:   21:--                                                                          --
        -:   22:--                                                                          --
        -:   23:-- You should have received a copy of the GNU General Public License and    --
        -:   24:-- a copy of the GCC Runtime Library Exception along with this program;     --
        -:   25:-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
        -:   26:-- <http://www.gnu.org/licenses/>.                                          --
        -:   27:--                                                                          --
        -:   28:-- GNAT is maintained by AdaCore (http://www.adacore.com)                   --
        -:   29:--                                                                          --
        -:   30:------------------------------------------------------------------------------
        -:   31:
        2:   32:package body AUnit.Assertions is
        -:   33:
        2:   34:   Failures         : Failure_Lists.List;
        -:   35:   --  ??? Calls to Failures should be protected, so that we can use
        -:   36:   --  multitasking
        -:   37:
        -:   38:   Current_Id : Test_Id := 1;
        -:   39:
        2:   40:   procedure Init_Test (T : in out Test) is
        -:   41:   begin
        2:   42:      if T.Id = Null_Id then
        2:   43:         T.Id := Current_Id;
        2:   44:         Current_Id := Current_Id + 1;
        -:   45:      end if;
        2:   46:   end Init_Test;
        -:   47:
        -:   48:   The_Current_Test : Test_Access := null;
        -:   49:
        -:   50:   ------------
        -:   51:   -- Assert --
        -:   52:   ------------
        -:   53:
        2:   54:   procedure Assert
        -:   55:     (Condition : Boolean;
        -:   56:      Message   : String;
        -:   57:      Source    : String := GNAT.Source_Info.File;
        -:   58:      Line      : Natural := GNAT.Source_Info.Line) is
        -:   59:   begin
        2:   60:      if not Assert (Condition, Message, Source, Line) then
    #####:   61:         raise Assertion_Error;
        -:   62:      end if;
        2:   63:   end Assert;
        -:   64:
        -:   65:   ------------
        -:   66:   -- Assert --
        -:   67:   ------------
        -:   68:
        2:   69:   function Assert
        -:   70:     (Condition : Boolean;
        -:   71:      Message   : String;
        -:   72:      Source    : String := GNAT.Source_Info.File;
        -:   73:      Line      : Natural := GNAT.Source_Info.Line) return Boolean is
        -:   74:   begin
        2:   75:      if not Condition then
    #####:   76:         Failure_Lists.Append
        -:   77:           (Failures,
    #####:   78:            (Failure => (Format (Message), Format (Source), Line),
    #####:   79:             Id      => The_Current_Test.Id));
        -:   80:      end if;
        -:   81:
        2:   82:      return Condition;
        -:   83:   end Assert;
        -:   84:
        -:   85:   ----------------------
        -:   86:   -- Assert_Exception --
        -:   87:   ----------------------
        -:   88:
        -:   89:   procedure Assert_Exception
        -:   90:     (Proc    : Throwing_Exception_Proc;
        -:   91:      Message : String;
        -:   92:      Source  : String := GNAT.Source_Info.File;
        -:   93:      Line    : Natural := GNAT.Source_Info.Line) is separate;
        -:   94:
        -:   95:   ------------
        -:   96:   -- Assert --
        -:   97:   ------------
        -:   98:
    #####:   99:   procedure Assert
        -:  100:     (Actual    : String;
        -:  101:      Expected  : String;
        -:  102:      Message   : String;
        -:  103:      Source    : String  := GNAT.Source_Info.File;
        -:  104:      Line      : Natural := GNAT.Source_Info.Line) is
        -:  105:   begin
    #####:  106:      if Actual /= Expected then
    #####:  107:         Assert
        -:  108:           (False,
    #####:  109:            Message & " - got '" & Actual & "', expecting '" & Expected & "'",
        -:  110:            Source,
        -:  111:            Line);
        -:  112:      end if;
    #####:  113:   end Assert;
        -:  114:
        -:  115:   --------------------
        -:  116:   -- Clear_Failures --
        -:  117:   --------------------
        -:  118:
        2:  119:   procedure Clear_Failures (T : Test) is
        2:  120:      C, N : Failure_Lists.Cursor;
        -:  121:   begin
        2:  122:      C := Failure_Lists.First (Failures);
        -:  123:
        2:  124:      while Failure_Lists.Has_Element (C) loop
    #####:  125:         N := Failure_Lists.Next (C);
        -:  126:
    #####:  127:         if Failure_Lists.Element (C).Id = T.Id then
    #####:  128:            Failure_Lists.Delete (Failures, C);
        -:  129:         end if;
        -:  130:
    #####:  131:         C := N;
    #####:  132:      end loop;
        2:  133:   end Clear_Failures;
        -:  134:
        -:  135:   ------------------
        -:  136:   -- Has_Failures --
        -:  137:   ------------------
        -:  138:
        2:  139:   function Has_Failures (T : Test) return Boolean is
        -:  140:   begin
        4:  141:      return Has_Failure (First_Failure (T));
        2:  142:   end Has_Failures;
        -:  143:
        -:  144:   -------------------
        -:  145:   -- First_Failure --
        -:  146:   -------------------
        -:  147:
        2:  148:   function First_Failure (T : Test) return Failure_Iter is
        2:  149:      C : Failure_Lists.Cursor;
        -:  150:   begin
        2:  151:      C := Failure_Lists.First (Failures);
        -:  152:
        2:  153:      while Failure_Lists.Has_Element (C) loop
    #####:  154:         if Failure_Lists.Element (C).Id = T.Id then
    #####:  155:            return Failure_Iter (C);
        -:  156:         end if;
        -:  157:
    #####:  158:         Failure_Lists.Next (C);
    #####:  159:      end loop;
        -:  160:
        2:  161:      return Failure_Iter (Failure_Lists.No_Element);
        2:  162:   end First_Failure;
        -:  163:
        -:  164:   -----------------
        -:  165:   -- Has_Failure --
        -:  166:   -----------------
        -:  167:
        2:  168:   function Has_Failure (I : Failure_Iter) return Boolean is
        -:  169:   begin
        2:  170:      return Failure_Lists.Has_Element (Failure_Lists.Cursor (I));
        -:  171:   end Has_Failure;
        -:  172:
    #####:  173:   function Get_Failure
        -:  174:     (I : Failure_Iter) return AUnit.Test_Results.Test_Failure is
        -:  175:   begin
    #####:  176:      return Failure_Lists.Element (Failure_Lists.Cursor (I)).Failure;
    #####:  177:   end Get_Failure;
        -:  178:
        -:  179:   ----------
        -:  180:   -- Next --
        -:  181:   ----------
        -:  182:
    #####:  183:   procedure Next (I : in out Failure_Iter) is
        -:  184:      Id : Test_Id;
        -:  185:   begin
    #####:  186:      if not Has_Failure (I) then
    #####:  187:         return;
        -:  188:      end if;
        -:  189:
    #####:  190:      Id := Failure_Lists.Element (Failure_Lists.Cursor (I)).Id;
    #####:  191:      Failure_Lists.Next (Failure_Lists.Cursor (I));
        -:  192:
    #####:  193:      while Failure_Lists.Has_Element (Failure_Lists.Cursor (I)) loop
    #####:  194:         exit when Failure_Lists.Element (Failure_Lists.Cursor (I)).Id = Id;
    #####:  195:         Failure_Lists.Next (Failure_Lists.Cursor (I));
    #####:  196:      end loop;
    #####:  197:   end Next;
        -:  198:
        -:  199:   ------------------
        -:  200:   -- Current_Test --
        -:  201:   ------------------
        -:  202:
        2:  203:   function Current_Test return Test_Access is
        -:  204:   begin
        2:  205:      return The_Current_Test;
        -:  206:   end Current_Test;
        -:  207:
        -:  208:   ----------------------
        -:  209:   -- Set_Current_Test --
        -:  210:   ----------------------
        -:  211:
        4:  212:   procedure Set_Current_Test (T : Test_Access) is
        -:  213:   begin
        4:  214:      The_Current_Test := T;
        4:  215:   end Set_Current_Test;
        -:  216:
        -:  217:   -------------
        -:  218:   -- Copy_Id --
        -:  219:   -------------
        -:  220:
    #####:  221:   procedure Copy_Id (From : Test'Class; To : in out Test'Class) is
        -:  222:   begin
    #####:  223:      To.Id := From.Id;
    #####:  224:   end Copy_Id;
        -:  225:
        2:  226:end AUnit.Assertions;
