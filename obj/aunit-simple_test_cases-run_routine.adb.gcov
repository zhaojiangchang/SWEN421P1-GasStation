        -:    0:Source:C:/GNAT/2016/include/aunit/aunit-simple_test_cases-run_routine.adb
        -:    0:Programs:38
        -:    1:------------------------------------------------------------------------------
        -:    2:--                                                                          --
        -:    3:--                         GNAT COMPILER COMPONENTS                         --
        -:    4:--                                                                          --
        -:    5:--          A U N I T . T E S T _ C A S E S . R U N _ R O U T I N E         --
        -:    6:--                                                                          --
        -:    7:--                                 B o d y                                  --
        -:    8:--                                                                          --
        -:    9:--                                                                          --
        -:   10:--                    Copyright (C) 2006-2011, AdaCore                      --
        -:   11:--                                                                          --
        -:   12:-- GNAT is free software;  you can  redistribute it  and/or modify it under --
        -:   13:-- terms of the  GNU General Public License as published  by the Free Soft- --
        -:   14:-- ware  Foundation;  either version 3,  or (at your option) any later ver- --
        -:   15:-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --
        -:   16:-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --
        -:   17:-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --
        -:   18:--                                                                          --
        -:   19:--                                                                          --
        -:   20:--                                                                          --
        -:   21:--                                                                          --
        -:   22:--                                                                          --
        -:   23:-- You should have received a copy of the GNU General Public License and    --
        -:   24:-- a copy of the GCC Runtime Library Exception along with this program;     --
        -:   25:-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
        -:   26:-- <http://www.gnu.org/licenses/>.                                          --
        -:   27:--                                                                          --
        -:   28:-- GNAT is maintained by AdaCore (http://www.adacore.com)                   --
        -:   29:--                                                                          --
        -:   30:------------------------------------------------------------------------------
        -:   31:
        -:   32:with Ada.Exceptions;          use Ada.Exceptions;
        -:   33:
        -:   34:with GNAT.Traceback.Symbolic; use GNAT.Traceback.Symbolic;
        -:   35:
        -:   36:with AUnit.Time_Measure;
        -:   37:
        -:   38:separate (AUnit.Simple_Test_Cases)
        -:   39:
        -:   40:--  Version for run-time libraries that support exception handling
       12:   41:procedure Run_Routine
        -:   42:  (Test    : access Test_Case'Class;
        -:   43:   Options :        AUnit.Options.AUnit_Options;
        -:   44:   R       : in out Result'Class;
        -:   45:   Outcome :    out Status)
        -:   46:is
       12:   47:   Unexpected_Exception : Boolean := False;
       12:   48:   Time : Time_Measure.Time := Time_Measure.Null_Time;
        -:   49:
        -:   50:   use Time_Measure;
        -:   51:
        -:   52:begin
        -:   53:
        -:   54:   --  Reset failure list to capture failed assertions for one routine
        -:   55:
       12:   56:   Clear_Failures (Test.all);
        -:   57:
        -:   58:   begin
       12:   59:      if Options.Test_Case_Timer then
    #####:   60:         Start_Measure (Time);
        -:   61:      end if;
        -:   62:
       12:   63:      Run_Test (Test.all);
        -:   64:
       12:   65:      if Options.Test_Case_Timer then
    #####:   66:         Stop_Measure (Time);
        -:   67:      end if;
        -:   68:
        -:   69:   exception
    #####:   70:      when Assertion_Error =>
    #####:   71:         if Options.Test_Case_Timer then
    #####:   72:            Stop_Measure (Time);
        -:   73:         end if;
        -:   74:
    #####:   75:      when E : others =>
    #####:   76:         if Options.Test_Case_Timer then
    #####:   77:            Stop_Measure (Time);
        -:   78:         end if;
        -:   79:
    #####:   80:         Unexpected_Exception := True;
    #####:   81:         Add_Error
        -:   82:           (R,
    #####:   83:            Name (Test.all),
    #####:   84:            Routine_Name (Test.all),
    #####:   85:            Error => (Exception_Name    => Format (Exception_Name (E)),
    #####:   86:                      Exception_Message => Format (Exception_Message (E)),
    #####:   87:                      Traceback         => Format (Symbolic_Traceback (E))),
        -:   88:            Elapsed => Time);
        -:   89:   end;
        -:   90:
       12:   91:   if not Unexpected_Exception and then not Has_Failures (Test.all) then
       12:   92:      Outcome := Success;
       12:   93:      Add_Success (R, Name (Test.all), Routine_Name (Test.all), Time);
        -:   94:   else
    #####:   95:      Outcome := Failure;
        -:   96:      declare
    #####:   97:         C : Failure_Iter := First_Failure (Test.all);
        -:   98:      begin
    #####:   99:         while Has_Failure (C) loop
    #####:  100:            Add_Failure (R,
    #####:  101:                         Name (Test.all),
    #####:  102:                         Routine_Name (Test.all),
    #####:  103:                         Get_Failure (C),
        -:  104:                         Time);
    #####:  105:            Next (C);
    #####:  106:         end loop;
    #####:  107:      end;
        -:  108:   end if;
        -:  109:
       12:  110:end Run_Routine;
