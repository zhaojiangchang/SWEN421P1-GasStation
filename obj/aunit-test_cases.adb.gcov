        -:    0:Source:C:/GNAT/2016/include/aunit/aunit-test_cases.adb
        -:    0:Programs:35
        -:    1:------------------------------------------------------------------------------
        -:    2:--                                                                          --
        -:    3:--                         GNAT COMPILER COMPONENTS                         --
        -:    4:--                                                                          --
        -:    5:--                      A U N I T . T E S T _ C A S E S                     --
        -:    6:--                                                                          --
        -:    7:--                                 B o d y                                  --
        -:    8:--                                                                          --
        -:    9:--                                                                          --
        -:   10:--                       Copyright (C) 2000-2011, AdaCore                   --
        -:   11:--                                                                          --
        -:   12:-- GNAT is free software;  you can  redistribute it  and/or modify it under --
        -:   13:-- terms of the  GNU General Public License as published  by the Free Soft- --
        -:   14:-- ware  Foundation;  either version 3,  or (at your option) any later ver- --
        -:   15:-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --
        -:   16:-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --
        -:   17:-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --
        -:   18:--                                                                          --
        -:   19:--                                                                          --
        -:   20:--                                                                          --
        -:   21:--                                                                          --
        -:   22:--                                                                          --
        -:   23:-- You should have received a copy of the GNU General Public License and    --
        -:   24:-- a copy of the GCC Runtime Library Exception along with this program;     --
        -:   25:-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
        -:   26:-- <http://www.gnu.org/licenses/>.                                          --
        -:   27:--                                                                          --
        -:   28:-- GNAT is maintained by AdaCore (http://www.adacore.com)                   --
        -:   29:--                                                                          --
        -:   30:------------------------------------------------------------------------------
        -:   31:
        -:   32:with Ada.Unchecked_Conversion;
        -:   33:with AUnit.Options;              use AUnit.Options;
        -:   34:with AUnit.Test_Filters;         use AUnit.Test_Filters;
        -:   35:
        -:   36:package body AUnit.Test_Cases is
        -:   37:
        -:   38:   package body Registration is separate;
        -:   39:
        -:   40:   -----------------
        -:   41:   -- Add_Routine --
        -:   42:   -----------------
        -:   43:
        2:   44:   procedure Add_Routine (T : in out Test_Case'Class; Val : Routine_Spec) is
        -:   45:   begin
        2:   46:      Routine_Lists.Append (T.Routines, Val);
        2:   47:   end Add_Routine;
        -:   48:
        -:   49:   --------------
        -:   50:   -- Run_Test --
        -:   51:   --------------
        -:   52:
        2:   53:   procedure Run_Test (Test : in out Test_Case) is
        -:   54:   begin
        2:   55:      Test.Routine.Routine (Test);
        2:   56:   end Run_Test;
        -:   57:
        -:   58:   ---------
        -:   59:   -- Run --
        -:   60:   ---------
        -:   61:
        2:   62:   procedure Run
        -:   63:     (Test    : access Test_Case;
        -:   64:      Options :        AUnit.Options.AUnit_Options;
        -:   65:      R       : in out Result'Class;
        -:   66:      Outcome :    out Status)
        -:   67:   is
        -:   68:      use Routine_Lists;
        -:   69:      Result : Status;
        2:   70:      C      : Cursor;
        -:   71:   begin
        2:   72:      Outcome := Success;
        2:   73:      Routine_Lists.Clear (Test.Routines);
        2:   74:      Register_Tests (Test_Case'Class (Test.all));
        -:   75:
        2:   76:      Set_Up_Case (Test_Case'Class (Test.all));
        2:   77:      C := First (Test.Routines);
        -:   78:
        4:   79:      while Has_Element (C) loop
        2:   80:         Test.Routine := Element (C);
        2:   81:         if Options.Filter = null
    #####:   82:           or else Is_Active (Options.Filter.all, Test.all)
        -:   83:         then
        2:   84:            AUnit.Simple_Test_Cases.Run
        2:   85:              (AUnit.Simple_Test_Cases.Test_Case (Test.all)'Access,
        -:   86:               Options, R, Result);
        -:   87:
        2:   88:            if Result = Failure then
    #####:   89:               Outcome := Failure;
        -:   90:            end if;
        -:   91:         end if;
        -:   92:
        2:   93:         Next (C);
        2:   94:      end loop;
        -:   95:
        2:   96:      Tear_Down_Case (Test_Case'Class (Test.all));
        2:   97:   end Run;
        -:   98:
        -:   99:   ------------------
        -:  100:   -- Routine_Name --
        -:  101:   ------------------
        -:  102:
        2:  103:   function Routine_Name (Test : Test_Case) return Message_String is
        -:  104:   begin
        2:  105:      return Test.Routine.Routine_Name;
        -:  106:   end Routine_Name;
        -:  107:
        -:  108:   ------------------
        -:  109:   --  Set_Up_Case --
        -:  110:   ------------------
        -:  111:
    #####:  112:   procedure Set_Up_Case (Test : in out Test_Case) is
        -:  113:      --  Default
        -:  114:      pragma Unreferenced (Test);
        -:  115:   begin
    #####:  116:      null;
    #####:  117:   end Set_Up_Case;
        -:  118:
        -:  119:   --------------------
        -:  120:   -- Tear_Down_Case --
        -:  121:   --------------------
        -:  122:
    #####:  123:   procedure Tear_Down_Case (Test : in out Test_Case) is
        -:  124:      pragma Unreferenced (Test);
        -:  125:   begin
    #####:  126:      null;
    #####:  127:   end Tear_Down_Case;
        -:  128:
        -:  129:   package body Specific_Test_Case_Registration is
        -:  130:
        -:  131:      ----------------------
        -:  132:      -- Register_Wrapper --
        -:  133:      ----------------------
        -:  134:
        -:  135:      procedure Register_Wrapper
        -:  136:        (Test    : in out Specific_Test_Case'Class;
        -:  137:         Routine : Specific_Test_Routine;
        -:  138:         Name    : String)
        -:  139:      is
        -:  140:         function Conv is
        -:  141:            new Ada.Unchecked_Conversion (Specific_Test_Routine, Test_Routine);
        -:  142:      begin
        -:  143:         Registration.Register_Routine
        -:  144:           (Test_Case'Class (Test),
        -:  145:            Conv (Routine),
        -:  146:            Name);
        -:  147:      end Register_Wrapper;
        -:  148:
        -:  149:   end Specific_Test_Case_Registration;
        -:  150:
        -:  151:end AUnit.Test_Cases;
