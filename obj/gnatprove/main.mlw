(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -128 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  127
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type short_short_integer__ref #"system.ads" 1 0 0# =
  { mutable short_short_integer__content "model_trace:" : short_short_integer }
 
 function short_short_integer__ref___projection #"system.ads" 1 0 0# 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc #"system.ads" 1 0 0# 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -32768 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  32767
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type short_integer__ref #"system.ads" 1 0 0# =
  { mutable short_integer__content "model_trace:" : short_integer }
 
 function short_integer__ref___projection #"system.ads" 1 0 0# 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc #"system.ads" 1 0 0# 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type integer__ref #"system.ads" 1 0 0# =
  { mutable integer__content "model_trace:" : integer }
 
 function integer__ref___projection #"system.ads" 1 0 0# 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc #"system.ads" 1 0 0# 
   (x : integer__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type long_integer__ref #"system.ads" 1 0 0# =
  { mutable long_integer__content "model_trace:" : long_integer }
 
 function long_integer__ref___projection #"system.ads" 1 0 0# 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc #"system.ads" 1 0 0# 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type long_long_integer__ref #"system.ads" 1 0 0# =
  { mutable long_long_integer__content "model_trace:" : long_long_integer }
 
 function long_long_integer__ref___projection #"system.ads" 1 0 0# 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc #"system.ads" 1 0 0# 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type natural__ref #"system.ads" 1 0 0# =
  { mutable natural__content "model_trace:" : natural }
 
 function natural__ref___projection #"system.ads" 1 0 0# 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc #"system.ads" 1 0 0# 
   (x : natural__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type positive__ref #"system.ads" 1 0 0# =
  { mutable positive__content "model_trace:" : positive }
 
 function positive__ref___projection #"system.ads" 1 0 0# 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc #"system.ads" 1 0 0# 
   (x : positive__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type short_float #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : real =
  (-.340282346638528859811704183484516925440.0)
 
 function last #"system.ads" 1 0 0# 
   : real =
  (340282346638528859811704183484516925440.0)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = short_float, 
 function round_real_tmp = Floating.round_single, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type short_float__ref #"system.ads" 1 0 0# =
  { mutable short_float__content "model_trace:" : short_float }
 
 function short_float__ref___projection #"system.ads" 1 0 0# 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc #"system.ads" 1 0 0# 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type float #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : real =
  (-.340282346638528859811704183484516925440.0)
 
 function last #"system.ads" 1 0 0# 
   : real =
  (340282346638528859811704183484516925440.0)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = float, 
 function round_real_tmp = Floating.round_single, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type float__ref #"system.ads" 1 0 0# =
  { mutable float__content "model_trace:" : float }
 
 function float__ref___projection #"system.ads" 1 0 0# 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc #"system.ads" 1 0 0# 
   (x : float__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type long_float #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : real =
  (-.179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0)
 
 function last #"system.ads" 1 0 0# 
   : real =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = long_float, 
 function round_real_tmp = Floating.round_double, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type long_float__ref #"system.ads" 1 0 0# =
  { mutable long_float__content "model_trace:" : long_float }
 
 function long_float__ref___projection #"system.ads" 1 0 0# 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc #"system.ads" 1 0 0# 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "long_long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_float
 use import "_gnatprove_standard".Main
 use import "real".RealInfix

 type long_long_float #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : real =
  (-.1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 function last #"system.ads" 1 0 0# 
   : real =
  (1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = long_long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type long_long_float__ref #"system.ads" 1 0 0# =
  { mutable long_long_float__content "model_trace:" : long_long_float }
 
 function long_long_float__ref___projection #"system.ads" 1 0 0# 
   (a : long_long_float__ref) : long_long_float =
  a.long_long_float__content
 
 meta "model_projection" function long_long_float__ref___projection
 
 meta "inline : no" function long_long_float__ref___projection
 
 val long_long_float__havoc #"system.ads" 1 0 0# 
   (x : long_long_float__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  255
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type character__ref #"system.ads" 1 0 0# =
  { mutable character__content "model_trace:" : character }
 
 function character__ref___projection #"system.ads" 1 0 0# 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc #"system.ads" 1 0 0# 
   (x : character__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  65535
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type wide_character__ref #"system.ads" 1 0 0# =
  { mutable wide_character__content "model_trace:" : wide_character }
 
 function wide_character__ref___projection #"system.ads" 1 0 0# 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc #"system.ads" 1 0 0# 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type wide_wide_character__ref #"system.ads" 1 0 0# =
  { mutable wide_wide_character__content "model_trace:" : wide_wide_character }
 
 function wide_wide_character__ref___projection #"system.ads" 1 0 0# 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc #"system.ads" 1 0 0# 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 function index_I1_one #"system.ads" 1 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__character.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string #"system.ads" 1 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string #"system.ads" 1 0 0# 
   (x : Main.__image) : string
 
 function from_string #"system.ads" 1 0 0# 
   (x : string) : Main.__image
 
 type string__ref #"system.ads" 1 0 0# =
  { mutable string__content "model_trace:" : string }
 
 function string__ref___projection #"system.ads" 1 0 0# 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc #"system.ads" 1 0 0# 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 function index_I1_one #"system.ads" 1 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 1 0 0# =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__wide_character.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Array__Int__Standard__wide_character

 type component_type #"system.ads" 1 0 0# =
  Standard__wide_character.wide_character
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string #"system.ads" 1 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref #"system.ads" 1 0 0# =
  { mutable wide_string__content "model_trace:" : wide_string }
 
 function wide_string__ref___projection #"system.ads" 1 0 0# 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc #"system.ads" 1 0 0# 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 function index_I1_one #"system.ads" 1 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 1 0 0# =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__wide_wide_character.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Array__Int__Standard__wide_wide_character

 type component_type #"system.ads" 1 0 0# =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string #"system.ads" 1 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref #"system.ads" 1 0 0# =
  { mutable wide_wide_string__content "model_trace:" : wide_wide_string }
 
 function wide_wide_string__ref___projection #"system.ads" 1 0 0# 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc #"system.ads" 1 0 0# 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration #"system.ads" 1 0 0# 
 
 function inv_small #"system.ads" 1 0 0# 
   : Main.__fixed =
  1000000000
 
 function first #"system.ads" 1 0 0# 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function inv_small = inv_small
 
 type duration__ref #"system.ads" 1 0 0# =
  { mutable duration__content "model_trace:" : duration }
 
 function duration__ref___projection #"system.ads" 1 0 0# 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc #"system.ads" 1 0 0# 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -128 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  127
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type integer_8__ref #"system.ads" 1 0 0# =
  { mutable integer_8__content "model_trace:" : integer_8 }
 
 function integer_8__ref___projection #"system.ads" 1 0 0# 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc #"system.ads" 1 0 0# 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -32768 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  32767
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type integer_16__ref #"system.ads" 1 0 0# =
  { mutable integer_16__content "model_trace:" : integer_16 }
 
 function integer_16__ref___projection #"system.ads" 1 0 0# 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc #"system.ads" 1 0 0# 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type integer_32__ref #"system.ads" 1 0 0# =
  { mutable integer_32__content "model_trace:" : integer_32 }
 
 function integer_32__ref___projection #"system.ads" 1 0 0# 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc #"system.ads" 1 0 0# 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type integer_64__ref #"system.ads" 1 0 0# =
  { mutable integer_64__content "model_trace:" : integer_64 }
 
 function integer_64__ref___projection #"system.ads" 1 0 0# 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc #"system.ads" 1 0 0# 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type universal_integer__ref #"system.ads" 1 0 0# =
  { mutable universal_integer__content "model_trace:" : universal_integer }
 
 function universal_integer__ref___projection #"system.ads" 1 0 0# 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc #"system.ads" 1 0 0# 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "universal_real", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_real
 use import "_gnatprove_standard".Main
 use import "real".RealInfix

 type universal_real #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : real =
  (-.1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 function last #"system.ads" 1 0 0# 
   : real =
  (1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = universal_real, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type universal_real__ref #"system.ads" 1 0 0# =
  { mutable universal_real__content "model_trace:" : universal_real }
 
 function universal_real__ref___projection #"system.ads" 1 0 0# 
   (a : universal_real__ref) : universal_real =
  a.universal_real__content
 
 meta "model_projection" function universal_real__ref___projection
 
 meta "inline : no" function universal_real__ref___projection
 
 val universal_real__havoc #"system.ads" 1 0 0# 
   (x : universal_real__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Treservoir_numB" defined at pump.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Pump__Treservoir_numB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type treservoir_numB #"pump.ads" 5 0 0# 
 
 function first #"pump.ads" 5 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"pump.ads" 5 0 0# 
   : int =
  2147483647
 
 predicate in_range #"pump.ads" 5 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = treservoir_numB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type treservoir_numB__ref #"pump.ads" 5 0 0# =
  { mutable treservoir_numB__content "model_trace:" : treservoir_numB }
 
 function treservoir_numB__ref___projection #"pump.ads" 5 0 0# 
   (a : treservoir_numB__ref) : treservoir_numB =
  a.treservoir_numB__content
 
 meta "model_projection" function treservoir_numB__ref___projection
 
 meta "inline : no" function treservoir_numB__ref___projection
 
 val treservoir_numB__havoc #"pump.ads" 5 0 0# 
   (x : treservoir_numB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "reservoir_num" defined at pump.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Pump__reservoir_num
 use import "_gnatprove_standard".Main
 use import "int".Int

 type reservoir_num #"pump.ads" 5 0 0# 
 
 function first #"pump.ads" 5 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"pump.ads" 5 0 0# 
   : int =
  2147483647
 
 predicate in_range #"pump.ads" 5 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = reservoir_num, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type reservoir_num__ref #"pump.ads" 5 0 0# =
  { mutable reservoir_num__content "model_trace:" : reservoir_num }
 
 function reservoir_num__ref___projection #"pump.ads" 5 0 0# 
   (a : reservoir_num__ref) : reservoir_num =
  a.reservoir_num__content
 
 meta "model_projection" function reservoir_num__ref___projection
 
 meta "inline : no" function reservoir_num__ref___projection
 
 val reservoir_num__havoc #"pump.ads" 5 0 0# 
   (x : reservoir_num__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Tfloat_numberB" defined at pump.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Pump__Tfloat_numberB
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type tfloat_numberB #"pump.ads" 6 0 0# 
 
 function first #"pump.ads" 6 0 0# 
   : real =
  (-.340282346638528859811704183484516925440.0)
 
 function last #"pump.ads" 6 0 0# 
   : real =
  (340282346638528859811704183484516925440.0)
 
 predicate in_range #"pump.ads" 6 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = tfloat_numberB, 
 function round_real_tmp = Floating.round_single, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type tfloat_numberB__ref #"pump.ads" 6 0 0# =
  { mutable tfloat_numberB__content "model_trace:" : tfloat_numberB }
 
 function tfloat_numberB__ref___projection #"pump.ads" 6 0 0# 
   (a : tfloat_numberB__ref) : tfloat_numberB =
  a.tfloat_numberB__content
 
 meta "model_projection" function tfloat_numberB__ref___projection
 
 meta "inline : no" function tfloat_numberB__ref___projection
 
 val tfloat_numberB__havoc #"pump.ads" 6 0 0# 
   (x : tfloat_numberB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "float_number" defined at pump.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Pump__float_number
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type float_number #"pump.ads" 6 0 0# 
 
 function first #"pump.ads" 6 0 0# 
   : real =
  (-.0.009999999776482582092285156250)
 
 function last #"pump.ads" 6 0 0# 
   : real =
  (100000004091847875962975319375216640.0)
 
 predicate in_range #"pump.ads" 6 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = float_number, 
 function round_real_tmp = Floating.round_single, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type float_number__ref #"pump.ads" 6 0 0# =
  { mutable float_number__content "model_trace:" : float_number }
 
 function float_number__ref___projection #"pump.ads" 6 0 0# 
   (a : float_number__ref) : float_number =
  a.float_number__content
 
 meta "model_projection" function float_number__ref___projection
 
 meta "inline : no" function float_number__ref___projection
 
 val float_number__havoc #"pump.ads" 6 0 0# 
   (x : float_number__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "fuel_types" defined at pump.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Pump__fuel_types
 use import "_gnatprove_standard".Main
 use import "int".Int

 type fuel_types #"pump.ads" 7 0 0# 
 
 function first #"pump.ads" 7 0 0# 
   : int =
  0
 
 function last #"pump.ads" 7 0 0# 
   : int =
  2
 
 predicate in_range #"pump.ads" 7 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = fuel_types, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type fuel_types__ref #"pump.ads" 7 0 0# =
  { mutable fuel_types__content "model_trace:" : fuel_types }
 
 function fuel_types__ref___projection #"pump.ads" 7 0 0# 
   (a : fuel_types__ref) : fuel_types =
  a.fuel_types__content
 
 meta "model_projection" function fuel_types__ref___projection
 
 meta "inline : no" function fuel_types__ref___projection
 
 val fuel_types__havoc #"pump.ads" 7 0 0# 
   (x : fuel_types__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "state_type" defined at pump.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Pump__state_type
 use import "_gnatprove_standard".Main
 use import "int".Int

 type state_type #"pump.ads" 10 0 0# 
 
 function first #"pump.ads" 10 0 0# 
   : int =
  0
 
 function last #"pump.ads" 10 0 0# 
   : int =
  3
 
 predicate in_range #"pump.ads" 10 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = state_type, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type state_type__ref #"pump.ads" 10 0 0# =
  { mutable state_type__content "model_trace:" : state_type }
 
 function state_type__ref___projection #"pump.ads" 10 0 0# 
   (a : state_type__ref) : state_type =
  a.state_type__content
 
 meta "model_projection" function state_type__ref___projection
 
 meta "inline : no" function state_type__ref___projection
 
 val state_type__havoc #"pump.ads" 10 0 0# 
   (x : state_type__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "nozzle_type" defined at pump.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pump__nozzle_type
 use import "_gnatprove_standard".Main
 use import "int".Int

 type nozzle_type #"pump.ads" 11 0 0# 
 
 function first #"pump.ads" 11 0 0# 
   : int =
  0
 
 function last #"pump.ads" 11 0 0# 
   : int =
  5
 
 predicate in_range #"pump.ads" 11 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = nozzle_type, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type nozzle_type__ref #"pump.ads" 11 0 0# =
  { mutable nozzle_type__content "model_trace:" : nozzle_type }
 
 function nozzle_type__ref___projection #"pump.ads" 11 0 0# 
   (a : nozzle_type__ref) : nozzle_type =
  a.nozzle_type__content
 
 meta "model_projection" function nozzle_type__ref___projection
 
 meta "inline : no" function nozzle_type__ref___projection
 
 val nozzle_type__havoc #"pump.ads" 11 0 0# 
   (x : nozzle_type__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "reservoir" defined at pump.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Pump__reservoir
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__float_number
 use        Pump__fuel_types

 type __split_fields #"pump.ads" 11 0 0# =
  { rec__total : Pump__float_number.float_number; rec__reservoir_category "model_trace:.3078" : Pump__fuel_types.fuel_types }
 
 function __split_fields_RESERVOIR_CATEGORY__projection #"pump.ads" 7 0 0# "model_trace:.3078" 
   (a : __split_fields) : Pump__fuel_types.fuel_types =
  a.rec__reservoir_category
 
 meta "model_projection" function __split_fields_RESERVOIR_CATEGORY__projection
 
 meta "inline : no" function __split_fields_RESERVOIR_CATEGORY__projection
 
 type __split_fields__ref #"pump.ads" 13 0 0# =
  { mutable __split_fields__content "model_trace:" : __split_fields }
 
 function __split_fields__ref___projection #"pump.ads" 13 0 0# 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___projection
 
 meta "inline : no" function __split_fields__ref___projection
 
 val __split_fields__havoc #"pump.ads" 13 0 0# 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type reservoir #"pump.ads" 13 0 0# =
  { __split_fields "model_trace:" : __split_fields }
 
 function reservoir___projection #"pump.ads" 13 0 0# 
   (a : reservoir) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function reservoir___projection
 
 meta "inline : no" function reservoir___projection
 
 predicate total__pred #"pump.ads" 13 0 0# 
   (a : reservoir)  =
  true
 
 val rec__total_ #"pump.ads" 13 0 0# 
   (a : reservoir) : Pump__float_number.float_number
  requires { (total__pred a) }
  ensures { (result = a.__split_fields.rec__total) }
 
 predicate reservoir_category__pred #"pump.ads" 13 0 0# 
   (a : reservoir)  =
  true
 
 val rec__reservoir_category_ #"pump.ads" 13 0 0# 
   (a : reservoir) : Pump__fuel_types.fuel_types
  requires { (reservoir_category__pred a) }
  ensures { (result = a.__split_fields.rec__reservoir_category) }
 
 function bool_eq #"pump.ads" 13 0 0# 
   (a : reservoir) (b : reservoir) : bool =
  (if (( ((Pump__float_number.to_real a.__split_fields.rec__total) = (Pump__float_number.to_real b.__split_fields.rec__total)) /\ ((Pump__fuel_types.to_rep a.__split_fields.rec__reservoir_category) = (Pump__fuel_types.to_rep b.__split_fields.rec__reservoir_category)) )) then (
   True) else (
   False))
 
 function user_eq #"pump.ads" 13 0 0# 
   (a : reservoir) (b : reservoir) : bool
 
 function value__size #"pump.ads" 13 0 0# 
   : int
 
 function object__size #"pump.ads" 13 0 0# 
   (a : reservoir) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a : reservoir.
   ((object__size a) >= 0))
 
 function dummy #"pump.ads" 13 0 0# 
   : reservoir
 
 type reservoir__ref #"pump.ads" 13 0 0# =
  { mutable reservoir__content "model_trace:" : reservoir }
 
 function reservoir__ref___projection #"pump.ads" 13 0 0# 
   (a : reservoir__ref) : reservoir =
  a.reservoir__content
 
 meta "model_projection" function reservoir__ref___projection
 
 meta "inline : no" function reservoir__ref___projection
 
 val reservoir__havoc #"pump.ads" 13 0 0# 
   (x : reservoir__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "pump" defined at pump.ads:20, created in Gnat2Why.Types.Translate_Type *)
module Pump__pump
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__float_number
 use        Pump__fuel_types
 use        Pump__state_type
 use        Pump__nozzle_type
 use        Pump__reservoir

 type __split_fields #"pump.ads" 13 0 0# =
  { rec__reservoir_info "model_trace:.3100" : Pump__reservoir.reservoir; rec__pump_state "model_trace:.3120" : Pump__state_type.state_type; rec__pumped : Pump__float_number.float_number; rec__nozzle_state "model_trace:.3145" : Pump__nozzle_type.nozzle_type; rec__unit_price : Pump__float_number.float_number; rec__fuel_type "model_trace:.3170" : Pump__fuel_types.fuel_types }
 
 function __split_fields_RESERVOIR_INFO__projection #"pump.ads" 7 0 0# "model_trace:.3100" 
   (a : __split_fields) : Pump__reservoir.reservoir =
  a.rec__reservoir_info
 
 meta "model_projection" function __split_fields_RESERVOIR_INFO__projection
 
 meta "inline : no" function __split_fields_RESERVOIR_INFO__projection
 
 function __split_fields_PUMP_STATE__projection #"pump.ads" 20 0 0# "model_trace:.3120" 
   (a : __split_fields) : Pump__state_type.state_type =
  a.rec__pump_state
 
 meta "model_projection" function __split_fields_PUMP_STATE__projection
 
 meta "inline : no" function __split_fields_PUMP_STATE__projection
 
 function __split_fields_NOZZLE_STATE__projection #"pump.ads" 20 0 0# "model_trace:.3145" 
   (a : __split_fields) : Pump__nozzle_type.nozzle_type =
  a.rec__nozzle_state
 
 meta "model_projection" function __split_fields_NOZZLE_STATE__projection
 
 meta "inline : no" function __split_fields_NOZZLE_STATE__projection
 
 function __split_fields_FUEL_TYPE__projection #"pump.ads" 20 0 0# "model_trace:.3170" 
   (a : __split_fields) : Pump__fuel_types.fuel_types =
  a.rec__fuel_type
 
 meta "model_projection" function __split_fields_FUEL_TYPE__projection
 
 meta "inline : no" function __split_fields_FUEL_TYPE__projection
 
 type __split_fields__ref #"pump.ads" 20 0 0# =
  { mutable __split_fields__content "model_trace:" : __split_fields }
 
 function __split_fields__ref_2__projection #"pump.ads" 20 0 0# 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref_2__projection
 
 meta "inline : no" function __split_fields__ref_2__projection
 
 val __split_fields__havoc #"pump.ads" 20 0 0# 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type pump #"pump.ads" 20 0 0# =
  { __split_fields "model_trace:" : __split_fields }
 
 function pump___projection #"pump.ads" 20 0 0# 
   (a : pump) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function pump___projection
 
 meta "inline : no" function pump___projection
 
 predicate reservoir_info__pred #"pump.ads" 20 0 0# 
   (a : pump)  =
  true
 
 val rec__reservoir_info_ #"pump.ads" 20 0 0# 
   (a : pump) : Pump__reservoir.reservoir
  requires { (reservoir_info__pred a) }
  ensures { (result = a.__split_fields.rec__reservoir_info) }
 
 predicate pump_state__pred #"pump.ads" 20 0 0# 
   (a : pump)  =
  true
 
 val rec__pump_state_ #"pump.ads" 20 0 0# 
   (a : pump) : Pump__state_type.state_type
  requires { (pump_state__pred a) }
  ensures { (result = a.__split_fields.rec__pump_state) }
 
 predicate pumped__pred #"pump.ads" 20 0 0# 
   (a : pump)  =
  true
 
 val rec__pumped_ #"pump.ads" 20 0 0# 
   (a : pump) : Pump__float_number.float_number
  requires { (pumped__pred a) }
  ensures { (result = a.__split_fields.rec__pumped) }
 
 predicate nozzle_state__pred #"pump.ads" 20 0 0# 
   (a : pump)  =
  true
 
 val rec__nozzle_state_ #"pump.ads" 20 0 0# 
   (a : pump) : Pump__nozzle_type.nozzle_type
  requires { (nozzle_state__pred a) }
  ensures { (result = a.__split_fields.rec__nozzle_state) }
 
 predicate unit_price__pred #"pump.ads" 20 0 0# 
   (a : pump)  =
  true
 
 val rec__unit_price_ #"pump.ads" 20 0 0# 
   (a : pump) : Pump__float_number.float_number
  requires { (unit_price__pred a) }
  ensures { (result = a.__split_fields.rec__unit_price) }
 
 predicate fuel_type__pred #"pump.ads" 20 0 0# 
   (a : pump)  =
  true
 
 val rec__fuel_type_ #"pump.ads" 20 0 0# 
   (a : pump) : Pump__fuel_types.fuel_types
  requires { (fuel_type__pred a) }
  ensures { (result = a.__split_fields.rec__fuel_type) }
 
 function bool_eq #"pump.ads" 20 0 0# 
   (a : pump) (b : pump) : bool =
  (if (( ( ( ( ( ((Pump__reservoir.bool_eq a.__split_fields.rec__reservoir_info b.__split_fields.rec__reservoir_info) = True) /\ ((Pump__state_type.to_rep a.__split_fields.rec__pump_state) = (Pump__state_type.to_rep b.__split_fields.rec__pump_state)) ) /\ ((Pump__float_number.to_real a.__split_fields.rec__pumped) = (Pump__float_number.to_real b.__split_fields.rec__pumped)) ) /\ ((Pump__nozzle_type.to_rep a.__split_fields.rec__nozzle_state) = (Pump__nozzle_type.to_rep b.__split_fields.rec__nozzle_state)) ) /\ ((Pump__float_number.to_real a.__split_fields.rec__unit_price) = (Pump__float_number.to_real b.__split_fields.rec__unit_price)) ) /\ ((Pump__fuel_types.to_rep a.__split_fields.rec__fuel_type) = (Pump__fuel_types.to_rep b.__split_fields.rec__fuel_type)) )) then (
   True) else (
   False))
 
 function user_eq #"pump.ads" 20 0 0# 
   (a : pump) (b : pump) : bool
 
 function value__size #"pump.ads" 20 0 0# 
   : int
 
 function object__size #"pump.ads" 20 0 0# 
   (a : pump) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a : pump.
   ((object__size a) >= 0))
 
 function dummy #"pump.ads" 20 0 0# 
   : pump
 
 type pump__ref #"pump.ads" 20 0 0# =
  { mutable pump__content "model_trace:" : pump }
 
 function pump__ref___projection #"pump.ads" 20 0 0# 
   (a : pump__ref) : pump =
  a.pump__content
 
 meta "model_projection" function pump__ref___projection
 
 meta "inline : no" function pump__ref___projection
 
 val pump__havoc #"pump.ads" 20 0 0# 
   (x : pump__ref) : unit
  writes {x}

end

(* Module for defining the constant "price" defined at pump.ads:33, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__set_fuel_price__price
 use import "_gnatprove_standard".Main
 use        Pump__float_number

 function price #"pump.ads" 33 0 0# 
   : Pump__float_number.float_number
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 6 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "price" defined at pump.ads:33, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__set_fuel_price__price__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "statetype" defined at pump.ads:34, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__set_pump_state__statetype
 use import "_gnatprove_standard".Main

 function statetype #"pump.ads" 34 0 0# "model" "model_trace:3229" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 10 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "statetype" defined at pump.ads:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__set_pump_state__statetype__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at pump.ads:35, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__set_pumped__amount
 use import "_gnatprove_standard".Main
 use        Pump__float_number

 function amount #"pump.ads" 35 0 0# 
   : Pump__float_number.float_number
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 6 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at pump.ads:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__set_pumped__amount__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "nozzletype" defined at pump.ads:36, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__set_pump_nozzle_state__nozzletype
 use import "_gnatprove_standard".Main

 function nozzletype #"pump.ads" 36 0 0# "model" "model_trace:3283" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 11 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "nozzletype" defined at pump.ads:36, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__set_pump_nozzle_state__nozzletype__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "fueltype" defined at pump.ads:38, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__append_reservoir__fueltype
 use import "_gnatprove_standard".Main

 function fueltype #"pump.ads" 38 0 0# "model" "model_trace:3310" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 7 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "fueltype" defined at pump.ads:38, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__append_reservoir__fueltype__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "size" defined at pump.ads:40, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__set_reservoir_size__size
 use import "_gnatprove_standard".Main
 use        Pump__float_number

 function size #"pump.ads" 40 0 0# 
   : Pump__float_number.float_number
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 6 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "size" defined at pump.ads:40, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__set_reservoir_size__size__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at pump.ads:42, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__remove_petrol_reservoir__amount
 use import "_gnatprove_standard".Main
 use        Pump__float_number

 function amount #"pump.ads" 42 0 0# 
   : Pump__float_number.float_number
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 6 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at pump.ads:42, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__remove_petrol_reservoir__amount__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "pump_r" defined at pump.ads:48, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__get_state__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 function pump_r #"pump.ads" 48 0 0# "model_projected" "model_trace:3404" 
   : Pump__pump.pump
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:48, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__get_state__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_state" defined at pump.ads:48, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__get_state
 use import "_gnatprove_standard".Main
 use        Pump__pump

 function get_state #"pump.ads" 48 0 0# 
   (pump_r : Pump__pump.pump) : int

end

(* Module for defining the constant "pump_r" defined at pump.ads:49, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__get_current_nozzle_state__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 function pump_r #"pump.ads" 49 0 0# "model_projected" "model_trace:3423" 
   : Pump__pump.pump
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:49, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__get_current_nozzle_state__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_current_nozzle_state" defined at pump.ads:49, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__get_current_nozzle_state
 use import "_gnatprove_standard".Main
 use        Pump__pump

 function get_current_nozzle_state #"pump.ads" 49 0 0# 
   (pump_r : Pump__pump.pump) : int

end

(* Module for defining the constant "pump_r" defined at pump.ads:50, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__get_unit_price__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 function pump_r #"pump.ads" 50 0 0# "model_projected" "model_trace:3442" 
   : Pump__pump.pump
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:50, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__get_unit_price__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_unit_price" defined at pump.ads:50, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__get_unit_price
 use import "_gnatprove_standard".Main
 use        Pump__float_number
 use        Pump__pump

 function get_unit_price #"pump.ads" 50 0 0# 
   (pump_r : Pump__pump.pump) : Pump__float_number.float_number

end

(* Module for defining the constant "pump_r" defined at pump.ads:51, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__get_tanks_size__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 function pump_r #"pump.ads" 51 0 0# "model_projected" "model_trace:3461" 
   : Pump__pump.pump
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:51, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__get_tanks_size__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_tanks_size" defined at pump.ads:51, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__get_tanks_size
 use import "_gnatprove_standard".Main
 use        Pump__float_number
 use        Pump__pump

 function get_tanks_size #"pump.ads" 51 0 0# 
   (pump_r : Pump__pump.pump) : Pump__float_number.float_number

end

(* Module for defining the constant "pump_r" defined at pump.ads:52, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__get_resevoir_category__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 function pump_r #"pump.ads" 52 0 0# "model_projected" "model_trace:3480" 
   : Pump__pump.pump
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:52, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__get_resevoir_category__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_resevoir_category" defined at pump.ads:52, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__get_resevoir_category
 use import "_gnatprove_standard".Main
 use        Pump__pump

 function get_resevoir_category #"pump.ads" 52 0 0# 
   (pump_r : Pump__pump.pump) : int

end

(* Module for axiomatizing type "Tfloat_numberB" defined at pump_unit.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__Tfloat_numberB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type tfloat_numberB #"pump_unit.ads" 7 0 0# 
 
 function inv_small #"pump_unit.ads" 7 0 0# 
   : Main.__fixed =
  100
 
 function first #"pump_unit.ads" 7 0 0# 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last #"pump_unit.ads" 7 0 0# 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range #"pump_unit.ads" 7 0 0# 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = tfloat_numberB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function inv_small = inv_small
 
 type tfloat_numberB__ref #"pump_unit.ads" 7 0 0# =
  { mutable tfloat_numberB__content "model_trace:" : tfloat_numberB }
 
 function tfloat_numberB__ref_2__projection #"pump_unit.ads" 7 0 0# 
   (a : tfloat_numberB__ref) : tfloat_numberB =
  a.tfloat_numberB__content
 
 meta "model_projection" function tfloat_numberB__ref_2__projection
 
 meta "inline : no" function tfloat_numberB__ref_2__projection
 
 val tfloat_numberB__havoc #"pump_unit.ads" 7 0 0# 
   (x : tfloat_numberB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "float_number" defined at pump_unit.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__float_number
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type float_number #"pump_unit.ads" 7 0 0# 
 
 function inv_small #"pump_unit.ads" 7 0 0# 
   : Main.__fixed =
  100
 
 function first #"pump_unit.ads" 7 0 0# 
   : Main.__fixed =
  ( -9999999999 )
 
 function last #"pump_unit.ads" 7 0 0# 
   : Main.__fixed =
  9999999999
 
 predicate in_range #"pump_unit.ads" 7 0 0# 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = float_number, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function inv_small = inv_small
 
 type float_number__ref #"pump_unit.ads" 7 0 0# =
  { mutable float_number__content "model_trace:" : float_number }
 
 function float_number__ref_2__projection #"pump_unit.ads" 7 0 0# 
   (a : float_number__ref) : float_number =
  a.float_number__content
 
 meta "model_projection" function float_number__ref_2__projection
 
 meta "inline : no" function float_number__ref_2__projection
 
 val float_number__havoc #"pump_unit.ads" 7 0 0# 
   (x : float_number__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Tunit_id_typeP1" defined at pump_unit.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__Tunit_id_typeP1
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tunit_id_typeP1 #"pump_unit.ads" 8 0 0# 
 
 function first #"pump_unit.ads" 8 0 0# 
   : int =
  1
 
 function last #"pump_unit.ads" 8 0 0# 
   : int =
  6
 
 predicate in_range #"pump_unit.ads" 8 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tunit_id_typeP1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type tunit_id_typeP1__ref #"pump_unit.ads" 8 0 0# =
  { mutable tunit_id_typeP1__content "model_trace:" : tunit_id_typeP1 }
 
 function tunit_id_typeP1__ref___projection #"pump_unit.ads" 8 0 0# 
   (a : tunit_id_typeP1__ref) : tunit_id_typeP1 =
  a.tunit_id_typeP1__content
 
 meta "model_projection" function tunit_id_typeP1__ref___projection
 
 meta "inline : no" function tunit_id_typeP1__ref___projection
 
 val tunit_id_typeP1__havoc #"pump_unit.ads" 8 0 0# 
   (x : tunit_id_typeP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "unit_id_type" defined at pump_unit.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__unit_id_type
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"pump_unit.ads" 8 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  6
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T1s" defined at pump_unit.ads:16, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__pump_unit__T1s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  6
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "pump_unit" defined at pump_unit.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__pump_unit
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__float_number
 use        Pump__fuel_types
 use        Pump__state_type
 use        Pump__nozzle_type
 use        Pump__pump
 use        Pump_unit__unit_id_type
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 type __split_fields #"system.ads" 1 0 0# =
  { rec__id "model_trace:.3560" : Array__Int__Standard__character.map; rec__is_using "model_trace:.3571" : bool; rec__is_paid "model_trace:.3582" : bool; rec__to_pay : Pump__float_number.float_number; rec__pumped : Pump__float_number.float_number; rec__pump_active_fuel "model_trace:.3619" : Pump__fuel_types.fuel_types; rec__pump_active_state "model_trace:.3634" : Pump__state_type.state_type; rec__pump_nozzle_state "model_trace:.3649" : Pump__nozzle_type.nozzle_type; rec__pump_91 "model_trace:.3664" : Pump__pump.pump; rec__pump_95 "model_trace:.3676" : Pump__pump.pump; rec__pump_diesel "model_trace:.3688" : Pump__pump.pump }
 
 function __split_fields_ID__projection #"pump.ads" 20 0 0# "model_trace:.3560" 
   (a : __split_fields) : Array__Int__Standard__character.map =
  a.rec__id
 
 meta "model_projection" function __split_fields_ID__projection
 
 meta "inline : no" function __split_fields_ID__projection
 
 function __split_fields_IS_USING__projection #"pump_unit.ads" 14 0 0# "model_trace:.3571" 
   (a : __split_fields) : bool =
  a.rec__is_using
 
 meta "model_projection" function __split_fields_IS_USING__projection
 
 meta "inline : no" function __split_fields_IS_USING__projection
 
 function __split_fields_IS_PAID__projection #"pump_unit.ads" 14 0 0# "model_trace:.3582" 
   (a : __split_fields) : bool =
  a.rec__is_paid
 
 meta "model_projection" function __split_fields_IS_PAID__projection
 
 meta "inline : no" function __split_fields_IS_PAID__projection
 
 function __split_fields_PUMP_ACTIVE_FUEL__projection #"pump_unit.ads" 14 0 0# "model_trace:.3619" 
   (a : __split_fields) : Pump__fuel_types.fuel_types =
  a.rec__pump_active_fuel
 
 meta "model_projection" function __split_fields_PUMP_ACTIVE_FUEL__projection
 
 meta "inline : no" function __split_fields_PUMP_ACTIVE_FUEL__projection
 
 function __split_fields_PUMP_ACTIVE_STATE__projection #"pump_unit.ads" 14 0 0# "model_trace:.3634" 
   (a : __split_fields) : Pump__state_type.state_type =
  a.rec__pump_active_state
 
 meta "model_projection" function __split_fields_PUMP_ACTIVE_STATE__projection
 
 meta "inline : no" function __split_fields_PUMP_ACTIVE_STATE__projection
 
 function __split_fields_PUMP_NOZZLE_STATE__projection #"pump_unit.ads" 14 0 0# "model_trace:.3649" 
   (a : __split_fields) : Pump__nozzle_type.nozzle_type =
  a.rec__pump_nozzle_state
 
 meta "model_projection" function __split_fields_PUMP_NOZZLE_STATE__projection
 
 meta "inline : no" function __split_fields_PUMP_NOZZLE_STATE__projection
 
 function __split_fields_PUMP_91__projection #"pump_unit.ads" 14 0 0# "model_trace:.3664" 
   (a : __split_fields) : Pump__pump.pump =
  a.rec__pump_91
 
 meta "model_projection" function __split_fields_PUMP_91__projection
 
 meta "inline : no" function __split_fields_PUMP_91__projection
 
 function __split_fields_PUMP_95__projection #"pump_unit.ads" 14 0 0# "model_trace:.3676" 
   (a : __split_fields) : Pump__pump.pump =
  a.rec__pump_95
 
 meta "model_projection" function __split_fields_PUMP_95__projection
 
 meta "inline : no" function __split_fields_PUMP_95__projection
 
 function __split_fields_PUMP_Diesel__projection #"pump_unit.ads" 14 0 0# "model_trace:.3688" 
   (a : __split_fields) : Pump__pump.pump =
  a.rec__pump_diesel
 
 meta "model_projection" function __split_fields_PUMP_Diesel__projection
 
 meta "inline : no" function __split_fields_PUMP_Diesel__projection
 
 type __split_fields__ref #"pump_unit.ads" 14 0 0# =
  { mutable __split_fields__content "model_trace:" : __split_fields }
 
 function __split_fields__ref_3__projection #"pump_unit.ads" 14 0 0# 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref_3__projection
 
 meta "inline : no" function __split_fields__ref_3__projection
 
 val __split_fields__havoc #"pump_unit.ads" 14 0 0# 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type pump_unit #"pump_unit.ads" 14 0 0# =
  { __split_fields "model_trace:" : __split_fields }
 
 function pump_unit___projection #"pump_unit.ads" 14 0 0# 
   (a : pump_unit) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function pump_unit___projection
 
 meta "inline : no" function pump_unit___projection
 
 predicate id__pred #"pump_unit.ads" 14 0 0# 
   (a : pump_unit)  =
  true
 
 val rec__id_ #"pump_unit.ads" 14 0 0# 
   (a : pump_unit) : Array__Int__Standard__character.map
  requires { (id__pred a) }
  ensures { (result = a.__split_fields.rec__id) }
 
 predicate is_using__pred #"pump_unit.ads" 14 0 0# 
   (a : pump_unit)  =
  true
 
 val rec__is_using_ #"pump_unit.ads" 14 0 0# 
   (a : pump_unit) : bool
  requires { (is_using__pred a) }
  ensures { (result = a.__split_fields.rec__is_using) }
 
 predicate is_paid__pred #"pump_unit.ads" 14 0 0# 
   (a : pump_unit)  =
  true
 
 val rec__is_paid_ #"pump_unit.ads" 14 0 0# 
   (a : pump_unit) : bool
  requires { (is_paid__pred a) }
  ensures { (result = a.__split_fields.rec__is_paid) }
 
 predicate to_pay__pred #"pump_unit.ads" 14 0 0# 
   (a : pump_unit)  =
  true
 
 val rec__to_pay_ #"pump_unit.ads" 14 0 0# 
   (a : pump_unit) : Pump__float_number.float_number
  requires { (to_pay__pred a) }
  ensures { (result = a.__split_fields.rec__to_pay) }
 
 predicate pumped__pred #"pump_unit.ads" 14 0 0# 
   (a : pump_unit)  =
  true
 
 val rec__pumped_ #"pump_unit.ads" 14 0 0# 
   (a : pump_unit) : Pump__float_number.float_number
  requires { (pumped__pred a) }
  ensures { (result = a.__split_fields.rec__pumped) }
 
 predicate pump_active_fuel__pred #"pump_unit.ads" 14 0 0# 
   (a : pump_unit)  =
  true
 
 val rec__pump_active_fuel_ #"pump_unit.ads" 14 0 0# 
   (a : pump_unit) : Pump__fuel_types.fuel_types
  requires { (pump_active_fuel__pred a) }
  ensures { (result = a.__split_fields.rec__pump_active_fuel) }
 
 predicate pump_active_state__pred #"pump_unit.ads" 14 0 0# 
   (a : pump_unit)  =
  true
 
 val rec__pump_active_state_ #"pump_unit.ads" 14 0 0# 
   (a : pump_unit) : Pump__state_type.state_type
  requires { (pump_active_state__pred a) }
  ensures { (result = a.__split_fields.rec__pump_active_state) }
 
 predicate pump_nozzle_state__pred #"pump_unit.ads" 14 0 0# 
   (a : pump_unit)  =
  true
 
 val rec__pump_nozzle_state_ #"pump_unit.ads" 14 0 0# 
   (a : pump_unit) : Pump__nozzle_type.nozzle_type
  requires { (pump_nozzle_state__pred a) }
  ensures { (result = a.__split_fields.rec__pump_nozzle_state) }
 
 predicate pump_91__pred #"pump_unit.ads" 14 0 0# 
   (a : pump_unit)  =
  true
 
 val rec__pump_91_ #"pump_unit.ads" 14 0 0# 
   (a : pump_unit) : Pump__pump.pump
  requires { (pump_91__pred a) }
  ensures { (result = a.__split_fields.rec__pump_91) }
 
 predicate pump_95__pred #"pump_unit.ads" 14 0 0# 
   (a : pump_unit)  =
  true
 
 val rec__pump_95_ #"pump_unit.ads" 14 0 0# 
   (a : pump_unit) : Pump__pump.pump
  requires { (pump_95__pred a) }
  ensures { (result = a.__split_fields.rec__pump_95) }
 
 predicate pump_diesel__pred #"pump_unit.ads" 14 0 0# 
   (a : pump_unit)  =
  true
 
 val rec__pump_diesel_ #"pump_unit.ads" 14 0 0# 
   (a : pump_unit) : Pump__pump.pump
  requires { (pump_diesel__pred a) }
  ensures { (result = a.__split_fields.rec__pump_diesel) }
 
 function bool_eq #"pump_unit.ads" 14 0 0# 
   (a : pump_unit) (b : pump_unit) : bool =
  (if (( ( ( ( ( ( ( ( ( ( ((Pump_unit__unit_id_type.bool_eq a.__split_fields.rec__id b.__split_fields.rec__id) = True) /\ (a.__split_fields.rec__is_using = b.__split_fields.rec__is_using) ) /\ (a.__split_fields.rec__is_paid = b.__split_fields.rec__is_paid) ) /\ ((Pump__float_number.to_real a.__split_fields.rec__to_pay) = (Pump__float_number.to_real b.__split_fields.rec__to_pay)) ) /\ ((Pump__float_number.to_real a.__split_fields.rec__pumped) = (Pump__float_number.to_real b.__split_fields.rec__pumped)) ) /\ ((Pump__fuel_types.to_rep a.__split_fields.rec__pump_active_fuel) = (Pump__fuel_types.to_rep b.__split_fields.rec__pump_active_fuel)) ) /\ ((Pump__state_type.to_rep a.__split_fields.rec__pump_active_state) = (Pump__state_type.to_rep b.__split_fields.rec__pump_active_state)) ) /\ ((Pump__nozzle_type.to_rep a.__split_fields.rec__pump_nozzle_state) = (Pump__nozzle_type.to_rep b.__split_fields.rec__pump_nozzle_state)) ) /\ ((Pump__pump.bool_eq a.__split_fields.rec__pump_91 b.__split_fields.rec__pump_91) = True) ) /\ ((Pump__pump.bool_eq a.__split_fields.rec__pump_95 b.__split_fields.rec__pump_95) = True) ) /\ ((Pump__pump.bool_eq a.__split_fields.rec__pump_diesel b.__split_fields.rec__pump_diesel) = True) )) then (
   True) else (
   False))
 
 function user_eq #"pump_unit.ads" 14 0 0# 
   (a : pump_unit) (b : pump_unit) : bool
 
 function value__size #"pump_unit.ads" 14 0 0# 
   : int
 
 function object__size #"pump_unit.ads" 14 0 0# 
   (a : pump_unit) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a : pump_unit.
   ((object__size a) >= 0))
 
 function dummy #"pump_unit.ads" 14 0 0# 
   : pump_unit
 
 type pump_unit__ref #"pump_unit.ads" 14 0 0# =
  { mutable pump_unit__content "model_trace:" : pump_unit }
 
 function pump_unit__ref___projection #"pump_unit.ads" 14 0 0# 
   (a : pump_unit__ref) : pump_unit =
  a.pump_unit__content
 
 meta "model_projection" function pump_unit__ref___projection
 
 meta "inline : no" function pump_unit__ref___projection
 
 val pump_unit__havoc #"pump_unit.ads" 14 0 0# 
   (x : pump_unit__ref) : unit
  writes {x}

end

(* Module for defining the constant "pumpunit" defined at pump_unit.ads:30, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__get_pump__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 function pumpunit #"pump_unit.ads" 30 0 0# "model_projected" "model_trace:3709" 
   : Pump_unit__pump_unit.pump_unit
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__get_pump__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "fueltype" defined at pump_unit.ads:30, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__get_pump__fueltype
 use import "_gnatprove_standard".Main

 function fueltype #"pump_unit.ads" 30 0 0# "model" "model_trace:3718" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 7 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "fueltype" defined at pump_unit.ads:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__get_pump__fueltype__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_pump" defined at pump_unit.ads:30, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__get_pump
 use import "_gnatprove_standard".Main
 use        Pump__pump
 use        Pump_unit__pump_unit

 function get_pump #"pump_unit.ads" 30 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) (fueltype : int) : Pump__pump.pump

end

(* Module for defining the constant "pumpunit" defined at pump_unit.ads:31, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__get_tanks_size__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 function pumpunit #"pump_unit.ads" 31 0 0# "model_projected" "model_trace:3741" 
   : Pump_unit__pump_unit.pump_unit
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:31, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__get_tanks_size__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "fueltype" defined at pump_unit.ads:31, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__get_tanks_size__fueltype
 use import "_gnatprove_standard".Main

 function fueltype #"pump_unit.ads" 31 0 0# "model" "model_trace:3750" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 7 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "fueltype" defined at pump_unit.ads:31, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__get_tanks_size__fueltype__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_tanks_size" defined at pump_unit.ads:31, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__get_tanks_size
 use import "_gnatprove_standard".Main
 use        Pump__float_number
 use        Pump_unit__pump_unit

 function get_tanks_size #"pump_unit.ads" 31 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) (fueltype : int) : Pump__float_number.float_number

end

(* Module for defining the constant "pumpunit" defined at pump_unit.ads:32, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__get_id__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 function pumpunit #"pump_unit.ads" 32 0 0# "model_projected" "model_trace:3773" 
   : Pump_unit__pump_unit.pump_unit
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:32, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__get_id__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_id" defined at pump_unit.ads:32, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__get_id
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit
 use        Array__Int__Standard__character

 function get_id #"pump_unit.ads" 32 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) : Array__Int__Standard__character.map

end

(* Module for defining the constant "pumpunit" defined at pump_unit.ads:33, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__get_to_pay__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 function pumpunit #"pump_unit.ads" 33 0 0# "model_projected" "model_trace:3792" 
   : Pump_unit__pump_unit.pump_unit
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:33, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__get_to_pay__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_to_pay" defined at pump_unit.ads:33, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__get_to_pay
 use import "_gnatprove_standard".Main
 use        Pump__float_number
 use        Pump_unit__pump_unit

 function get_to_pay #"pump_unit.ads" 33 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) : Pump__float_number.float_number

end

(* Module for defining the constant "pumpunit" defined at pump_unit.ads:34, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__get_pumped__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 function pumpunit #"pump_unit.ads" 34 0 0# "model_projected" "model_trace:3813" 
   : Pump_unit__pump_unit.pump_unit
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__get_pumped__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_pumped" defined at pump_unit.ads:34, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__get_pumped
 use import "_gnatprove_standard".Main
 use        Pump__float_number
 use        Pump_unit__pump_unit

 function get_pumped #"pump_unit.ads" 34 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) : Pump__float_number.float_number

end

(* Module for defining the constant "pumpunit" defined at pump_unit.ads:35, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__get_fuel__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 function pumpunit #"pump_unit.ads" 35 0 0# "model_projected" "model_trace:3834" 
   : Pump_unit__pump_unit.pump_unit
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__get_fuel__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_fuel" defined at pump_unit.ads:35, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__get_fuel
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 function get_fuel #"pump_unit.ads" 35 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) : int

end

(* Module for defining the constant "pumpunit" defined at pump_unit.ads:36, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__unit_is_using__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 function pumpunit #"pump_unit.ads" 36 0 0# "model_projected" "model_trace:3855" 
   : Pump_unit__pump_unit.pump_unit
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:36, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__unit_is_using__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "unit_is_using" defined at pump_unit.ads:36, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__unit_is_using
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 function unit_is_using #"pump_unit.ads" 36 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) : bool

end

(* Module for defining the constant "pumpunit" defined at pump_unit.ads:37, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__unit_is_paid__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 function pumpunit #"pump_unit.ads" 37 0 0# "model_projected" "model_trace:3874" 
   : Pump_unit__pump_unit.pump_unit
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:37, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__unit_is_paid__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "unit_is_paid" defined at pump_unit.ads:37, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__unit_is_paid
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 function unit_is_paid #"pump_unit.ads" 37 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) : bool

end

(* Module for defining the constant "pumpunit" defined at pump_unit.ads:38, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__get_pump_unit_state__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 function pumpunit #"pump_unit.ads" 38 0 0# "model_projected" "model_trace:3893" 
   : Pump_unit__pump_unit.pump_unit
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:38, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__get_pump_unit_state__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_pump_unit_state" defined at pump_unit.ads:38, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__get_pump_unit_state
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 function get_pump_unit_state #"pump_unit.ads" 38 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) : int

end

(* Module for defining the constant "pumpunit" defined at pump_unit.ads:39, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__get_pump_nozzle_state__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 function pumpunit #"pump_unit.ads" 39 0 0# "model_projected" "model_trace:3914" 
   : Pump_unit__pump_unit.pump_unit
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:39, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__get_pump_nozzle_state__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_pump_nozzle_state" defined at pump_unit.ads:39, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__get_pump_nozzle_state
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 function get_pump_nozzle_state #"pump_unit.ads" 39 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) : int

end

(* Module for defining the constant "amount" defined at pump_unit.ads:48, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__set_to_pay__amount
 use import "_gnatprove_standard".Main
 use        Pump__float_number

 function amount #"pump_unit.ads" 48 0 0# 
   : Pump__float_number.float_number
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 6 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at pump_unit.ads:48, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__set_to_pay__amount__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "id" defined at pump_unit.ads:49, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__set_unit_id__id
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function id #"pump_unit.ads" 49 0 0# "model_projected" "model_trace:4037" 
   : Array__Int__Standard__character.map
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 8 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "id" defined at pump_unit.ads:49, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__set_unit_id__id__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at pump_unit.ads:50, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__set_pumped__amount
 use import "_gnatprove_standard".Main
 use        Pump__float_number

 function amount #"pump_unit.ads" 50 0 0# 
   : Pump__float_number.float_number
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 6 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at pump_unit.ads:50, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__set_pumped__amount__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "fueltype" defined at pump_unit.ads:51, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__set_pump_active_state__fueltype
 use import "_gnatprove_standard".Main

 function fueltype #"pump_unit.ads" 51 0 0# "model" "model_trace:4093" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 7 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "fueltype" defined at pump_unit.ads:51, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__set_pump_active_state__fueltype__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "statetype" defined at pump_unit.ads:51, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__set_pump_active_state__statetype
 use import "_gnatprove_standard".Main

 function statetype #"pump_unit.ads" 51 0 0# "model" "model_trace:4104" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 10 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "statetype" defined at pump_unit.ads:51, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__set_pump_active_state__statetype__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "fueltype" defined at pump_unit.ads:52, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__set_pump_nozzle_state__fueltype
 use import "_gnatprove_standard".Main

 function fueltype #"pump_unit.ads" 52 0 0# "model" "model_trace:4133" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 7 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "fueltype" defined at pump_unit.ads:52, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__set_pump_nozzle_state__fueltype__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "nozzletype" defined at pump_unit.ads:52, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__set_pump_nozzle_state__nozzletype
 use import "_gnatprove_standard".Main

 function nozzletype #"pump_unit.ads" 52 0 0# "model" "model_trace:4144" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 11 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "nozzletype" defined at pump_unit.ads:52, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__set_pump_nozzle_state__nozzletype__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "fueltype" defined at pump_unit.ads:54, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__add_pump__fueltype
 use import "_gnatprove_standard".Main

 function fueltype #"pump_unit.ads" 54 0 0# "model" "model_trace:4184" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 7 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "fueltype" defined at pump_unit.ads:54, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__add_pump__fueltype__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "fueltype" defined at pump_unit.ads:56, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__left_nozzle__fueltype
 use import "_gnatprove_standard".Main

 function fueltype #"pump_unit.ads" 56 0 0# "model" "model_trace:4224" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 7 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "fueltype" defined at pump_unit.ads:56, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__left_nozzle__fueltype__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at pump_unit.ads:70, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__start_pumping__amount
 use import "_gnatprove_standard".Main
 use        Pump__float_number

 function amount #"pump_unit.ads" 70 0 0# 
   : Pump__float_number.float_number
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 6 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at pump_unit.ads:70, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__start_pumping__amount__axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "Tfloat_numberB" defined at cash_register.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Cash_register__Tfloat_numberB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type tfloat_numberB #"cash_register.ads" 8 0 0# 
 
 function inv_small #"cash_register.ads" 8 0 0# 
   : Main.__fixed =
  100
 
 function first #"cash_register.ads" 8 0 0# 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last #"cash_register.ads" 8 0 0# 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range #"cash_register.ads" 8 0 0# 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = tfloat_numberB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function inv_small = inv_small
 
 type tfloat_numberB__ref #"cash_register.ads" 8 0 0# =
  { mutable tfloat_numberB__content "model_trace:" : tfloat_numberB }
 
 function tfloat_numberB__ref_3__projection #"cash_register.ads" 8 0 0# 
   (a : tfloat_numberB__ref) : tfloat_numberB =
  a.tfloat_numberB__content
 
 meta "model_projection" function tfloat_numberB__ref_3__projection
 
 meta "inline : no" function tfloat_numberB__ref_3__projection
 
 val tfloat_numberB__havoc #"cash_register.ads" 8 0 0# 
   (x : tfloat_numberB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "float_number" defined at cash_register.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Cash_register__float_number
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type float_number #"cash_register.ads" 8 0 0# 
 
 function inv_small #"cash_register.ads" 8 0 0# 
   : Main.__fixed =
  100
 
 function first #"cash_register.ads" 8 0 0# 
   : Main.__fixed =
  ( -9999999999 )
 
 function last #"cash_register.ads" 8 0 0# 
   : Main.__fixed =
  9999999999
 
 predicate in_range #"cash_register.ads" 8 0 0# 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = float_number, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function inv_small = inv_small
 
 type float_number__ref #"cash_register.ads" 8 0 0# =
  { mutable float_number__content "model_trace:" : float_number }
 
 function float_number__ref_3__projection #"cash_register.ads" 8 0 0# 
   (a : float_number__ref) : float_number =
  a.float_number__content
 
 meta "model_projection" function float_number__ref_3__projection
 
 meta "inline : no" function float_number__ref_3__projection
 
 val float_number__havoc #"cash_register.ads" 8 0 0# 
   (x : float_number__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Tunit_id_typeP1" defined at cash_register.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Cash_register__Tunit_id_typeP1
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tunit_id_typeP1 #"cash_register.ads" 9 0 0# 
 
 function first #"cash_register.ads" 9 0 0# 
   : int =
  1
 
 function last #"cash_register.ads" 9 0 0# 
   : int =
  6
 
 predicate in_range #"cash_register.ads" 9 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tunit_id_typeP1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type tunit_id_typeP1__ref #"cash_register.ads" 9 0 0# =
  { mutable tunit_id_typeP1__content "model_trace:" : tunit_id_typeP1 }
 
 function tunit_id_typeP1__ref_2__projection #"cash_register.ads" 9 0 0# 
   (a : tunit_id_typeP1__ref) : tunit_id_typeP1 =
  a.tunit_id_typeP1__content
 
 meta "model_projection" function tunit_id_typeP1__ref_2__projection
 
 meta "inline : no" function tunit_id_typeP1__ref_2__projection
 
 val tunit_id_typeP1__havoc #"cash_register.ads" 9 0 0# 
   (x : tunit_id_typeP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "unit_id_type" defined at cash_register.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Cash_register__unit_id_type
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"cash_register.ads" 9 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  6
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "pump_unit_id" defined at cash_register.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Cash_register__pump_unit_id
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__float_number
 use        Pump__fuel_types
 use        Pump_unit__unit_id_type
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 type __split_fields #"system.ads" 1 0 0# =
  { rec__id "model_trace:.4567" : Array__Int__Standard__character.map; rec__to_pay : Pump__float_number.float_number; rec__pumped : Pump__float_number.float_number; rec__fuel "model_trace:.4603" : Pump__fuel_types.fuel_types }
 
 function __split_fields_ID2__projection #"pump.ads" 7 0 0# "model_trace:.4567" 
   (a : __split_fields) : Array__Int__Standard__character.map =
  a.rec__id
 
 meta "model_projection" function __split_fields_ID2__projection
 
 meta "inline : no" function __split_fields_ID2__projection
 
 function __split_fields_FUEL__projection #"cash_register.ads" 14 0 0# "model_trace:.4603" 
   (a : __split_fields) : Pump__fuel_types.fuel_types =
  a.rec__fuel
 
 meta "model_projection" function __split_fields_FUEL__projection
 
 meta "inline : no" function __split_fields_FUEL__projection
 
 type __split_fields__ref #"cash_register.ads" 14 0 0# =
  { mutable __split_fields__content "model_trace:" : __split_fields }
 
 function __split_fields__ref_4__projection #"cash_register.ads" 14 0 0# 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref_4__projection
 
 meta "inline : no" function __split_fields__ref_4__projection
 
 val __split_fields__havoc #"cash_register.ads" 14 0 0# 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type pump_unit_id #"cash_register.ads" 14 0 0# =
  { __split_fields "model_trace:" : __split_fields }
 
 function pump_unit_id___projection #"cash_register.ads" 14 0 0# 
   (a : pump_unit_id) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function pump_unit_id___projection
 
 meta "inline : no" function pump_unit_id___projection
 
 predicate id__pred #"cash_register.ads" 14 0 0# 
   (a : pump_unit_id)  =
  true
 
 val rec__id_ #"cash_register.ads" 14 0 0# 
   (a : pump_unit_id) : Array__Int__Standard__character.map
  requires { (id__pred a) }
  ensures { (result = a.__split_fields.rec__id) }
 
 predicate to_pay__pred #"cash_register.ads" 14 0 0# 
   (a : pump_unit_id)  =
  true
 
 val rec__to_pay_ #"cash_register.ads" 14 0 0# 
   (a : pump_unit_id) : Pump__float_number.float_number
  requires { (to_pay__pred a) }
  ensures { (result = a.__split_fields.rec__to_pay) }
 
 predicate pumped__pred #"cash_register.ads" 14 0 0# 
   (a : pump_unit_id)  =
  true
 
 val rec__pumped_ #"cash_register.ads" 14 0 0# 
   (a : pump_unit_id) : Pump__float_number.float_number
  requires { (pumped__pred a) }
  ensures { (result = a.__split_fields.rec__pumped) }
 
 predicate fuel__pred #"cash_register.ads" 14 0 0# 
   (a : pump_unit_id)  =
  true
 
 val rec__fuel_ #"cash_register.ads" 14 0 0# 
   (a : pump_unit_id) : Pump__fuel_types.fuel_types
  requires { (fuel__pred a) }
  ensures { (result = a.__split_fields.rec__fuel) }
 
 function bool_eq #"cash_register.ads" 14 0 0# 
   (a : pump_unit_id) (b : pump_unit_id) : bool =
  (if (( ( ( ((Pump_unit__unit_id_type.bool_eq a.__split_fields.rec__id b.__split_fields.rec__id) = True) /\ ((Pump__float_number.to_real a.__split_fields.rec__to_pay) = (Pump__float_number.to_real b.__split_fields.rec__to_pay)) ) /\ ((Pump__float_number.to_real a.__split_fields.rec__pumped) = (Pump__float_number.to_real b.__split_fields.rec__pumped)) ) /\ ((Pump__fuel_types.to_rep a.__split_fields.rec__fuel) = (Pump__fuel_types.to_rep b.__split_fields.rec__fuel)) )) then (
   True) else (
   False))
 
 function user_eq #"cash_register.ads" 14 0 0# 
   (a : pump_unit_id) (b : pump_unit_id) : bool
 
 function value__size #"cash_register.ads" 14 0 0# 
   : int
 
 function object__size #"cash_register.ads" 14 0 0# 
   (a : pump_unit_id) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a : pump_unit_id.
   ((object__size a) >= 0))
 
 function dummy #"cash_register.ads" 14 0 0# 
   : pump_unit_id
 
 type pump_unit_id__ref #"cash_register.ads" 14 0 0# =
  { mutable pump_unit_id__content "model_trace:" : pump_unit_id }
 
 function pump_unit_id__ref___projection #"cash_register.ads" 14 0 0# 
   (a : pump_unit_id__ref) : pump_unit_id =
  a.pump_unit_id__content
 
 meta "model_projection" function pump_unit_id__ref___projection
 
 meta "inline : no" function pump_unit_id__ref___projection
 
 val pump_unit_id__havoc #"cash_register.ads" 14 0 0# 
   (x : pump_unit_id__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "cash_register" defined at cash_register.ads:24, created in Gnat2Why.Types.Translate_Type *)
module Cash_register__cash_register
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Cash_register__pump_unit_id

 type __split_fields #"cash_register.ads" 14 0 0# =
  { rec__unit_1 "model_trace:.4627" : Cash_register__pump_unit_id.pump_unit_id }
 
 function __split_fields_UNIT_1__projection #"cash_register.ads" 14 0 0# "model_trace:.4627" 
   (a : __split_fields) : Cash_register__pump_unit_id.pump_unit_id =
  a.rec__unit_1
 
 meta "model_projection" function __split_fields_UNIT_1__projection
 
 meta "inline : no" function __split_fields_UNIT_1__projection
 
 type __split_fields__ref #"cash_register.ads" 24 0 0# =
  { mutable __split_fields__content "model_trace:" : __split_fields }
 
 function __split_fields__ref_5__projection #"cash_register.ads" 24 0 0# 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref_5__projection
 
 meta "inline : no" function __split_fields__ref_5__projection
 
 val __split_fields__havoc #"cash_register.ads" 24 0 0# 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type cash_register #"cash_register.ads" 24 0 0# =
  { __split_fields "model_trace:" : __split_fields }
 
 function cash_register___projection #"cash_register.ads" 24 0 0# 
   (a : cash_register) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function cash_register___projection
 
 meta "inline : no" function cash_register___projection
 
 predicate unit_1__pred #"cash_register.ads" 24 0 0# 
   (a : cash_register)  =
  true
 
 val rec__unit_1_ #"cash_register.ads" 24 0 0# 
   (a : cash_register) : Cash_register__pump_unit_id.pump_unit_id
  requires { (unit_1__pred a) }
  ensures { (result = a.__split_fields.rec__unit_1) }
 
 function bool_eq #"cash_register.ads" 24 0 0# 
   (a : cash_register) (b : cash_register) : bool =
  (if (((Cash_register__pump_unit_id.bool_eq a.__split_fields.rec__unit_1 b.__split_fields.rec__unit_1) = True)) then (
   True) else (
   False))
 
 function user_eq #"cash_register.ads" 24 0 0# 
   (a : cash_register) (b : cash_register) : bool
 
 function value__size #"cash_register.ads" 24 0 0# 
   : int
 
 function object__size #"cash_register.ads" 24 0 0# 
   (a : cash_register) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a : cash_register.
   ((object__size a) >= 0))
 
 function dummy #"cash_register.ads" 24 0 0# 
   : cash_register
 
 type cash_register__ref #"cash_register.ads" 24 0 0# =
  { mutable cash_register__content "model_trace:" : cash_register }
 
 function cash_register__ref___projection #"cash_register.ads" 24 0 0# 
   (a : cash_register__ref) : cash_register =
  a.cash_register__content
 
 meta "model_projection" function cash_register__ref___projection
 
 meta "inline : no" function cash_register__ref___projection
 
 val cash_register__havoc #"cash_register.ads" 24 0 0# 
   (x : cash_register__ref) : unit
  writes {x}

end

(* Module for defining the constant "amount" defined at cash_register.ads:32, created in Gnat2Why.Decls.Translate_Constant *)
module Cash_register__payfuel__amount
 use import "_gnatprove_standard".Main
 use        Pump__float_number

 function amount #"cash_register.ads" 32 0 0# 
   : Pump__float_number.float_number
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 6 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at cash_register.ads:32, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Cash_register__payfuel__amount__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "pumpunit" defined at cash_register.ads:33, created in Gnat2Why.Decls.Translate_Constant *)
module Cash_register__set_pumped_info_to_cash_register__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 function pumpunit #"cash_register.ads" 33 0 0# "model_projected" "model_trace:4697" 
   : Pump_unit__pump_unit.pump_unit
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at cash_register.ads:33, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Cash_register__set_pumped_info_to_cash_register__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s" defined at sprint.ads:4, created in Gnat2Why.Decls.Translate_Constant *)
module Sprint__print__s
 use import "_gnatprove_standard".Main
 use        Standard__string

 function s #"sprint.ads" 4 0 0# "model_projected" "model_trace:4734" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s" defined at sprint.ads:4, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sprint__print__s__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s1" defined at sprint.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Sprint__print_float_type__s1
 use import "_gnatprove_standard".Main
 use        Standard__string

 function s1 #"sprint.ads" 5 0 0# "model_projected" "model_trace:4752" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s1" defined at sprint.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sprint__print_float_type__s1__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s2" defined at sprint.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Sprint__print_float_type__s2
 use import "_gnatprove_standard".Main
 use        Pump__float_number

 function s2 #"sprint.ads" 5 0 0# 
   : Pump__float_number.float_number
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 6 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s2" defined at sprint.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sprint__print_float_type__s2__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s1" defined at sprint.ads:6, created in Gnat2Why.Decls.Translate_Constant *)
module Sprint__print_state_type__s1
 use import "_gnatprove_standard".Main
 use        Standard__string

 function s1 #"sprint.ads" 6 0 0# "model_projected" "model_trace:4781" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s1" defined at sprint.ads:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sprint__print_state_type__s1__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s2" defined at sprint.ads:6, created in Gnat2Why.Decls.Translate_Constant *)
module Sprint__print_state_type__s2
 use import "_gnatprove_standard".Main

 function s2 #"sprint.ads" 6 0 0# "model" "model_trace:4790" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 10 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s2" defined at sprint.ads:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sprint__print_state_type__s2__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s1" defined at sprint.ads:7, created in Gnat2Why.Decls.Translate_Constant *)
module Sprint__print_nozzle_type__s1
 use import "_gnatprove_standard".Main
 use        Standard__string

 function s1 #"sprint.ads" 7 0 0# "model_projected" "model_trace:4810" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s1" defined at sprint.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sprint__print_nozzle_type__s1__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s2" defined at sprint.ads:7, created in Gnat2Why.Decls.Translate_Constant *)
module Sprint__print_nozzle_type__s2
 use import "_gnatprove_standard".Main

 function s2 #"sprint.ads" 7 0 0# "model" "model_trace:4819" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 11 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s2" defined at sprint.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sprint__print_nozzle_type__s2__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s1" defined at sprint.ads:8, created in Gnat2Why.Decls.Translate_Constant *)
module Sprint__print_fuel_type__s1
 use import "_gnatprove_standard".Main
 use        Standard__string

 function s1 #"sprint.ads" 8 0 0# "model_projected" "model_trace:4839" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s1" defined at sprint.ads:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sprint__print_fuel_type__s1__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s2" defined at sprint.ads:8, created in Gnat2Why.Decls.Translate_Constant *)
module Sprint__print_fuel_type__s2
 use import "_gnatprove_standard".Main

 function s2 #"sprint.ads" 8 0 0# "model" "model_trace:4848" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 7 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s2" defined at sprint.ads:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sprint__print_fuel_type__s2__axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "root_stream_type" defined at a-stream.ads:70, created in Gnat2Why.Types.Translate_Type *)
module Ada__streams__root_stream_type
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type __split_fields #"pump.ads" 7 0 0# =
  { rec__ext__ "model_trace:" : Main.__private }
 
 function __split_fields___projection #"pump.ads" 7 0 0# 
   (a : __split_fields) : Main.__private =
  a.rec__ext__
 
 meta "model_projection" function __split_fields___projection
 
 meta "inline : no" function __split_fields___projection
 
 type __split_fields__ref #"pump.ads" 7 0 0# =
  { mutable __split_fields__content "model_trace:" : __split_fields }
 
 function __split_fields__ref_6__projection #"pump.ads" 7 0 0# 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref_6__projection
 
 meta "inline : no" function __split_fields__ref_6__projection
 
 val __split_fields__havoc #"pump.ads" 7 0 0# 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type root_stream_type #"a-stream.ads" 70 0 0# =
  { __split_fields "model_trace:" : __split_fields; attr__tag "model_trace:" : int }
 
 function root_stream_type___projection #"a-stream.ads" 70 0 0# 
   (a : root_stream_type) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function root_stream_type___projection
 
 meta "inline : no" function root_stream_type___projection
 
 function root_stream_type_2__projection #"a-stream.ads" 70 0 0# 
   (a : root_stream_type) : int =
  a.attr__tag
 
 meta "model_projection" function root_stream_type_2__projection
 
 meta "inline : no" function root_stream_type_2__projection
 
 function user_eq #"a-stream.ads" 70 0 0# 
   (a : root_stream_type) (b : root_stream_type) : bool
 
 function __dispatch_eq #"a-stream.ads" 70 0 0# 
   (a : root_stream_type) (b : root_stream_type) : bool
 
 function __tag #"a-stream.ads" 70 0 0# 
   : int
 
 function value__size #"a-stream.ads" 70 0 0# 
   : int
 
 function object__size #"a-stream.ads" 70 0 0# 
   (a : root_stream_type) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a : root_stream_type.
   ((object__size a) >= 0))
 
 function dummy #"a-stream.ads" 70 0 0# 
   : root_stream_type
 
 type root_stream_type__ref #"a-stream.ads" 70 0 0# =
  { mutable root_stream_type__content "model_trace:" : root_stream_type }
 
 function root_stream_type__ref___projection #"a-stream.ads" 70 0 0# 
   (a : root_stream_type__ref) : root_stream_type =
  a.root_stream_type__content
 
 meta "model_projection" function root_stream_type__ref___projection
 
 meta "inline : no" function root_stream_type__ref___projection
 
 val root_stream_type__havoc #"a-stream.ads" 70 0 0# 
   (x : root_stream_type__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "stream_element" defined at a-stream.ads:42, created in Gnat2Why.Types.Translate_Type *)
module Ada__streams__stream_element
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV8

 type stream_element #"a-stream.ads" 42 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"a-stream.ads" 42 0 0# 
   : BV8.t
 
 function first #"a-stream.ads" 42 0 0# 
   : BV8.t =
  ( BV8.of_int 0 )
 
 function last #"a-stream.ads" 42 0 0# 
   : BV8.t =
  ( BV8.of_int 255 )
 
 function first_int #"a-stream.ads" 42 0 0# 
   : int =
  0
 
 function last_int #"a-stream.ads" 42 0 0# 
   : int =
  255
 
 predicate in_range #"a-stream.ads" 42 0 0# 
   (x : BV8.t)  =
  true
 
 predicate in_range_int #"a-stream.ads" 42 0 0# 
   (x : int)  =
  BV8.uint_in_range x
 
 clone export "ada__model".Static_Modular_8 with
 type t = stream_element, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type stream_element__ref #"a-stream.ads" 42 0 0# =
  { mutable stream_element__content "model_trace:" : stream_element }
 
 function stream_element__ref___projection #"a-stream.ads" 42 0 0# 
   (a : stream_element__ref) : stream_element =
  a.stream_element__content
 
 meta "model_projection" function stream_element__ref___projection
 
 meta "inline : no" function stream_element__ref___projection
 
 val stream_element__havoc #"a-stream.ads" 42 0 0# 
   (x : stream_element__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Tstream_element_offsetB" defined at a-stream.ads:44, created in Gnat2Why.Types.Translate_Type *)
module Ada__streams__Tstream_element_offsetB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tstream_element_offsetB #"a-stream.ads" 44 0 0# 
 
 function first #"a-stream.ads" 44 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"a-stream.ads" 44 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"a-stream.ads" 44 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tstream_element_offsetB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type tstream_element_offsetB__ref #"a-stream.ads" 44 0 0# =
  { mutable tstream_element_offsetB__content "model_trace:" : tstream_element_offsetB }
 
 function tstream_element_offsetB__ref___projection #"a-stream.ads" 44 0 0# 
   (a : tstream_element_offsetB__ref) : tstream_element_offsetB =
  a.tstream_element_offsetB__content
 
 meta "model_projection" function tstream_element_offsetB__ref___projection
 
 meta "inline : no" function tstream_element_offsetB__ref___projection
 
 val tstream_element_offsetB__havoc #"a-stream.ads" 44 0 0# 
   (x : tstream_element_offsetB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "stream_element_offset" defined at a-stream.ads:44, created in Gnat2Why.Types.Translate_Type *)
module Ada__streams__stream_element_offset
 use import "_gnatprove_standard".Main
 use import "int".Int

 type stream_element_offset #"a-stream.ads" 44 0 0# 
 
 function first #"a-stream.ads" 44 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"a-stream.ads" 44 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"a-stream.ads" 44 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = stream_element_offset, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type stream_element_offset__ref #"a-stream.ads" 44 0 0# =
  { mutable stream_element_offset__content "model_trace:" : stream_element_offset }
 
 function stream_element_offset__ref___projection #"a-stream.ads" 44 0 0# 
   (a : stream_element_offset__ref) : stream_element_offset =
  a.stream_element_offset__content
 
 meta "model_projection" function stream_element_offset__ref___projection
 
 meta "inline : no" function stream_element_offset__ref___projection
 
 val stream_element_offset__havoc #"a-stream.ads" 44 0 0# 
   (x : stream_element_offset__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "stream_element_count" defined at a-stream.ads:51, created in Gnat2Why.Types.Translate_Type *)
module Ada__streams__stream_element_count
 use import "_gnatprove_standard".Main
 use import "int".Int

 type stream_element_count #"a-stream.ads" 51 0 0# 
 
 function first #"a-stream.ads" 51 0 0# 
   : int =
  0
 
 function last #"a-stream.ads" 51 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"a-stream.ads" 51 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = stream_element_count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type stream_element_count__ref #"a-stream.ads" 51 0 0# =
  { mutable stream_element_count__content "model_trace:" : stream_element_count }
 
 function stream_element_count__ref___projection #"a-stream.ads" 51 0 0# 
   (a : stream_element_count__ref) : stream_element_count =
  a.stream_element_count__content
 
 meta "model_projection" function stream_element_count__ref___projection
 
 meta "inline : no" function stream_element_count__ref___projection
 
 val stream_element_count__havoc #"a-stream.ads" 51 0 0# 
   (x : stream_element_count__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "stream_element_array" defined at a-stream.ads:54, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Ada__streams__stream_element
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__streams__stream_element

 function index_I1_one #"a-stream.ads" 51 0 0# 
   : int =
  1
 
 type component_type #"a-stream.ads" 51 0 0# =
  Ada__streams__stream_element.stream_element
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function index_Index_one #"a-stream.ads" 42 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_BV8_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Ada__streams__stream_element.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "stream_element_array" defined at a-stream.ads:54, created in Gnat2Why.Types.Translate_Type *)
module Ada__streams__stream_element_array
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__streams__stream_element
 use        Ada__streams__Tstream_element_offsetB
 use        Ada__streams__stream_element_offset
 use        Array__Int__Ada__streams__stream_element

 type component_type #"a-stream.ads" 42 0 0# =
  Ada__streams__stream_element.stream_element
 
 function index_1_id #"a-stream.ads" 42 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Ada__streams__stream_element.map, 
 function array_bool_eq = Array__Int__Ada__streams__stream_element.bool_eq, 
 type index_base_type = Ada__streams__Tstream_element_offsetB.tstream_element_offsetB, 
 type index_rep_type = int, 
 function to_rep = Ada__streams__Tstream_element_offsetB.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Ada__streams__Tstream_element_offsetB.in_range, 
 predicate index_dynamic_property = Ada__streams__stream_element_offset.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type stream_element_array #"a-stream.ads" 54 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type stream_element_array__ref #"a-stream.ads" 54 0 0# =
  { mutable stream_element_array__content "model_trace:" : stream_element_array }
 
 function stream_element_array__ref___projection #"a-stream.ads" 54 0 0# 
   (a : stream_element_array__ref) : stream_element_array =
  a.stream_element_array__content
 
 meta "model_projection" function stream_element_array__ref___projection
 
 meta "inline : no" function stream_element_array__ref___projection
 
 val stream_element_array__havoc #"a-stream.ads" 54 0 0# 
   (x : stream_element_array__ref) : unit
  writes {x}

end

(* Module for defining the constant "item" defined at a-stream.ads:65, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__streams__write__item
 use import "_gnatprove_standard".Main
 use        Ada__streams__stream_element_array

 function item #"a-stream.ads" 65 0 0# "model_projected" "model_trace:7409" 
   : Ada__streams__stream_element_array.stream_element_array
 
 function attr__ATTRIBUTE_ADDRESS #"a-stream.ads" 54 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-stream.ads:65, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__streams__write__item__axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "Troot_stream_typeC" defined at a-stream.ads:39, created in Gnat2Why.Types.Translate_Type *)
module Ada__streams__Troot_stream_typeC
 use export Ada__streams__root_stream_type
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "v" defined at a-stream.ads:82, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__streams__write_sea__v
 use import "_gnatprove_standard".Main
 use        Ada__streams__stream_element_array

 function v #"a-stream.ads" 82 0 0# "model_projected" "model_trace:7479" 
   : Ada__streams__stream_element_array.stream_element_array
 
 function attr__ATTRIBUTE_ADDRESS #"a-stream.ads" 54 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "v" defined at a-stream.ads:82, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__streams__write_sea__v__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "v" defined at a-stream.ads:85, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__streams__stream_element_arraySW__v
 use import "_gnatprove_standard".Main
 use        Ada__streams__stream_element_array

 function v #"a-stream.ads" 85 0 0# 
   : Ada__streams__stream_element_array.stream_element_array
 
 function attr__ATTRIBUTE_ADDRESS #"a-stream.ads" 54 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "v" defined at a-stream.ads:85, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__streams__stream_element_arraySW__v__axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "name" defined at system.ads:46, created in Gnat2Why.Types.Translate_Type *)
module System__name
 use import "_gnatprove_standard".Main
 use import "int".Int

 type name #"system.ads" 46 0 0# 
 
 function first #"system.ads" 46 0 0# 
   : int =
  0
 
 function last #"system.ads" 46 0 0# 
   : int =
  0
 
 predicate in_range #"system.ads" 46 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = name, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type name__ref #"system.ads" 46 0 0# =
  { mutable name__content "model_trace:" : name }
 
 function name__ref___projection #"system.ads" 46 0 0# 
   (a : name__ref) : name =
  a.name__content
 
 meta "model_projection" function name__ref___projection
 
 meta "inline : no" function name__ref___projection
 
 val name__havoc #"system.ads" 46 0 0# 
   (x : name__ref) : unit
  writes {x}

end

(* Module for defining the constant "system_name" defined at system.ads:47, created in Gnat2Why.Decls.Translate_Constant *)
module System__system_name
 use import "_gnatprove_standard".Main

 function system_name #"system.ads" 47 0 0# "model" "model_trace:7540" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 46 0 0# 
   : int

end

(* Module for axiomatizing type "address" defined at system.ads:108, created in Gnat2Why.Types.Translate_Type *)
module System__address
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32

 type address #"system.ads" 108 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"system.ads" 108 0 0# 
   : BV32.t
 
 function first #"system.ads" 108 0 0# 
   : BV32.t =
  ( BV32.of_int 0 )
 
 function last #"system.ads" 108 0 0# 
   : BV32.t =
  ( BV32.of_int 4294967295 )
 
 function first_int #"system.ads" 108 0 0# 
   : int =
  0
 
 function last_int #"system.ads" 108 0 0# 
   : int =
  4294967295
 
 predicate in_range #"system.ads" 108 0 0# 
   (x : BV32.t)  =
  true
 
 predicate in_range_int #"system.ads" 108 0 0# 
   (x : int)  =
  BV32.uint_in_range x
 
 clone export "ada__model".Static_Modular_32 with
 type t = address, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type address__ref #"system.ads" 108 0 0# =
  { mutable address__content "model_trace:" : address }
 
 function address__ref___projection #"system.ads" 108 0 0# 
   (a : address__ref) : address =
  a.address__content
 
 meta "model_projection" function address__ref___projection
 
 meta "inline : no" function address__ref___projection
 
 val address__havoc #"system.ads" 108 0 0# 
   (x : address__ref) : unit
  writes {x}

end

(* Module for defining the constant "null_address" defined at system.ads:69, created in Gnat2Why.Decls.Translate_Constant *)
module System__null_address
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function null_address #"system.ads" 69 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module for defining the constant "left" defined at system.ads:77, created in Gnat2Why.Decls.Translate_Constant *)
module System__Olt__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function left #"system.ads" 77 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:77, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Olt__left__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:77, created in Gnat2Why.Decls.Translate_Constant *)
module System__Olt__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function right #"system.ads" 77 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:77, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Olt__right__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Olt" defined at system.ads:77, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Olt
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function olt #"system.ads" 77 0 0# 
   (left : BV32.t) (right : BV32.t) : bool

end

(* Module for defining the constant "left" defined at system.ads:78, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ole__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function left #"system.ads" 78 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:78, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ole__left__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:78, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ole__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function right #"system.ads" 78 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:78, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ole__right__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Ole" defined at system.ads:78, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Ole
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function ole #"system.ads" 78 0 0# 
   (left : BV32.t) (right : BV32.t) : bool

end

(* Module for defining the constant "left" defined at system.ads:79, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ogt__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function left #"system.ads" 79 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:79, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ogt__left__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:79, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ogt__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function right #"system.ads" 79 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:79, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ogt__right__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Ogt" defined at system.ads:79, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Ogt
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function ogt #"system.ads" 79 0 0# 
   (left : BV32.t) (right : BV32.t) : bool

end

(* Module for defining the constant "left" defined at system.ads:80, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oge__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function left #"system.ads" 80 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:80, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oge__left__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:80, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oge__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function right #"system.ads" 80 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:80, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oge__right__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Oge" defined at system.ads:80, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Oge
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function oge #"system.ads" 80 0 0# 
   (left : BV32.t) (right : BV32.t) : bool

end

(* Module for defining the constant "left" defined at system.ads:81, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oeq__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function left #"system.ads" 81 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:81, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oeq__left__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:81, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oeq__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function right #"system.ads" 81 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:81, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oeq__right__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Oeq" defined at system.ads:81, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Oeq
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function oeq #"system.ads" 81 0 0# 
   (left : BV32.t) (right : BV32.t) : bool

end

(* Module for axiomatizing type "bit_order" defined at system.ads:91, created in Gnat2Why.Types.Translate_Type *)
module System__bit_order
 use import "_gnatprove_standard".Main
 use import "int".Int

 type bit_order #"system.ads" 91 0 0# 
 
 function first #"system.ads" 91 0 0# 
   : int =
  0
 
 function last #"system.ads" 91 0 0# 
   : int =
  1
 
 predicate in_range #"system.ads" 91 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = bit_order, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type bit_order__ref #"system.ads" 91 0 0# =
  { mutable bit_order__content "model_trace:" : bit_order }
 
 function bit_order__ref___projection #"system.ads" 91 0 0# 
   (a : bit_order__ref) : bit_order =
  a.bit_order__content
 
 meta "model_projection" function bit_order__ref___projection
 
 meta "inline : no" function bit_order__ref___projection
 
 val bit_order__havoc #"system.ads" 91 0 0# 
   (x : bit_order__ref) : unit
  writes {x}

end

(* Module for defining the constant "default_bit_order" defined at system.ads:92, created in Gnat2Why.Decls.Translate_Constant *)
module System__default_bit_order
 use import "_gnatprove_standard".Main

 function default_bit_order #"system.ads" 92 0 0# "model" "model_trace:7889" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 91 0 0# 
   : int

end

(* Module for defining the constant "max_priority" defined at system.ads:97, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_priority
 use import "_gnatprove_standard".Main

 function max_priority #"system.ads" 97 0 0# "model" "model_trace:7905" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module for defining the constant "max_interrupt_priority" defined at system.ads:98, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_interrupt_priority
 use import "_gnatprove_standard".Main

 function max_interrupt_priority #"system.ads" 98 0 0# "model" "model_trace:7915" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module for axiomatizing type "any_priority" defined at system.ads:100, created in Gnat2Why.Types.Translate_Type *)
module System__any_priority
 use import "_gnatprove_standard".Main
 use import "int".Int

 type any_priority #"system.ads" 100 0 0# 
 
 function first #"system.ads" 100 0 0# 
   : int =
  0
 
 function last #"system.ads" 100 0 0# 
   : int =
  31
 
 predicate in_range #"system.ads" 100 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = any_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type any_priority__ref #"system.ads" 100 0 0# =
  { mutable any_priority__content "model_trace:" : any_priority }
 
 function any_priority__ref___projection #"system.ads" 100 0 0# 
   (a : any_priority__ref) : any_priority =
  a.any_priority__content
 
 meta "model_projection" function any_priority__ref___projection
 
 meta "inline : no" function any_priority__ref___projection
 
 val any_priority__havoc #"system.ads" 100 0 0# 
   (x : any_priority__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "priority" defined at system.ads:101, created in Gnat2Why.Types.Translate_Type *)
module System__priority
 use import "_gnatprove_standard".Main
 use import "int".Int

 type priority #"system.ads" 101 0 0# 
 
 function first #"system.ads" 101 0 0# 
   : int =
  0
 
 function last #"system.ads" 101 0 0# 
   : int =
  30
 
 predicate in_range #"system.ads" 101 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type priority__ref #"system.ads" 101 0 0# =
  { mutable priority__content "model_trace:" : priority }
 
 function priority__ref___projection #"system.ads" 101 0 0# 
   (a : priority__ref) : priority =
  a.priority__content
 
 meta "model_projection" function priority__ref___projection
 
 meta "inline : no" function priority__ref___projection
 
 val priority__havoc #"system.ads" 101 0 0# 
   (x : priority__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "interrupt_priority" defined at system.ads:102, created in Gnat2Why.Types.Translate_Type *)
module System__interrupt_priority
 use import "_gnatprove_standard".Main
 use import "int".Int

 type interrupt_priority #"system.ads" 102 0 0# 
 
 function first #"system.ads" 102 0 0# 
   : int =
  31
 
 function last #"system.ads" 102 0 0# 
   : int =
  31
 
 predicate in_range #"system.ads" 102 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = interrupt_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type interrupt_priority__ref #"system.ads" 102 0 0# =
  { mutable interrupt_priority__content "model_trace:" : interrupt_priority }
 
 function interrupt_priority__ref___projection #"system.ads" 102 0 0# 
   (a : interrupt_priority__ref) : interrupt_priority =
  a.interrupt_priority__content
 
 meta "model_projection" function interrupt_priority__ref___projection
 
 meta "inline : no" function interrupt_priority__ref___projection
 
 val interrupt_priority__havoc #"system.ads" 102 0 0# 
   (x : interrupt_priority__ref) : unit
  writes {x}

end

(* Module for defining the constant "default_priority" defined at system.ads:104, created in Gnat2Why.Decls.Translate_Constant *)
module System__default_priority
 use import "_gnatprove_standard".Main

 function default_priority #"system.ads" 104 0 0# "model" "model_trace:7967" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 101 0 0# 
   : int

end

(* Module for defining the constant "backend_divide_checks" defined at system.ads:121, created in Gnat2Why.Decls.Translate_Constant *)
module System__backend_divide_checks
 use import "_gnatprove_standard".Main

 function backend_divide_checks #"system.ads" 121 0 0# "model" "model_trace:7997" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 121 0 0# 
   : int

end

(* Module for defining the constant "backend_overflow_checks" defined at system.ads:122, created in Gnat2Why.Decls.Translate_Constant *)
module System__backend_overflow_checks
 use import "_gnatprove_standard".Main

 function backend_overflow_checks #"system.ads" 122 0 0# "model" "model_trace:8007" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 122 0 0# 
   : int

end

(* Module for defining the constant "command_line_args" defined at system.ads:123, created in Gnat2Why.Decls.Translate_Constant *)
module System__command_line_args
 use import "_gnatprove_standard".Main

 function command_line_args #"system.ads" 123 0 0# "model" "model_trace:8017" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 123 0 0# 
   : int

end

(* Module for defining the constant "configurable_run_time" defined at system.ads:124, created in Gnat2Why.Decls.Translate_Constant *)
module System__configurable_run_time
 use import "_gnatprove_standard".Main

 function configurable_run_time #"system.ads" 124 0 0# "model" "model_trace:8027" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 124 0 0# 
   : int

end

(* Module for defining the constant "denorm" defined at system.ads:125, created in Gnat2Why.Decls.Translate_Constant *)
module System__denorm
 use import "_gnatprove_standard".Main

 function denorm #"system.ads" 125 0 0# "model" "model_trace:8037" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 125 0 0# 
   : int

end

(* Module for defining the constant "duration_32_bits" defined at system.ads:126, created in Gnat2Why.Decls.Translate_Constant *)
module System__duration_32_bits
 use import "_gnatprove_standard".Main

 function duration_32_bits #"system.ads" 126 0 0# "model" "model_trace:8047" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 126 0 0# 
   : int

end

(* Module for defining the constant "exit_status_supported" defined at system.ads:127, created in Gnat2Why.Decls.Translate_Constant *)
module System__exit_status_supported
 use import "_gnatprove_standard".Main

 function exit_status_supported #"system.ads" 127 0 0# "model" "model_trace:8057" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 127 0 0# 
   : int

end

(* Module for defining the constant "fractional_fixed_ops" defined at system.ads:128, created in Gnat2Why.Decls.Translate_Constant *)
module System__fractional_fixed_ops
 use import "_gnatprove_standard".Main

 function fractional_fixed_ops #"system.ads" 128 0 0# "model" "model_trace:8067" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 128 0 0# 
   : int

end

(* Module for defining the constant "frontend_layout" defined at system.ads:129, created in Gnat2Why.Decls.Translate_Constant *)
module System__frontend_layout
 use import "_gnatprove_standard".Main

 function frontend_layout #"system.ads" 129 0 0# "model" "model_trace:8077" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 129 0 0# 
   : int

end

(* Module for defining the constant "machine_overflows" defined at system.ads:130, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_overflows
 use import "_gnatprove_standard".Main

 function machine_overflows #"system.ads" 130 0 0# "model" "model_trace:8087" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 130 0 0# 
   : int

end

(* Module for defining the constant "machine_rounds" defined at system.ads:131, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_rounds
 use import "_gnatprove_standard".Main

 function machine_rounds #"system.ads" 131 0 0# "model" "model_trace:8097" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 131 0 0# 
   : int

end

(* Module for defining the constant "preallocated_stacks" defined at system.ads:132, created in Gnat2Why.Decls.Translate_Constant *)
module System__preallocated_stacks
 use import "_gnatprove_standard".Main

 function preallocated_stacks #"system.ads" 132 0 0# "model" "model_trace:8107" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 132 0 0# 
   : int

end

(* Module for defining the constant "signed_zeros" defined at system.ads:133, created in Gnat2Why.Decls.Translate_Constant *)
module System__signed_zeros
 use import "_gnatprove_standard".Main

 function signed_zeros #"system.ads" 133 0 0# "model" "model_trace:8117" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 133 0 0# 
   : int

end

(* Module for defining the constant "stack_check_default" defined at system.ads:134, created in Gnat2Why.Decls.Translate_Constant *)
module System__stack_check_default
 use import "_gnatprove_standard".Main

 function stack_check_default #"system.ads" 134 0 0# "model" "model_trace:8127" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 134 0 0# 
   : int

end

(* Module for defining the constant "stack_check_probes" defined at system.ads:135, created in Gnat2Why.Decls.Translate_Constant *)
module System__stack_check_probes
 use import "_gnatprove_standard".Main

 function stack_check_probes #"system.ads" 135 0 0# "model" "model_trace:8137" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 135 0 0# 
   : int

end

(* Module for defining the constant "stack_check_limits" defined at system.ads:136, created in Gnat2Why.Decls.Translate_Constant *)
module System__stack_check_limits
 use import "_gnatprove_standard".Main

 function stack_check_limits #"system.ads" 136 0 0# "model" "model_trace:8147" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 136 0 0# 
   : int

end

(* Module for defining the constant "support_aggregates" defined at system.ads:137, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_aggregates
 use import "_gnatprove_standard".Main

 function support_aggregates #"system.ads" 137 0 0# "model" "model_trace:8157" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 137 0 0# 
   : int

end

(* Module for defining the constant "support_atomic_primitives" defined at system.ads:138, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_atomic_primitives
 use import "_gnatprove_standard".Main

 function support_atomic_primitives #"system.ads" 138 0 0# "model" "model_trace:8167" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 138 0 0# 
   : int

end

(* Module for defining the constant "support_composite_assign" defined at system.ads:139, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_composite_assign
 use import "_gnatprove_standard".Main

 function support_composite_assign #"system.ads" 139 0 0# "model" "model_trace:8177" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 139 0 0# 
   : int

end

(* Module for defining the constant "support_composite_compare" defined at system.ads:140, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_composite_compare
 use import "_gnatprove_standard".Main

 function support_composite_compare #"system.ads" 140 0 0# "model" "model_trace:8187" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 140 0 0# 
   : int

end

(* Module for defining the constant "support_long_shifts" defined at system.ads:141, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_long_shifts
 use import "_gnatprove_standard".Main

 function support_long_shifts #"system.ads" 141 0 0# "model" "model_trace:8197" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 141 0 0# 
   : int

end

(* Module for defining the constant "always_compatible_rep" defined at system.ads:142, created in Gnat2Why.Decls.Translate_Constant *)
module System__always_compatible_rep
 use import "_gnatprove_standard".Main

 function always_compatible_rep #"system.ads" 142 0 0# "model" "model_trace:8207" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 142 0 0# 
   : int

end

(* Module for defining the constant "suppress_standard_library" defined at system.ads:143, created in Gnat2Why.Decls.Translate_Constant *)
module System__suppress_standard_library
 use import "_gnatprove_standard".Main

 function suppress_standard_library #"system.ads" 143 0 0# "model" "model_trace:8217" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 143 0 0# 
   : int

end

(* Module for defining the constant "use_ada_main_program_name" defined at system.ads:144, created in Gnat2Why.Decls.Translate_Constant *)
module System__use_ada_main_program_name
 use import "_gnatprove_standard".Main

 function use_ada_main_program_name #"system.ads" 144 0 0# "model" "model_trace:8227" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 144 0 0# 
   : int

end

(* Module for defining the constant "frontend_exceptions" defined at system.ads:145, created in Gnat2Why.Decls.Translate_Constant *)
module System__frontend_exceptions
 use import "_gnatprove_standard".Main

 function frontend_exceptions #"system.ads" 145 0 0# "model" "model_trace:8237" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 145 0 0# 
   : int

end

(* Module for defining the constant "zcx_by_default" defined at system.ads:146, created in Gnat2Why.Decls.Translate_Constant *)
module System__zcx_by_default
 use import "_gnatprove_standard".Main

 function zcx_by_default #"system.ads" 146 0 0# "model" "model_trace:8247" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 146 0 0# 
   : int

end

(* Module for axiomatizing the array theory associated to type "Tpriorities_mappingB" defined at system.ads:161, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 function index_I1_one #"system.ads" 146 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 146 0 0# =
  Standard__integer.integer
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__integer.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "Tpriorities_mappingB" defined at system.ads:161, created in Gnat2Why.Types.Translate_Type *)
module System__Tpriorities_mappingB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        System__any_priority
 use        Array__Int__Standard__integer

 type component_type #"system.ads" 1 0 0# =
  Standard__integer.integer
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = System__any_priority.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tpriorities_mappingB #"system.ads" 161 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tpriorities_mappingB__ref #"system.ads" 161 0 0# =
  { mutable tpriorities_mappingB__content "model_trace:" : tpriorities_mappingB }
 
 function tpriorities_mappingB__ref___projection #"system.ads" 161 0 0# 
   (a : tpriorities_mappingB__ref) : tpriorities_mappingB =
  a.tpriorities_mappingB__content
 
 meta "model_projection" function tpriorities_mappingB__ref___projection
 
 meta "inline : no" function tpriorities_mappingB__ref___projection
 
 val tpriorities_mappingB__havoc #"system.ads" 161 0 0# 
   (x : tpriorities_mappingB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "priorities_mapping" defined at system.ads:161, created in Gnat2Why.Types.Translate_Type *)
module System__priorities_mapping
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Array__Int__Standard__integer

 type component_type #"system.ads" 161 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  31
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T3s" defined at system.ads:166, created in Gnat2Why.Types.Translate_Type *)
module System__T3s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t3s #"system.ads" 166 0 0# 
 
 function first #"system.ads" 166 0 0# 
   : int =
  0
 
 function last #"system.ads" 166 0 0# 
   : int =
  31
 
 predicate in_range #"system.ads" 166 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t3s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type t3s__ref #"system.ads" 166 0 0# =
  { mutable t3s__content "model_trace:" : t3s }
 
 function t3s__ref___projection #"system.ads" 166 0 0# 
   (a : t3s__ref) : t3s =
  a.t3s__content
 
 meta "model_projection" function t3s__ref___projection
 
 meta "inline : no" function t3s__ref___projection
 
 val t3s__havoc #"system.ads" 166 0 0# 
   (x : t3s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T4s" defined at system.ads:166, created in Gnat2Why.Types.Translate_Type *)
module System__T4s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Array__Int__Standard__integer

 type component_type #"system.ads" 166 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  31
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "underlying_priorities" defined at system.ads:165, created in Gnat2Why.Decls.Translate_Constant *)
module System__underlying_priorities
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__integer

 function underlying_priorities #"system.ads" 165 0 0# "model_projected" "model_trace:8273" 
   : Array__Int__Standard__integer.map
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 161 0 0# 
   : int

end

(* Module for axiomatizing type "Ttask_storage_sizeB" defined at s-parame.ads:58, created in Gnat2Why.Types.Translate_Type *)
module System__parameters__Ttask_storage_sizeB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type ttask_storage_sizeB #"s-parame.ads" 58 0 0# 
 
 function first #"s-parame.ads" 58 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"s-parame.ads" 58 0 0# 
   : int =
  2147483647
 
 predicate in_range #"s-parame.ads" 58 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = ttask_storage_sizeB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type ttask_storage_sizeB__ref #"s-parame.ads" 58 0 0# =
  { mutable ttask_storage_sizeB__content "model_trace:" : ttask_storage_sizeB }
 
 function ttask_storage_sizeB__ref___projection #"s-parame.ads" 58 0 0# 
   (a : ttask_storage_sizeB__ref) : ttask_storage_sizeB =
  a.ttask_storage_sizeB__content
 
 meta "model_projection" function ttask_storage_sizeB__ref___projection
 
 meta "inline : no" function ttask_storage_sizeB__ref___projection
 
 val ttask_storage_sizeB__havoc #"s-parame.ads" 58 0 0# 
   (x : ttask_storage_sizeB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "task_storage_size" defined at s-parame.ads:58, created in Gnat2Why.Types.Translate_Type *)
module System__parameters__task_storage_size
 use import "_gnatprove_standard".Main
 use import "int".Int

 type task_storage_size #"s-parame.ads" 58 0 0# 
 
 function first #"s-parame.ads" 58 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"s-parame.ads" 58 0 0# 
   : int =
  2147483647
 
 predicate in_range #"s-parame.ads" 58 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = task_storage_size, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type task_storage_size__ref #"s-parame.ads" 58 0 0# =
  { mutable task_storage_size__content "model_trace:" : task_storage_size }
 
 function task_storage_size__ref___projection #"s-parame.ads" 58 0 0# 
   (a : task_storage_size__ref) : task_storage_size =
  a.task_storage_size__content
 
 meta "model_projection" function task_storage_size__ref___projection
 
 meta "inline : no" function task_storage_size__ref___projection
 
 val task_storage_size__havoc #"s-parame.ads" 58 0 0# 
   (x : task_storage_size__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Tsize_typeB" defined at s-parame.ads:61, created in Gnat2Why.Types.Translate_Type *)
module System__parameters__Tsize_typeB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tsize_typeB #"s-parame.ads" 61 0 0# 
 
 function first #"s-parame.ads" 61 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"s-parame.ads" 61 0 0# 
   : int =
  2147483647
 
 predicate in_range #"s-parame.ads" 61 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tsize_typeB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type tsize_typeB__ref #"s-parame.ads" 61 0 0# =
  { mutable tsize_typeB__content "model_trace:" : tsize_typeB }
 
 function tsize_typeB__ref___projection #"s-parame.ads" 61 0 0# 
   (a : tsize_typeB__ref) : tsize_typeB =
  a.tsize_typeB__content
 
 meta "model_projection" function tsize_typeB__ref___projection
 
 meta "inline : no" function tsize_typeB__ref___projection
 
 val tsize_typeB__havoc #"s-parame.ads" 61 0 0# 
   (x : tsize_typeB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "size_type" defined at s-parame.ads:61, created in Gnat2Why.Types.Translate_Type *)
module System__parameters__size_type
 use import "_gnatprove_standard".Main
 use import "int".Int

 type size_type #"s-parame.ads" 61 0 0# 
 
 function first #"s-parame.ads" 61 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"s-parame.ads" 61 0 0# 
   : int =
  2147483647
 
 predicate in_range #"s-parame.ads" 61 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = size_type, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type size_type__ref #"s-parame.ads" 61 0 0# =
  { mutable size_type__content "model_trace:" : size_type }
 
 function size_type__ref___projection #"s-parame.ads" 61 0 0# 
   (a : size_type__ref) : size_type =
  a.size_type__content
 
 meta "model_projection" function size_type__ref___projection
 
 meta "inline : no" function size_type__ref___projection
 
 val size_type__havoc #"s-parame.ads" 61 0 0# 
   (x : size_type__ref) : unit
  writes {x}

end

(* Module for defining the constant "unspecified_size" defined at s-parame.ads:64, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__unspecified_size
 use import "_gnatprove_standard".Main

 function unspecified_size #"s-parame.ads" 64 0 0# "model" "model_trace:12984" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-parame.ads" 61 0 0# 
   : int

end

(* Module for axiomatizing type "percentage" defined at s-parame.ads:67, created in Gnat2Why.Types.Translate_Type *)
module System__parameters__percentage
 use import "_gnatprove_standard".Main
 use import "int".Int

 type percentage #"s-parame.ads" 67 0 0# 
 
 function first #"s-parame.ads" 67 0 0# 
   : int =
  ( -1 )
 
 function last #"s-parame.ads" 67 0 0# 
   : int =
  100
 
 predicate in_range #"s-parame.ads" 67 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = percentage, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type percentage__ref #"s-parame.ads" 67 0 0# =
  { mutable percentage__content "model_trace:" : percentage }
 
 function percentage__ref___projection #"s-parame.ads" 67 0 0# 
   (a : percentage__ref) : percentage =
  a.percentage__content
 
 meta "model_projection" function percentage__ref___projection
 
 meta "inline : no" function percentage__ref___projection
 
 val percentage__havoc #"s-parame.ads" 67 0 0# 
   (x : percentage__ref) : unit
  writes {x}

end

(* Module for defining the constant "dynamic" defined at s-parame.ads:68, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__dynamic
 use import "_gnatprove_standard".Main

 function dynamic #"s-parame.ads" 68 0 0# "model" "model_trace:13011" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-parame.ads" 61 0 0# 
   : int

end

(* Module for defining the constant "sec_stack_percentage" defined at s-parame.ads:75, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__sec_stack_percentage
 use import "_gnatprove_standard".Main

 function sec_stack_percentage #"s-parame.ads" 75 0 0# "model" "model_trace:13022" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-parame.ads" 67 0 0# 
   : int

end

(* Module for defining the constant "sec_stack_dynamic" defined at s-parame.ads:78, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__sec_stack_dynamic
 use import "_gnatprove_standard".Main

 function sec_stack_dynamic #"s-parame.ads" 78 0 0# "model" "model_trace:13032" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"s-parame.ads" 78 0 0# 
   : int

end

(* Module for possibly declaring a logic function for "default_stack_size" defined at s-parame.ads:81, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__parameters__default_stack_size
 use import "_gnatprove_standard".Main

 function default_stack_size #"s-parame.ads" 81 0 0# 
   (__void_param : unit) : int

end

(* Module for possibly declaring a logic function for "minimum_stack_size" defined at s-parame.ads:84, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__parameters__minimum_stack_size
 use import "_gnatprove_standard".Main

 function minimum_stack_size #"s-parame.ads" 84 0 0# 
   (__void_param : unit) : int

end

(* Module for defining the constant "size" defined at s-parame.ads:87, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__adjust_storage_size__size
 use import "_gnatprove_standard".Main

 function size #"s-parame.ads" 87 0 0# "model" "model_trace:13071" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-parame.ads" 61 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "size" defined at s-parame.ads:87, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__parameters__adjust_storage_size__size__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "adjust_storage_size" defined at s-parame.ads:87, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__parameters__adjust_storage_size
 use import "_gnatprove_standard".Main

 function adjust_storage_size #"s-parame.ads" 87 0 0# 
   (size : int) : int

end

(* Module for defining the constant "default_env_stack_size" defined at s-parame.ads:96, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__default_env_stack_size
 use import "_gnatprove_standard".Main

 function default_env_stack_size #"s-parame.ads" 96 0 0# "model" "model_trace:13085" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-parame.ads" 61 0 0# 
   : int

end

(* Module for defining the constant "stack_grows_down" defined at s-parame.ads:101, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__stack_grows_down
 use import "_gnatprove_standard".Main

 function stack_grows_down #"s-parame.ads" 101 0 0# "model" "model_trace:13095" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"s-parame.ads" 101 0 0# 
   : int

end

(* Module for axiomatizing type "c_address" defined at s-parame.ads:116, created in Gnat2Why.Types.Translate_Type *)
module System__parameters__c_address
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32

 type c_address #"s-parame.ads" 116 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"s-parame.ads" 116 0 0# 
   : BV32.t =
  ( BV32.of_int 0 )
 
 function first #"s-parame.ads" 116 0 0# 
   : BV32.t =
  ( BV32.of_int 0 )
 
 function last #"s-parame.ads" 116 0 0# 
   : BV32.t =
  ( BV32.of_int 4294967295 )
 
 function first_int #"s-parame.ads" 116 0 0# 
   : int =
  0
 
 function last_int #"s-parame.ads" 116 0 0# 
   : int =
  4294967295
 
 predicate in_range #"s-parame.ads" 116 0 0# 
   (x : BV32.t)  =
  ( (BV32.ule first x) /\ (BV32.ule x last) )
 
 predicate in_range_int #"s-parame.ads" 116 0 0# 
   (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Static_Modular_lt32 with
 type t = c_address, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function attr__ATTRIBUTE_MODULUS = attr__ATTRIBUTE_MODULUS, 
 predicate in_range_int = in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type c_address__ref #"s-parame.ads" 116 0 0# =
  { mutable c_address__content "model_trace:" : c_address }
 
 function c_address__ref___projection #"s-parame.ads" 116 0 0# 
   (a : c_address__ref) : c_address =
  a.c_address__content
 
 meta "model_projection" function c_address__ref___projection
 
 meta "inline : no" function c_address__ref___projection
 
 val c_address__havoc #"s-parame.ads" 116 0 0# 
   (x : c_address__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T1s" defined at s-parame.ads:119, created in Gnat2Why.Types.Translate_Type *)
module System__parameters__T1s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"s-parame.ads" 116 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  13
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "c_malloc_linkname" defined at s-parame.ads:119, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__c_malloc_linkname
 use import "_gnatprove_standard".Main
 use        Standard__string

 function c_malloc_linkname #"s-parame.ads" 119 0 0# "model_projected" "model_trace:13138" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module for defining the constant "garbage_collected" defined at s-parame.ads:142, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__garbage_collected
 use import "_gnatprove_standard".Main

 function garbage_collected #"s-parame.ads" 142 0 0# "model" "model_trace:13148" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"s-parame.ads" 142 0 0# 
   : int

end

(* Module for defining the constant "single_lock" defined at s-parame.ads:157, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__single_lock
 use import "_gnatprove_standard".Main

 function single_lock #"s-parame.ads" 157 0 0# "model" "model_trace:13158" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"s-parame.ads" 157 0 0# 
   : int

end

(* Module for defining the constant "no_abort" defined at s-parame.ads:170, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__no_abort
 use import "_gnatprove_standard".Main

 function no_abort #"s-parame.ads" 170 0 0# "model" "model_trace:13168" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"s-parame.ads" 170 0 0# 
   : int

end

(* Module for defining the constant "runtime_traces" defined at s-parame.ads:190, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__runtime_traces
 use import "_gnatprove_standard".Main

 function runtime_traces #"s-parame.ads" 190 0 0# "model" "model_trace:13187" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"s-parame.ads" 190 0 0# 
   : int

end

(* Module for axiomatizing type "chars" defined at s-crtl.ads:41, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__chars
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32

 type chars #"s-crtl.ads" 41 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"s-crtl.ads" 41 0 0# 
   : BV32.t =
  ( BV32.of_int 0 )
 
 function first #"s-crtl.ads" 41 0 0# 
   : BV32.t =
  ( BV32.of_int 0 )
 
 function last #"s-crtl.ads" 41 0 0# 
   : BV32.t =
  ( BV32.of_int 4294967295 )
 
 function first_int #"s-crtl.ads" 41 0 0# 
   : int =
  0
 
 function last_int #"s-crtl.ads" 41 0 0# 
   : int =
  4294967295
 
 predicate in_range #"s-crtl.ads" 41 0 0# 
   (x : BV32.t)  =
  ( (BV32.ule first x) /\ (BV32.ule x last) )
 
 predicate in_range_int #"s-crtl.ads" 41 0 0# 
   (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Static_Modular_lt32 with
 type t = chars, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function attr__ATTRIBUTE_MODULUS = attr__ATTRIBUTE_MODULUS, 
 predicate in_range_int = in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type chars__ref #"s-crtl.ads" 41 0 0# =
  { mutable chars__content "model_trace:" : chars }
 
 function chars__ref___projection #"s-crtl.ads" 41 0 0# 
   (a : chars__ref) : chars =
  a.chars__content
 
 meta "model_projection" function chars__ref___projection
 
 meta "inline : no" function chars__ref___projection
 
 val chars__havoc #"s-crtl.ads" 41 0 0# 
   (x : chars__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "dirs" defined at s-crtl.ads:47, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__dirs
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32

 type dirs #"s-crtl.ads" 47 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"s-crtl.ads" 47 0 0# 
   : BV32.t =
  ( BV32.of_int 0 )
 
 function first #"s-crtl.ads" 47 0 0# 
   : BV32.t =
  ( BV32.of_int 0 )
 
 function last #"s-crtl.ads" 47 0 0# 
   : BV32.t =
  ( BV32.of_int 4294967295 )
 
 function first_int #"s-crtl.ads" 47 0 0# 
   : int =
  0
 
 function last_int #"s-crtl.ads" 47 0 0# 
   : int =
  4294967295
 
 predicate in_range #"s-crtl.ads" 47 0 0# 
   (x : BV32.t)  =
  ( (BV32.ule first x) /\ (BV32.ule x last) )
 
 predicate in_range_int #"s-crtl.ads" 47 0 0# 
   (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Static_Modular_lt32 with
 type t = dirs, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function attr__ATTRIBUTE_MODULUS = attr__ATTRIBUTE_MODULUS, 
 predicate in_range_int = in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type dirs__ref #"s-crtl.ads" 47 0 0# =
  { mutable dirs__content "model_trace:" : dirs }
 
 function dirs__ref___projection #"s-crtl.ads" 47 0 0# 
   (a : dirs__ref) : dirs =
  a.dirs__content
 
 meta "model_projection" function dirs__ref___projection
 
 meta "inline : no" function dirs__ref___projection
 
 val dirs__havoc #"s-crtl.ads" 47 0 0# 
   (x : dirs__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "files" defined at s-crtl.ads:50, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__files
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32

 type files #"s-crtl.ads" 50 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"s-crtl.ads" 50 0 0# 
   : BV32.t =
  ( BV32.of_int 0 )
 
 function first #"s-crtl.ads" 50 0 0# 
   : BV32.t =
  ( BV32.of_int 0 )
 
 function last #"s-crtl.ads" 50 0 0# 
   : BV32.t =
  ( BV32.of_int 4294967295 )
 
 function first_int #"s-crtl.ads" 50 0 0# 
   : int =
  0
 
 function last_int #"s-crtl.ads" 50 0 0# 
   : int =
  4294967295
 
 predicate in_range #"s-crtl.ads" 50 0 0# 
   (x : BV32.t)  =
  ( (BV32.ule first x) /\ (BV32.ule x last) )
 
 predicate in_range_int #"s-crtl.ads" 50 0 0# 
   (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Static_Modular_lt32 with
 type t = files, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function attr__ATTRIBUTE_MODULUS = attr__ATTRIBUTE_MODULUS, 
 predicate in_range_int = in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type files__ref #"s-crtl.ads" 50 0 0# =
  { mutable files__content "model_trace:" : files }
 
 function files__ref___projection #"s-crtl.ads" 50 0 0# 
   (a : files__ref) : files =
  a.files__content
 
 meta "model_projection" function files__ref___projection
 
 meta "inline : no" function files__ref___projection
 
 val files__havoc #"s-crtl.ads" 50 0 0# 
   (x : files__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "int" defined at s-crtl.ads:53, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__int
 use import "_gnatprove_standard".Main
 use import "int".Int

 type int__ #"s-crtl.ads" 53 0 0# 
 
 function first #"s-crtl.ads" 53 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"s-crtl.ads" 53 0 0# 
   : int =
  2147483647
 
 predicate in_range #"s-crtl.ads" 53 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = int__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type int____ref #"s-crtl.ads" 53 0 0# =
  { mutable int____content "model_trace:" : int__ }
 
 function int____ref___projection #"s-crtl.ads" 53 0 0# 
   (a : int____ref) : int__ =
  a.int____content
 
 meta "model_projection" function int____ref___projection
 
 meta "inline : no" function int____ref___projection
 
 val int____havoc #"s-crtl.ads" 53 0 0# 
   (x : int____ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TlongB" defined at s-crtl.ads:55, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__TlongB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tlongB #"s-crtl.ads" 55 0 0# 
 
 function first #"s-crtl.ads" 55 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"s-crtl.ads" 55 0 0# 
   : int =
  2147483647
 
 predicate in_range #"s-crtl.ads" 55 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tlongB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type tlongB__ref #"s-crtl.ads" 55 0 0# =
  { mutable tlongB__content "model_trace:" : tlongB }
 
 function tlongB__ref___projection #"s-crtl.ads" 55 0 0# 
   (a : tlongB__ref) : tlongB =
  a.tlongB__content
 
 meta "model_projection" function tlongB__ref___projection
 
 meta "inline : no" function tlongB__ref___projection
 
 val tlongB__havoc #"s-crtl.ads" 55 0 0# 
   (x : tlongB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "long" defined at s-crtl.ads:55, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__long
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long #"s-crtl.ads" 55 0 0# 
 
 function first #"s-crtl.ads" 55 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"s-crtl.ads" 55 0 0# 
   : int =
  2147483647
 
 predicate in_range #"s-crtl.ads" 55 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type long__ref #"s-crtl.ads" 55 0 0# =
  { mutable long__content "model_trace:" : long }
 
 function long__ref___projection #"s-crtl.ads" 55 0 0# 
   (a : long__ref) : long =
  a.long__content
 
 meta "model_projection" function long__ref___projection
 
 meta "inline : no" function long__ref___projection
 
 val long__havoc #"s-crtl.ads" 55 0 0# 
   (x : long__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "off_t" defined at s-crtl.ads:58, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__off_t
 use import "_gnatprove_standard".Main
 use import "int".Int

 type off_t #"s-crtl.ads" 58 0 0# 
 
 function first #"s-crtl.ads" 58 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"s-crtl.ads" 58 0 0# 
   : int =
  2147483647
 
 predicate in_range #"s-crtl.ads" 58 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = off_t, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type off_t__ref #"s-crtl.ads" 58 0 0# =
  { mutable off_t__content "model_trace:" : off_t }
 
 function off_t__ref___projection #"s-crtl.ads" 58 0 0# 
   (a : off_t__ref) : off_t =
  a.off_t__content
 
 meta "model_projection" function off_t__ref___projection
 
 meta "inline : no" function off_t__ref___projection
 
 val off_t__havoc #"s-crtl.ads" 58 0 0# 
   (x : off_t__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "size_t" defined at s-crtl.ads:60, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__size_t
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32

 type size_t #"s-crtl.ads" 60 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"s-crtl.ads" 60 0 0# 
   : BV32.t
 
 function first #"s-crtl.ads" 60 0 0# 
   : BV32.t =
  ( BV32.of_int 0 )
 
 function last #"s-crtl.ads" 60 0 0# 
   : BV32.t =
  ( BV32.of_int 4294967295 )
 
 function first_int #"s-crtl.ads" 60 0 0# 
   : int =
  0
 
 function last_int #"s-crtl.ads" 60 0 0# 
   : int =
  4294967295
 
 predicate in_range #"s-crtl.ads" 60 0 0# 
   (x : BV32.t)  =
  true
 
 predicate in_range_int #"s-crtl.ads" 60 0 0# 
   (x : int)  =
  BV32.uint_in_range x
 
 clone export "ada__model".Static_Modular_32 with
 type t = size_t, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type size_t__ref #"s-crtl.ads" 60 0 0# =
  { mutable size_t__content "model_trace:" : size_t }
 
 function size_t__ref___projection #"s-crtl.ads" 60 0 0# 
   (a : size_t__ref) : size_t =
  a.size_t__content
 
 meta "model_projection" function size_t__ref___projection
 
 meta "inline : no" function size_t__ref___projection
 
 val size_t__havoc #"s-crtl.ads" 60 0 0# 
   (x : size_t__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Tssize_tB" defined at s-crtl.ads:62, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__Tssize_tB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tssize_tB #"s-crtl.ads" 62 0 0# 
 
 function first #"s-crtl.ads" 62 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"s-crtl.ads" 62 0 0# 
   : int =
  2147483647
 
 predicate in_range #"s-crtl.ads" 62 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tssize_tB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type tssize_tB__ref #"s-crtl.ads" 62 0 0# =
  { mutable tssize_tB__content "model_trace:" : tssize_tB }
 
 function tssize_tB__ref___projection #"s-crtl.ads" 62 0 0# 
   (a : tssize_tB__ref) : tssize_tB =
  a.tssize_tB__content
 
 meta "model_projection" function tssize_tB__ref___projection
 
 meta "inline : no" function tssize_tB__ref___projection
 
 val tssize_tB__havoc #"s-crtl.ads" 62 0 0# 
   (x : tssize_tB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "ssize_t" defined at s-crtl.ads:62, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__ssize_t
 use import "_gnatprove_standard".Main
 use import "int".Int

 type ssize_t #"s-crtl.ads" 62 0 0# 
 
 function first #"s-crtl.ads" 62 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"s-crtl.ads" 62 0 0# 
   : int =
  2147483647
 
 predicate in_range #"s-crtl.ads" 62 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = ssize_t, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type ssize_t__ref #"s-crtl.ads" 62 0 0# =
  { mutable ssize_t__content "model_trace:" : ssize_t }
 
 function ssize_t__ref___projection #"s-crtl.ads" 62 0 0# 
   (a : ssize_t__ref) : ssize_t =
  a.ssize_t__content
 
 meta "model_projection" function ssize_t__ref___projection
 
 meta "inline : no" function ssize_t__ref___projection
 
 val ssize_t__havoc #"s-crtl.ads" 62 0 0# 
   (x : ssize_t__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Tint64B" defined at s-crtl.ads:65, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__Tint64B
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tint64B #"s-crtl.ads" 65 0 0# 
 
 function first #"s-crtl.ads" 65 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"s-crtl.ads" 65 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"s-crtl.ads" 65 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tint64B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type tint64B__ref #"s-crtl.ads" 65 0 0# =
  { mutable tint64B__content "model_trace:" : tint64B }
 
 function tint64B__ref___projection #"s-crtl.ads" 65 0 0# 
   (a : tint64B__ref) : tint64B =
  a.tint64B__content
 
 meta "model_projection" function tint64B__ref___projection
 
 meta "inline : no" function tint64B__ref___projection
 
 val tint64B__havoc #"s-crtl.ads" 65 0 0# 
   (x : tint64B__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "int64" defined at s-crtl.ads:65, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__int64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type int64 #"s-crtl.ads" 65 0 0# 
 
 function first #"s-crtl.ads" 65 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"s-crtl.ads" 65 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"s-crtl.ads" 65 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = int64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type int64__ref #"s-crtl.ads" 65 0 0# =
  { mutable int64__content "model_trace:" : int64 }
 
 function int64__ref___projection #"s-crtl.ads" 65 0 0# 
   (a : int64__ref) : int64 =
  a.int64__content
 
 meta "model_projection" function int64__ref___projection
 
 meta "inline : no" function int64__ref___projection
 
 val int64__havoc #"s-crtl.ads" 65 0 0# 
   (x : int64__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "filename_encoding" defined at s-crtl.ads:72, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__filename_encoding
 use import "_gnatprove_standard".Main
 use import "int".Int

 type filename_encoding #"s-crtl.ads" 72 0 0# 
 
 function first #"s-crtl.ads" 72 0 0# 
   : int =
  0
 
 function last #"s-crtl.ads" 72 0 0# 
   : int =
  2
 
 predicate in_range #"s-crtl.ads" 72 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = filename_encoding, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type filename_encoding__ref #"s-crtl.ads" 72 0 0# =
  { mutable filename_encoding__content "model_trace:" : filename_encoding }
 
 function filename_encoding__ref___projection #"s-crtl.ads" 72 0 0# 
   (a : filename_encoding__ref) : filename_encoding =
  a.filename_encoding__content
 
 meta "model_projection" function filename_encoding__ref___projection
 
 meta "inline : no" function filename_encoding__ref___projection
 
 val filename_encoding__havoc #"s-crtl.ads" 72 0 0# 
   (x : filename_encoding__ref) : unit
  writes {x}

end

(* Module for defining the constant "a" defined at s-crtl.ads:85, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__strlen__a
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function a #"s-crtl.ads" 85 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "a" defined at s-crtl.ads:85, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__strlen__a__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "strlen" defined at s-crtl.ads:85, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__strlen
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function strlen #"s-crtl.ads" 85 0 0# 
   (a : BV32.t) : BV32.t

end

(* Module for defining the constant "dest" defined at s-crtl.ads:88, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__strncpy__dest
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function dest #"s-crtl.ads" 88 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "dest" defined at s-crtl.ads:88, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__strncpy__dest__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "src" defined at s-crtl.ads:88, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__strncpy__src
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function src #"s-crtl.ads" 88 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "src" defined at s-crtl.ads:88, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__strncpy__src__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "n" defined at s-crtl.ads:88, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__strncpy__n
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function n #"s-crtl.ads" 88 0 0# "model" "model_trace:11467" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 60 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at s-crtl.ads:88, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__strncpy__n__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "a" defined at s-crtl.ads:95, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__atoi__a
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function a #"s-crtl.ads" 95 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "a" defined at s-crtl.ads:95, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__atoi__a__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "atoi" defined at s-crtl.ads:95, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__atoi
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function atoi #"s-crtl.ads" 95 0 0# 
   (a : BV32.t) : int

end

(* Module for defining the constant "stream" defined at s-crtl.ads:98, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__clearerr__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function stream #"s-crtl.ads" 98 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:98, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__clearerr__stream__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "handle" defined at s-crtl.ads:101, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__dup__handle
 use import "_gnatprove_standard".Main

 function handle #"s-crtl.ads" 101 0 0# "model" "model_trace:11548" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "handle" defined at s-crtl.ads:101, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__dup__handle__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "dup" defined at s-crtl.ads:101, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__dup
 use import "_gnatprove_standard".Main

 function dup #"s-crtl.ads" 101 0 0# 
   (handle : int) : int

end

(* Module for defining the constant "from" defined at s-crtl.ads:104, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__dup2__from
 use import "_gnatprove_standard".Main

 function from #"s-crtl.ads" 104 0 0# "model" "model_trace:11575" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "from" defined at s-crtl.ads:104, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__dup2__from__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "to" defined at s-crtl.ads:104, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__dup2__to
 use import "_gnatprove_standard".Main

 function to__ #"s-crtl.ads" 104 0 0# "model" "model_trace:11582" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "to" defined at s-crtl.ads:104, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__dup2__to__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "dup2" defined at s-crtl.ads:104, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__dup2
 use import "_gnatprove_standard".Main

 function dup2 #"s-crtl.ads" 104 0 0# 
   (from : int) (to__ : int) : int

end

(* Module for defining the constant "stream" defined at s-crtl.ads:107, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fclose__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function stream #"s-crtl.ads" 107 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:107, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fclose__stream__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fclose" defined at s-crtl.ads:107, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__fclose
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function fclose #"s-crtl.ads" 107 0 0# 
   (stream : BV32.t) : int

end

(* Module for defining the constant "handle" defined at s-crtl.ads:110, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fdopen__handle
 use import "_gnatprove_standard".Main

 function handle #"s-crtl.ads" 110 0 0# "model" "model_trace:11637" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "handle" defined at s-crtl.ads:110, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fdopen__handle__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "mode" defined at s-crtl.ads:110, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fdopen__mode
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function mode #"s-crtl.ads" 110 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "mode" defined at s-crtl.ads:110, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fdopen__mode__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fdopen" defined at s-crtl.ads:110, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__fdopen
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function fdopen #"s-crtl.ads" 110 0 0# 
   (handle : int) (mode : BV32.t) : BV32.t

end

(* Module for defining the constant "stream" defined at s-crtl.ads:113, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fflush__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function stream #"s-crtl.ads" 113 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:113, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fflush__stream__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fflush" defined at s-crtl.ads:113, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__fflush
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function fflush #"s-crtl.ads" 113 0 0# 
   (stream : BV32.t) : int

end

(* Module for defining the constant "stream" defined at s-crtl.ads:116, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fgetc__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function stream #"s-crtl.ads" 116 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:116, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fgetc__stream__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fgetc" defined at s-crtl.ads:116, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__fgetc
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function fgetc #"s-crtl.ads" 116 0 0# 
   (stream : BV32.t) : int

end

(* Module for defining the constant "strng" defined at s-crtl.ads:119, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fgets__strng
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function strng #"s-crtl.ads" 119 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "strng" defined at s-crtl.ads:119, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fgets__strng__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "n" defined at s-crtl.ads:119, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fgets__n
 use import "_gnatprove_standard".Main

 function n #"s-crtl.ads" 119 0 0# "model" "model_trace:11736" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at s-crtl.ads:119, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fgets__n__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "stream" defined at s-crtl.ads:119, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fgets__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function stream #"s-crtl.ads" 119 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:119, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fgets__stream__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fgets" defined at s-crtl.ads:119, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__fgets
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function fgets #"s-crtl.ads" 119 0 0# 
   (strng : BV32.t) (n : int) (stream : BV32.t) : BV32.t

end

(* Module for defining the constant "filename" defined at s-crtl.ads:123, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fopen__filename
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function filename #"s-crtl.ads" 123 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "filename" defined at s-crtl.ads:123, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fopen__filename__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "mode" defined at s-crtl.ads:124, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fopen__mode
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function mode #"s-crtl.ads" 124 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "mode" defined at s-crtl.ads:124, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fopen__mode__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "encoding" defined at s-crtl.ads:125, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fopen__encoding
 use import "_gnatprove_standard".Main

 function encoding #"s-crtl.ads" 125 0 0# "model" "model_trace:11790" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 72 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "encoding" defined at s-crtl.ads:125, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fopen__encoding__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fopen" defined at s-crtl.ads:122, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__fopen
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function fopen #"s-crtl.ads" 122 0 0# 
   (filename : BV32.t) (mode : BV32.t) (encoding : int) : BV32.t

end

(* Module for defining the constant "c" defined at s-crtl.ads:128, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fputc__c
 use import "_gnatprove_standard".Main

 function c #"s-crtl.ads" 128 0 0# "model" "model_trace:11818" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "c" defined at s-crtl.ads:128, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fputc__c__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "stream" defined at s-crtl.ads:128, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fputc__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function stream #"s-crtl.ads" 128 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:128, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fputc__stream__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fputc" defined at s-crtl.ads:128, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__fputc
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function fputc #"s-crtl.ads" 128 0 0# 
   (c : int) (stream : BV32.t) : int

end

(* Module for defining the constant "c" defined at s-crtl.ads:131, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fputwc__c
 use import "_gnatprove_standard".Main

 function c #"s-crtl.ads" 131 0 0# "model" "model_trace:11854" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "c" defined at s-crtl.ads:131, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fputwc__c__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "stream" defined at s-crtl.ads:131, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fputwc__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function stream #"s-crtl.ads" 131 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:131, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fputwc__stream__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fputwc" defined at s-crtl.ads:131, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__fputwc
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function fputwc #"s-crtl.ads" 131 0 0# 
   (c : int) (stream : BV32.t) : int

end

(* Module for defining the constant "strng" defined at s-crtl.ads:134, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fputs__strng
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function strng #"s-crtl.ads" 134 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "strng" defined at s-crtl.ads:134, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fputs__strng__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "stream" defined at s-crtl.ads:134, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fputs__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function stream #"s-crtl.ads" 134 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:134, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fputs__stream__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fputs" defined at s-crtl.ads:134, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__fputs
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function fputs #"s-crtl.ads" 134 0 0# 
   (strng : BV32.t) (stream : BV32.t) : int

end

(* Module for defining the constant "ptr" defined at s-crtl.ads:137, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__free__ptr
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function ptr #"s-crtl.ads" 137 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "ptr" defined at s-crtl.ads:137, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__free__ptr__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "filename" defined at s-crtl.ads:141, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__freopen__filename
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function filename #"s-crtl.ads" 141 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "filename" defined at s-crtl.ads:141, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__freopen__filename__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "mode" defined at s-crtl.ads:142, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__freopen__mode
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function mode #"s-crtl.ads" 142 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "mode" defined at s-crtl.ads:142, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__freopen__mode__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "stream" defined at s-crtl.ads:143, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__freopen__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function stream #"s-crtl.ads" 143 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:143, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__freopen__stream__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "encoding" defined at s-crtl.ads:144, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__freopen__encoding
 use import "_gnatprove_standard".Main

 function encoding #"s-crtl.ads" 144 0 0# "model" "model_trace:11981" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 72 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "encoding" defined at s-crtl.ads:144, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__freopen__encoding__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "freopen" defined at s-crtl.ads:140, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__freopen
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function freopen #"s-crtl.ads" 140 0 0# 
   (filename : BV32.t) (mode : BV32.t) (stream : BV32.t) (encoding : int) : BV32.t

end

(* Module for defining the constant "stream" defined at s-crtl.ads:148, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fseek__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function stream #"s-crtl.ads" 148 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:148, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fseek__stream__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "offset" defined at s-crtl.ads:149, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fseek__offset
 use import "_gnatprove_standard".Main

 function offset #"s-crtl.ads" 149 0 0# "model" "model_trace:12018" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 55 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "offset" defined at s-crtl.ads:149, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fseek__offset__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "origin" defined at s-crtl.ads:150, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fseek__origin
 use import "_gnatprove_standard".Main

 function origin #"s-crtl.ads" 150 0 0# "model" "model_trace:12027" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "origin" defined at s-crtl.ads:150, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fseek__origin__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fseek" defined at s-crtl.ads:147, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__fseek
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function fseek #"s-crtl.ads" 147 0 0# 
   (stream : BV32.t) (offset : int) (origin : int) : int

end

(* Module for defining the constant "stream" defined at s-crtl.ads:154, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fseek64__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function stream #"s-crtl.ads" 154 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:154, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fseek64__stream__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "offset" defined at s-crtl.ads:155, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fseek64__offset
 use import "_gnatprove_standard".Main

 function offset #"s-crtl.ads" 155 0 0# "model" "model_trace:12063" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 65 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "offset" defined at s-crtl.ads:155, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fseek64__offset__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "origin" defined at s-crtl.ads:156, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fseek64__origin
 use import "_gnatprove_standard".Main

 function origin #"s-crtl.ads" 156 0 0# "model" "model_trace:12072" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "origin" defined at s-crtl.ads:156, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fseek64__origin__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fseek64" defined at s-crtl.ads:153, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__fseek64
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function fseek64 #"s-crtl.ads" 153 0 0# 
   (stream : BV32.t) (offset : int) (origin : int) : int

end

(* Module for defining the constant "stream" defined at s-crtl.ads:159, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__ftell__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function stream #"s-crtl.ads" 159 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:159, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__ftell__stream__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "ftell" defined at s-crtl.ads:159, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__ftell
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function ftell #"s-crtl.ads" 159 0 0# 
   (stream : BV32.t) : int

end

(* Module for defining the constant "stream" defined at s-crtl.ads:162, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__ftell64__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function stream #"s-crtl.ads" 162 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:162, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__ftell64__stream__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "ftell64" defined at s-crtl.ads:162, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__ftell64
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function ftell64 #"s-crtl.ads" 162 0 0# 
   (stream : BV32.t) : int

end

(* Module for defining the constant "s" defined at s-crtl.ads:165, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__getenv__s
 use import "_gnatprove_standard".Main
 use        Standard__string

 function s #"s-crtl.ads" 165 0 0# "model_projected" "model_trace:12153" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s" defined at s-crtl.ads:165, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__getenv__s__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "getenv" defined at s-crtl.ads:165, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__getenv
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        Standard__string

 function getenv #"s-crtl.ads" 165 0 0# 
   (s : Standard__string.string) : BV32.t

end

(* Module for defining the constant "handle" defined at s-crtl.ads:168, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__isatty__handle
 use import "_gnatprove_standard".Main

 function handle #"s-crtl.ads" 168 0 0# "model" "model_trace:12182" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "handle" defined at s-crtl.ads:168, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__isatty__handle__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "isatty" defined at s-crtl.ads:168, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__isatty
 use import "_gnatprove_standard".Main

 function isatty #"s-crtl.ads" 168 0 0# 
   (handle : int) : int

end

(* Module for defining the constant "fd" defined at s-crtl.ads:171, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__lseek__fd
 use import "_gnatprove_standard".Main

 function fd #"s-crtl.ads" 171 0 0# "model" "model_trace:12209" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "fd" defined at s-crtl.ads:171, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__lseek__fd__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "offset" defined at s-crtl.ads:171, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__lseek__offset
 use import "_gnatprove_standard".Main

 function offset #"s-crtl.ads" 171 0 0# "model" "model_trace:12218" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 58 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "offset" defined at s-crtl.ads:171, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__lseek__offset__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "direction" defined at s-crtl.ads:171, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__lseek__direction
 use import "_gnatprove_standard".Main

 function direction #"s-crtl.ads" 171 0 0# "model" "model_trace:12227" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "direction" defined at s-crtl.ads:171, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__lseek__direction__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "lseek" defined at s-crtl.ads:171, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__lseek
 use import "_gnatprove_standard".Main

 function lseek #"s-crtl.ads" 171 0 0# 
   (fd : int) (offset : int) (direction : int) : int

end

(* Module for defining the constant "size" defined at s-crtl.ads:174, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__malloc__size
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function size #"s-crtl.ads" 174 0 0# "model" "model_trace:12254" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 60 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "size" defined at s-crtl.ads:174, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__malloc__size__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "malloc" defined at s-crtl.ads:174, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__malloc
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function malloc #"s-crtl.ads" 174 0 0# 
   (size : BV32.t) : BV32.t

end

(* Module for defining the constant "s1" defined at s-crtl.ads:177, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__memcpy__s1
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function s1 #"s-crtl.ads" 177 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s1" defined at s-crtl.ads:177, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__memcpy__s1__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s2" defined at s-crtl.ads:177, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__memcpy__s2
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function s2 #"s-crtl.ads" 177 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s2" defined at s-crtl.ads:177, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__memcpy__s2__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "n" defined at s-crtl.ads:177, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__memcpy__n
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function n #"s-crtl.ads" 177 0 0# "model" "model_trace:12305" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 60 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at s-crtl.ads:177, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__memcpy__n__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s1" defined at s-crtl.ads:180, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__memmove__s1
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function s1 #"s-crtl.ads" 180 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s1" defined at s-crtl.ads:180, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__memmove__s1__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s2" defined at s-crtl.ads:180, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__memmove__s2
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function s2 #"s-crtl.ads" 180 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s2" defined at s-crtl.ads:180, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__memmove__s2__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "n" defined at s-crtl.ads:180, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__memmove__n
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function n #"s-crtl.ads" 180 0 0# "model" "model_trace:12353" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 60 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at s-crtl.ads:180, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__memmove__n__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "template" defined at s-crtl.ads:183, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__mktemp__template
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function template #"s-crtl.ads" 183 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "template" defined at s-crtl.ads:183, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__mktemp__template__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "stream" defined at s-crtl.ads:186, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__pclose__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function stream #"s-crtl.ads" 186 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:186, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__pclose__stream__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "pclose" defined at s-crtl.ads:186, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__pclose
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function pclose #"s-crtl.ads" 186 0 0# 
   (stream : BV32.t) : int

end

(* Module for defining the constant "command" defined at s-crtl.ads:189, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__popen__command
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function command #"s-crtl.ads" 189 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "command" defined at s-crtl.ads:189, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__popen__command__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "mode" defined at s-crtl.ads:189, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__popen__mode
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function mode #"s-crtl.ads" 189 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "mode" defined at s-crtl.ads:189, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__popen__mode__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "popen" defined at s-crtl.ads:189, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__popen
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function popen #"s-crtl.ads" 189 0 0# 
   (command : BV32.t) (mode : BV32.t) : BV32.t

end

(* Module for defining the constant "ptr" defined at s-crtl.ads:193, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__realloc__ptr
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function ptr #"s-crtl.ads" 193 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "ptr" defined at s-crtl.ads:193, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__realloc__ptr__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "size" defined at s-crtl.ads:193, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__realloc__size
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function size #"s-crtl.ads" 193 0 0# "model" "model_trace:12486" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 60 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "size" defined at s-crtl.ads:193, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__realloc__size__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "realloc" defined at s-crtl.ads:192, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__realloc
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function realloc #"s-crtl.ads" 192 0 0# 
   (ptr : BV32.t) (size : BV32.t) : BV32.t

end

(* Module for defining the constant "stream" defined at s-crtl.ads:196, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__rewind__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function stream #"s-crtl.ads" 196 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:196, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__rewind__stream__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "dir_name" defined at s-crtl.ads:199, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__rmdir__dir_name
 use import "_gnatprove_standard".Main
 use        Standard__string

 function dir_name #"s-crtl.ads" 199 0 0# "model_projected" "model_trace:12541" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "dir_name" defined at s-crtl.ads:199, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__rmdir__dir_name__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "rmdir" defined at s-crtl.ads:199, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__rmdir
 use import "_gnatprove_standard".Main
 use        Standard__string

 function rmdir #"s-crtl.ads" 199 0 0# 
   (dir_name : Standard__string.string) : int

end

(* Module for defining the constant "dir_name" defined at s-crtl.ads:202, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__chdir__dir_name
 use import "_gnatprove_standard".Main
 use        Standard__string

 function dir_name #"s-crtl.ads" 202 0 0# "model_projected" "model_trace:12568" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "dir_name" defined at s-crtl.ads:202, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__chdir__dir_name__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "chdir" defined at s-crtl.ads:202, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__chdir
 use import "_gnatprove_standard".Main
 use        Standard__string

 function chdir #"s-crtl.ads" 202 0 0# 
   (dir_name : Standard__string.string) : int

end

(* Module for defining the constant "dir_name" defined at s-crtl.ads:206, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__mkdir__dir_name
 use import "_gnatprove_standard".Main
 use        Standard__string

 function dir_name #"s-crtl.ads" 206 0 0# "model_projected" "model_trace:12595" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "dir_name" defined at s-crtl.ads:206, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__mkdir__dir_name__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "encoding" defined at s-crtl.ads:207, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__mkdir__encoding
 use import "_gnatprove_standard".Main

 function encoding #"s-crtl.ads" 207 0 0# "model" "model_trace:12604" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 72 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "encoding" defined at s-crtl.ads:207, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__mkdir__encoding__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "mkdir" defined at s-crtl.ads:205, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__mkdir
 use import "_gnatprove_standard".Main
 use        Standard__string

 function mkdir #"s-crtl.ads" 205 0 0# 
   (dir_name : Standard__string.string) (encoding : int) : int

end

(* Module for defining the constant "stream" defined at s-crtl.ads:211, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__setvbuf__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function stream #"s-crtl.ads" 211 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:211, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__setvbuf__stream__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "buffer" defined at s-crtl.ads:212, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__setvbuf__buffer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function buffer #"s-crtl.ads" 212 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "buffer" defined at s-crtl.ads:212, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__setvbuf__buffer__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "mode" defined at s-crtl.ads:213, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__setvbuf__mode
 use import "_gnatprove_standard".Main

 function mode #"s-crtl.ads" 213 0 0# "model" "model_trace:12650" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "mode" defined at s-crtl.ads:213, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__setvbuf__mode__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "size" defined at s-crtl.ads:214, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__setvbuf__size
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function size #"s-crtl.ads" 214 0 0# "model" "model_trace:12659" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 60 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "size" defined at s-crtl.ads:214, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__setvbuf__size__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "setvbuf" defined at s-crtl.ads:210, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__setvbuf
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function setvbuf #"s-crtl.ads" 210 0 0# 
   (stream : BV32.t) (buffer : BV32.t) (mode : int) (size : BV32.t) : int

end

(* Module for defining the constant "str" defined at s-crtl.ads:217, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__tmpnam__str
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function str #"s-crtl.ads" 217 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "str" defined at s-crtl.ads:217, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__tmpnam__str__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "tmpfile" defined at s-crtl.ads:220, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__tmpfile
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function tmpfile #"s-crtl.ads" 220 0 0# 
   (__void_param : unit) : BV32.t

end

(* Module for defining the constant "c" defined at s-crtl.ads:223, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__ungetc__c
 use import "_gnatprove_standard".Main

 function c #"s-crtl.ads" 223 0 0# "model" "model_trace:12730" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "c" defined at s-crtl.ads:223, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__ungetc__c__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "stream" defined at s-crtl.ads:223, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__ungetc__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function stream #"s-crtl.ads" 223 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:223, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__ungetc__stream__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "ungetc" defined at s-crtl.ads:223, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__ungetc
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function ungetc #"s-crtl.ads" 223 0 0# 
   (c : int) (stream : BV32.t) : int

end

(* Module for defining the constant "filename" defined at s-crtl.ads:226, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__unlink__filename
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function filename #"s-crtl.ads" 226 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "filename" defined at s-crtl.ads:226, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__unlink__filename__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "unlink" defined at s-crtl.ads:226, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__unlink
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function unlink #"s-crtl.ads" 226 0 0# 
   (filename : BV32.t) : int

end

(* Module for defining the constant "filename" defined at s-crtl.ads:229, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__open__filename
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function filename #"s-crtl.ads" 229 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "filename" defined at s-crtl.ads:229, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__open__filename__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "oflag" defined at s-crtl.ads:229, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__open__oflag
 use import "_gnatprove_standard".Main

 function oflag #"s-crtl.ads" 229 0 0# "model" "model_trace:12802" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "oflag" defined at s-crtl.ads:229, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__open__oflag__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "open" defined at s-crtl.ads:229, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__open
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function open #"s-crtl.ads" 229 0 0# 
   (filename : BV32.t) (oflag : int) : int

end

(* Module for defining the constant "fd" defined at s-crtl.ads:232, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__close__fd
 use import "_gnatprove_standard".Main

 function fd #"s-crtl.ads" 232 0 0# "model" "model_trace:12829" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "fd" defined at s-crtl.ads:232, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__close__fd__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "close" defined at s-crtl.ads:232, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__close
 use import "_gnatprove_standard".Main

 function close #"s-crtl.ads" 232 0 0# 
   (fd : int) : int

end

(* Module for defining the constant "fd" defined at s-crtl.ads:235, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__read__fd
 use import "_gnatprove_standard".Main

 function fd #"s-crtl.ads" 235 0 0# "model" "model_trace:12856" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "fd" defined at s-crtl.ads:235, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__read__fd__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "buffer" defined at s-crtl.ads:235, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__read__buffer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function buffer #"s-crtl.ads" 235 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "buffer" defined at s-crtl.ads:235, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__read__buffer__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "count" defined at s-crtl.ads:235, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__read__count
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function count #"s-crtl.ads" 235 0 0# "model" "model_trace:12874" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 60 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "count" defined at s-crtl.ads:235, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__read__count__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "read" defined at s-crtl.ads:235, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__read
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function read #"s-crtl.ads" 235 0 0# 
   (fd : int) (buffer : BV32.t) (count : BV32.t) : int

end

(* Module for defining the constant "fd" defined at s-crtl.ads:238, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__write__fd
 use import "_gnatprove_standard".Main

 function fd #"s-crtl.ads" 238 0 0# "model" "model_trace:12901" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "fd" defined at s-crtl.ads:238, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__write__fd__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "buffer" defined at s-crtl.ads:238, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__write__buffer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function buffer #"s-crtl.ads" 238 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "buffer" defined at s-crtl.ads:238, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__write__buffer__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "count" defined at s-crtl.ads:238, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__write__count
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function count #"s-crtl.ads" 238 0 0# "model" "model_trace:12919" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 60 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "count" defined at s-crtl.ads:238, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__write__count__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "write" defined at s-crtl.ads:238, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__write
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function write #"s-crtl.ads" 238 0 0# 
   (fd : int) (buffer : BV32.t) (count : BV32.t) : int

end

(* Module for axiomatizing type "Tinteger_8B" defined at interfac.ads:46, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_8B
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tinteger_8B #"interfac.ads" 46 0 0# 
 
 function first #"interfac.ads" 46 0 0# 
   : int =
  ( -128 )
 
 function last #"interfac.ads" 46 0 0# 
   : int =
  127
 
 predicate in_range #"interfac.ads" 46 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tinteger_8B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type tinteger_8B__ref #"interfac.ads" 46 0 0# =
  { mutable tinteger_8B__content "model_trace:" : tinteger_8B }
 
 function tinteger_8B__ref___projection #"interfac.ads" 46 0 0# 
   (a : tinteger_8B__ref) : tinteger_8B =
  a.tinteger_8B__content
 
 meta "model_projection" function tinteger_8B__ref___projection
 
 meta "inline : no" function tinteger_8B__ref___projection
 
 val tinteger_8B__havoc #"interfac.ads" 46 0 0# 
   (x : tinteger_8B__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8" defined at interfac.ads:46, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 #"interfac.ads" 46 0 0# 
 
 function first #"interfac.ads" 46 0 0# 
   : int =
  ( -128 )
 
 function last #"interfac.ads" 46 0 0# 
   : int =
  127
 
 predicate in_range #"interfac.ads" 46 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type integer_8__ref #"interfac.ads" 46 0 0# =
  { mutable integer_8__content "model_trace:" : integer_8 }
 
 function integer_8__ref_2__projection #"interfac.ads" 46 0 0# 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref_2__projection
 
 meta "inline : no" function integer_8__ref_2__projection
 
 val integer_8__havoc #"interfac.ads" 46 0 0# 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Tinteger_16B" defined at interfac.ads:49, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_16B
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tinteger_16B #"interfac.ads" 49 0 0# 
 
 function first #"interfac.ads" 49 0 0# 
   : int =
  ( -32768 )
 
 function last #"interfac.ads" 49 0 0# 
   : int =
  32767
 
 predicate in_range #"interfac.ads" 49 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tinteger_16B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type tinteger_16B__ref #"interfac.ads" 49 0 0# =
  { mutable tinteger_16B__content "model_trace:" : tinteger_16B }
 
 function tinteger_16B__ref___projection #"interfac.ads" 49 0 0# 
   (a : tinteger_16B__ref) : tinteger_16B =
  a.tinteger_16B__content
 
 meta "model_projection" function tinteger_16B__ref___projection
 
 meta "inline : no" function tinteger_16B__ref___projection
 
 val tinteger_16B__havoc #"interfac.ads" 49 0 0# 
   (x : tinteger_16B__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_16" defined at interfac.ads:49, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 #"interfac.ads" 49 0 0# 
 
 function first #"interfac.ads" 49 0 0# 
   : int =
  ( -32768 )
 
 function last #"interfac.ads" 49 0 0# 
   : int =
  32767
 
 predicate in_range #"interfac.ads" 49 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type integer_16__ref #"interfac.ads" 49 0 0# =
  { mutable integer_16__content "model_trace:" : integer_16 }
 
 function integer_16__ref_2__projection #"interfac.ads" 49 0 0# 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref_2__projection
 
 meta "inline : no" function integer_16__ref_2__projection
 
 val integer_16__havoc #"interfac.ads" 49 0 0# 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Tinteger_32B" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_32B
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tinteger_32B #"interfac.ads" 52 0 0# 
 
 function first #"interfac.ads" 52 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"interfac.ads" 52 0 0# 
   : int =
  2147483647
 
 predicate in_range #"interfac.ads" 52 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tinteger_32B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type tinteger_32B__ref #"interfac.ads" 52 0 0# =
  { mutable tinteger_32B__content "model_trace:" : tinteger_32B }
 
 function tinteger_32B__ref___projection #"interfac.ads" 52 0 0# 
   (a : tinteger_32B__ref) : tinteger_32B =
  a.tinteger_32B__content
 
 meta "model_projection" function tinteger_32B__ref___projection
 
 meta "inline : no" function tinteger_32B__ref___projection
 
 val tinteger_32B__havoc #"interfac.ads" 52 0 0# 
   (x : tinteger_32B__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_32" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 #"interfac.ads" 52 0 0# 
 
 function first #"interfac.ads" 52 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"interfac.ads" 52 0 0# 
   : int =
  2147483647
 
 predicate in_range #"interfac.ads" 52 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type integer_32__ref #"interfac.ads" 52 0 0# =
  { mutable integer_32__content "model_trace:" : integer_32 }
 
 function integer_32__ref_2__projection #"interfac.ads" 52 0 0# 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_2__projection
 
 meta "inline : no" function integer_32__ref_2__projection
 
 val integer_32__havoc #"interfac.ads" 52 0 0# 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Tinteger_64B" defined at interfac.ads:55, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_64B
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tinteger_64B #"interfac.ads" 55 0 0# 
 
 function first #"interfac.ads" 55 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"interfac.ads" 55 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"interfac.ads" 55 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tinteger_64B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type tinteger_64B__ref #"interfac.ads" 55 0 0# =
  { mutable tinteger_64B__content "model_trace:" : tinteger_64B }
 
 function tinteger_64B__ref___projection #"interfac.ads" 55 0 0# 
   (a : tinteger_64B__ref) : tinteger_64B =
  a.tinteger_64B__content
 
 meta "model_projection" function tinteger_64B__ref___projection
 
 meta "inline : no" function tinteger_64B__ref___projection
 
 val tinteger_64B__havoc #"interfac.ads" 55 0 0# 
   (x : tinteger_64B__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_64" defined at interfac.ads:55, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 #"interfac.ads" 55 0 0# 
 
 function first #"interfac.ads" 55 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"interfac.ads" 55 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"interfac.ads" 55 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type integer_64__ref #"interfac.ads" 55 0 0# =
  { mutable integer_64__content "model_trace:" : integer_64 }
 
 function integer_64__ref_2__projection #"interfac.ads" 55 0 0# 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_2__projection
 
 meta "inline : no" function integer_64__ref_2__projection
 
 val integer_64__havoc #"interfac.ads" 55 0 0# 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "unsigned_8" defined at interfac.ads:63, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_8
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV8

 type unsigned_8 #"interfac.ads" 63 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"interfac.ads" 63 0 0# 
   : BV8.t
 
 function first #"interfac.ads" 63 0 0# 
   : BV8.t =
  ( BV8.of_int 0 )
 
 function last #"interfac.ads" 63 0 0# 
   : BV8.t =
  ( BV8.of_int 255 )
 
 function first_int #"interfac.ads" 63 0 0# 
   : int =
  0
 
 function last_int #"interfac.ads" 63 0 0# 
   : int =
  255
 
 predicate in_range #"interfac.ads" 63 0 0# 
   (x : BV8.t)  =
  true
 
 predicate in_range_int #"interfac.ads" 63 0 0# 
   (x : int)  =
  BV8.uint_in_range x
 
 clone export "ada__model".Static_Modular_8 with
 type t = unsigned_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type unsigned_8__ref #"interfac.ads" 63 0 0# =
  { mutable unsigned_8__content "model_trace:" : unsigned_8 }
 
 function unsigned_8__ref___projection #"interfac.ads" 63 0 0# 
   (a : unsigned_8__ref) : unsigned_8 =
  a.unsigned_8__content
 
 meta "model_projection" function unsigned_8__ref___projection
 
 meta "inline : no" function unsigned_8__ref___projection
 
 val unsigned_8__havoc #"interfac.ads" 63 0 0# 
   (x : unsigned_8__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "unsigned_16" defined at interfac.ads:66, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_16
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV16

 type unsigned_16 #"interfac.ads" 66 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"interfac.ads" 66 0 0# 
   : BV16.t
 
 function first #"interfac.ads" 66 0 0# 
   : BV16.t =
  ( BV16.of_int 0 )
 
 function last #"interfac.ads" 66 0 0# 
   : BV16.t =
  ( BV16.of_int 65535 )
 
 function first_int #"interfac.ads" 66 0 0# 
   : int =
  0
 
 function last_int #"interfac.ads" 66 0 0# 
   : int =
  65535
 
 predicate in_range #"interfac.ads" 66 0 0# 
   (x : BV16.t)  =
  true
 
 predicate in_range_int #"interfac.ads" 66 0 0# 
   (x : int)  =
  BV16.uint_in_range x
 
 clone export "ada__model".Static_Modular_16 with
 type t = unsigned_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type unsigned_16__ref #"interfac.ads" 66 0 0# =
  { mutable unsigned_16__content "model_trace:" : unsigned_16 }
 
 function unsigned_16__ref___projection #"interfac.ads" 66 0 0# 
   (a : unsigned_16__ref) : unsigned_16 =
  a.unsigned_16__content
 
 meta "model_projection" function unsigned_16__ref___projection
 
 meta "inline : no" function unsigned_16__ref___projection
 
 val unsigned_16__havoc #"interfac.ads" 66 0 0# 
   (x : unsigned_16__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "unsigned_24" defined at interfac.ads:69, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_24
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32

 type unsigned_24 #"interfac.ads" 69 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"interfac.ads" 69 0 0# 
   : BV32.t =
  ( BV32.of_int 16777216 )
 
 function first #"interfac.ads" 69 0 0# 
   : BV32.t =
  ( BV32.of_int 0 )
 
 function last #"interfac.ads" 69 0 0# 
   : BV32.t =
  ( BV32.of_int 16777215 )
 
 function first_int #"interfac.ads" 69 0 0# 
   : int =
  0
 
 function last_int #"interfac.ads" 69 0 0# 
   : int =
  16777215
 
 predicate in_range #"interfac.ads" 69 0 0# 
   (x : BV32.t)  =
  ( (BV32.ule first x) /\ (BV32.ule x last) )
 
 predicate in_range_int #"interfac.ads" 69 0 0# 
   (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Static_Modular_lt32 with
 type t = unsigned_24, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function attr__ATTRIBUTE_MODULUS = attr__ATTRIBUTE_MODULUS, 
 predicate in_range_int = in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type unsigned_24__ref #"interfac.ads" 69 0 0# =
  { mutable unsigned_24__content "model_trace:" : unsigned_24 }
 
 function unsigned_24__ref___projection #"interfac.ads" 69 0 0# 
   (a : unsigned_24__ref) : unsigned_24 =
  a.unsigned_24__content
 
 meta "model_projection" function unsigned_24__ref___projection
 
 meta "inline : no" function unsigned_24__ref___projection
 
 val unsigned_24__havoc #"interfac.ads" 69 0 0# 
   (x : unsigned_24__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "unsigned_32" defined at interfac.ads:74, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_32
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32

 type unsigned_32 #"interfac.ads" 74 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"interfac.ads" 74 0 0# 
   : BV32.t
 
 function first #"interfac.ads" 74 0 0# 
   : BV32.t =
  ( BV32.of_int 0 )
 
 function last #"interfac.ads" 74 0 0# 
   : BV32.t =
  ( BV32.of_int 4294967295 )
 
 function first_int #"interfac.ads" 74 0 0# 
   : int =
  0
 
 function last_int #"interfac.ads" 74 0 0# 
   : int =
  4294967295
 
 predicate in_range #"interfac.ads" 74 0 0# 
   (x : BV32.t)  =
  true
 
 predicate in_range_int #"interfac.ads" 74 0 0# 
   (x : int)  =
  BV32.uint_in_range x
 
 clone export "ada__model".Static_Modular_32 with
 type t = unsigned_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type unsigned_32__ref #"interfac.ads" 74 0 0# =
  { mutable unsigned_32__content "model_trace:" : unsigned_32 }
 
 function unsigned_32__ref___projection #"interfac.ads" 74 0 0# 
   (a : unsigned_32__ref) : unsigned_32 =
  a.unsigned_32__content
 
 meta "model_projection" function unsigned_32__ref___projection
 
 meta "inline : no" function unsigned_32__ref___projection
 
 val unsigned_32__havoc #"interfac.ads" 74 0 0# 
   (x : unsigned_32__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "unsigned_64" defined at interfac.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_64
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type unsigned_64 #"interfac.ads" 77 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"interfac.ads" 77 0 0# 
   : BV64.t
 
 function first #"interfac.ads" 77 0 0# 
   : BV64.t =
  ( BV64.of_int 0 )
 
 function last #"interfac.ads" 77 0 0# 
   : BV64.t =
  ( BV64.of_int 18446744073709551615 )
 
 function first_int #"interfac.ads" 77 0 0# 
   : int =
  0
 
 function last_int #"interfac.ads" 77 0 0# 
   : int =
  18446744073709551615
 
 predicate in_range #"interfac.ads" 77 0 0# 
   (x : BV64.t)  =
  true
 
 predicate in_range_int #"interfac.ads" 77 0 0# 
   (x : int)  =
  BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = unsigned_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type unsigned_64__ref #"interfac.ads" 77 0 0# =
  { mutable unsigned_64__content "model_trace:" : unsigned_64 }
 
 function unsigned_64__ref___projection #"interfac.ads" 77 0 0# 
   (a : unsigned_64__ref) : unsigned_64 =
  a.unsigned_64__content
 
 meta "model_projection" function unsigned_64__ref___projection
 
 meta "inline : no" function unsigned_64__ref___projection
 
 val unsigned_64__havoc #"interfac.ads" 77 0 0# 
   (x : unsigned_64__ref) : unit
  writes {x}

end

(* Module for defining the constant "value" defined at interfac.ads:82, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8

 function value #"interfac.ads" 82 0 0# "model" "model_trace:8982" 
   : BV8.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 63 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:82, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__value__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:83, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 83 0 0# "model" "model_trace:8991" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:83, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__amount__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:86, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8

 function value #"interfac.ads" 86 0 0# "model" "model_trace:9010" 
   : BV8.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 63 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:86, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__value__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:87, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 87 0 0# "model" "model_trace:9019" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:87, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__amount__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:90, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8

 function value #"interfac.ads" 90 0 0# "model" "model_trace:9038" 
   : BV8.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 63 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:90, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__value__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:91, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 91 0 0# "model" "model_trace:9047" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:91, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__amount__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:94, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8

 function value #"interfac.ads" 94 0 0# "model" "model_trace:9066" 
   : BV8.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 63 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:94, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__value__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:95, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 95 0 0# "model" "model_trace:9075" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:95, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__amount__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:98, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8

 function value #"interfac.ads" 98 0 0# "model" "model_trace:9094" 
   : BV8.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 63 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:98, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__value__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:99, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 99 0 0# "model" "model_trace:9103" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:99, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__amount__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:102, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__2__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function value #"interfac.ads" 102 0 0# "model" "model_trace:9122" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 66 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:102, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__2__value__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:103, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__2__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 103 0 0# "model" "model_trace:9131" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:103, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__2__amount__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:106, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__2__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function value #"interfac.ads" 106 0 0# "model" "model_trace:9150" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 66 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:106, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__2__value__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:107, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__2__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 107 0 0# "model" "model_trace:9159" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:107, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__2__amount__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:110, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__2__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function value #"interfac.ads" 110 0 0# "model" "model_trace:9178" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 66 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:110, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__2__value__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:111, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__2__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 111 0 0# "model" "model_trace:9187" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:111, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__2__amount__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:114, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__2__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function value #"interfac.ads" 114 0 0# "model" "model_trace:9206" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 66 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:114, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__2__value__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:115, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__2__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 115 0 0# "model" "model_trace:9215" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:115, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__2__amount__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:118, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__2__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function value #"interfac.ads" 118 0 0# "model" "model_trace:9234" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 66 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:118, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__2__value__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:119, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__2__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 119 0 0# "model" "model_trace:9243" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:119, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__2__amount__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:122, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__3__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function value #"interfac.ads" 122 0 0# "model" "model_trace:9262" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 74 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:122, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__3__value__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:123, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__3__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 123 0 0# "model" "model_trace:9271" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:123, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__3__amount__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:126, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__3__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function value #"interfac.ads" 126 0 0# "model" "model_trace:9290" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 74 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:126, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__3__value__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:127, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__3__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 127 0 0# "model" "model_trace:9299" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:127, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__3__amount__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:130, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__3__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function value #"interfac.ads" 130 0 0# "model" "model_trace:9318" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 74 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:130, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__3__value__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:131, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__3__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 131 0 0# "model" "model_trace:9327" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:131, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__3__amount__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:134, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__3__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function value #"interfac.ads" 134 0 0# "model" "model_trace:9346" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 74 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:134, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__3__value__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:135, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__3__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 135 0 0# "model" "model_trace:9355" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:135, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__3__amount__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:138, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__3__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function value #"interfac.ads" 138 0 0# "model" "model_trace:9374" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 74 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:138, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__3__value__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:139, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__3__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 139 0 0# "model" "model_trace:9383" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:139, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__3__amount__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:142, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__4__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"interfac.ads" 142 0 0# "model" "model_trace:9402" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 77 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:142, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__4__value__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:143, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__4__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 143 0 0# "model" "model_trace:9411" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:143, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__4__amount__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:146, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__4__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"interfac.ads" 146 0 0# "model" "model_trace:9430" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 77 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:146, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__4__value__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:147, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__4__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 147 0 0# "model" "model_trace:9439" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:147, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__4__amount__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:150, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__4__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"interfac.ads" 150 0 0# "model" "model_trace:9458" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 77 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:150, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__4__value__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:151, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__4__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 151 0 0# "model" "model_trace:9467" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:151, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__4__amount__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:154, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__4__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"interfac.ads" 154 0 0# "model" "model_trace:9486" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 77 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:154, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__4__value__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:155, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__4__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 155 0 0# "model" "model_trace:9495" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:155, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__4__amount__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:158, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__4__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"interfac.ads" 158 0 0# "model" "model_trace:9514" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 77 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:158, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__4__value__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:159, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__4__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 159 0 0# "model" "model_trace:9523" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:159, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__4__amount__axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "Tieee_float_32B" defined at interfac.ads:169, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tieee_float_32B
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type tieee_float_32B #"interfac.ads" 169 0 0# 
 
 function first #"interfac.ads" 169 0 0# 
   : real =
  (-.340282346638528859811704183484516925440.0)
 
 function last #"interfac.ads" 169 0 0# 
   : real =
  (340282346638528859811704183484516925440.0)
 
 predicate in_range #"interfac.ads" 169 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = tieee_float_32B, 
 function round_real_tmp = Floating.round_single, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type tieee_float_32B__ref #"interfac.ads" 169 0 0# =
  { mutable tieee_float_32B__content "model_trace:" : tieee_float_32B }
 
 function tieee_float_32B__ref___projection #"interfac.ads" 169 0 0# 
   (a : tieee_float_32B__ref) : tieee_float_32B =
  a.tieee_float_32B__content
 
 meta "model_projection" function tieee_float_32B__ref___projection
 
 meta "inline : no" function tieee_float_32B__ref___projection
 
 val tieee_float_32B__havoc #"interfac.ads" 169 0 0# 
   (x : tieee_float_32B__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "ieee_float_32" defined at interfac.ads:169, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__ieee_float_32
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type ieee_float_32 #"interfac.ads" 169 0 0# 
 
 function first #"interfac.ads" 169 0 0# 
   : real =
  (-.340282346638528859811704183484516925440.0)
 
 function last #"interfac.ads" 169 0 0# 
   : real =
  (340282346638528859811704183484516925440.0)
 
 predicate in_range #"interfac.ads" 169 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = ieee_float_32, 
 function round_real_tmp = Floating.round_single, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type ieee_float_32__ref #"interfac.ads" 169 0 0# =
  { mutable ieee_float_32__content "model_trace:" : ieee_float_32 }
 
 function ieee_float_32__ref___projection #"interfac.ads" 169 0 0# 
   (a : ieee_float_32__ref) : ieee_float_32 =
  a.ieee_float_32__content
 
 meta "model_projection" function ieee_float_32__ref___projection
 
 meta "inline : no" function ieee_float_32__ref___projection
 
 val ieee_float_32__havoc #"interfac.ads" 169 0 0# 
   (x : ieee_float_32__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Tieee_float_64B" defined at interfac.ads:172, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tieee_float_64B
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type tieee_float_64B #"interfac.ads" 172 0 0# 
 
 function first #"interfac.ads" 172 0 0# 
   : real =
  (-.179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0)
 
 function last #"interfac.ads" 172 0 0# 
   : real =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0)
 
 predicate in_range #"interfac.ads" 172 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = tieee_float_64B, 
 function round_real_tmp = Floating.round_double, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type tieee_float_64B__ref #"interfac.ads" 172 0 0# =
  { mutable tieee_float_64B__content "model_trace:" : tieee_float_64B }
 
 function tieee_float_64B__ref___projection #"interfac.ads" 172 0 0# 
   (a : tieee_float_64B__ref) : tieee_float_64B =
  a.tieee_float_64B__content
 
 meta "model_projection" function tieee_float_64B__ref___projection
 
 meta "inline : no" function tieee_float_64B__ref___projection
 
 val tieee_float_64B__havoc #"interfac.ads" 172 0 0# 
   (x : tieee_float_64B__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "ieee_float_64" defined at interfac.ads:172, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__ieee_float_64
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type ieee_float_64 #"interfac.ads" 172 0 0# 
 
 function first #"interfac.ads" 172 0 0# 
   : real =
  (-.179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0)
 
 function last #"interfac.ads" 172 0 0# 
   : real =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0)
 
 predicate in_range #"interfac.ads" 172 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = ieee_float_64, 
 function round_real_tmp = Floating.round_double, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type ieee_float_64__ref #"interfac.ads" 172 0 0# =
  { mutable ieee_float_64__content "model_trace:" : ieee_float_64 }
 
 function ieee_float_64__ref___projection #"interfac.ads" 172 0 0# 
   (a : ieee_float_64__ref) : ieee_float_64 =
  a.ieee_float_64__content
 
 meta "model_projection" function ieee_float_64__ref___projection
 
 meta "inline : no" function ieee_float_64__ref___projection
 
 val ieee_float_64__havoc #"interfac.ads" 172 0 0# 
   (x : ieee_float_64__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Tieee_extended_floatB" defined at interfac.ads:182, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tieee_extended_floatB
 use import "_gnatprove_standard".Main
 use import "real".RealInfix

 type tieee_extended_floatB #"interfac.ads" 182 0 0# 
 
 function first #"interfac.ads" 182 0 0# 
   : real =
  (-.1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 function last #"interfac.ads" 182 0 0# 
   : real =
  (1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 predicate in_range #"interfac.ads" 182 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = tieee_extended_floatB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type tieee_extended_floatB__ref #"interfac.ads" 182 0 0# =
  { mutable tieee_extended_floatB__content "model_trace:" : tieee_extended_floatB }
 
 function tieee_extended_floatB__ref___projection #"interfac.ads" 182 0 0# 
   (a : tieee_extended_floatB__ref) : tieee_extended_floatB =
  a.tieee_extended_floatB__content
 
 meta "model_projection" function tieee_extended_floatB__ref___projection
 
 meta "inline : no" function tieee_extended_floatB__ref___projection
 
 val tieee_extended_floatB__havoc #"interfac.ads" 182 0 0# 
   (x : tieee_extended_floatB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "ieee_extended_float" defined at interfac.ads:182, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__ieee_extended_float
 use import "_gnatprove_standard".Main
 use import "real".RealInfix

 type ieee_extended_float #"interfac.ads" 182 0 0# 
 
 function first #"interfac.ads" 182 0 0# 
   : real =
  (-.1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 function last #"interfac.ads" 182 0 0# 
   : real =
  (1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 predicate in_range #"interfac.ads" 182 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = ieee_extended_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type ieee_extended_float__ref #"interfac.ads" 182 0 0# =
  { mutable ieee_extended_float__content "model_trace:" : ieee_extended_float }
 
 function ieee_extended_float__ref___projection #"interfac.ads" 182 0 0# 
   (a : ieee_extended_float__ref) : ieee_extended_float =
  a.ieee_extended_float__content
 
 meta "model_projection" function ieee_extended_float__ref___projection
 
 meta "inline : no" function ieee_extended_float__ref___projection
 
 val ieee_extended_float__havoc #"interfac.ads" 182 0 0# 
   (x : ieee_extended_float__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "chars" defined at i-cstrea.ads:40, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__chars
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32

 type chars #"i-cstrea.ads" 40 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"i-cstrea.ads" 40 0 0# 
   : BV32.t =
  ( BV32.of_int 0 )
 
 function first #"i-cstrea.ads" 40 0 0# 
   : BV32.t =
  ( BV32.of_int 0 )
 
 function last #"i-cstrea.ads" 40 0 0# 
   : BV32.t =
  ( BV32.of_int 4294967295 )
 
 function first_int #"i-cstrea.ads" 40 0 0# 
   : int =
  0
 
 function last_int #"i-cstrea.ads" 40 0 0# 
   : int =
  4294967295
 
 predicate in_range #"i-cstrea.ads" 40 0 0# 
   (x : BV32.t)  =
  ( (BV32.ule first x) /\ (BV32.ule x last) )
 
 predicate in_range_int #"i-cstrea.ads" 40 0 0# 
   (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Static_Modular_lt32 with
 type t = chars, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function attr__ATTRIBUTE_MODULUS = attr__ATTRIBUTE_MODULUS, 
 predicate in_range_int = in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type chars__ref #"i-cstrea.ads" 40 0 0# =
  { mutable chars__content "model_trace:" : chars }
 
 function chars__ref_2__projection #"i-cstrea.ads" 40 0 0# 
   (a : chars__ref) : chars =
  a.chars__content
 
 meta "model_projection" function chars__ref_2__projection
 
 meta "inline : no" function chars__ref_2__projection
 
 val chars__havoc #"i-cstrea.ads" 40 0 0# 
   (x : chars__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "files" defined at i-cstrea.ads:41, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__files
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32

 type files #"i-cstrea.ads" 41 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"i-cstrea.ads" 41 0 0# 
   : BV32.t =
  ( BV32.of_int 0 )
 
 function first #"i-cstrea.ads" 41 0 0# 
   : BV32.t =
  ( BV32.of_int 0 )
 
 function last #"i-cstrea.ads" 41 0 0# 
   : BV32.t =
  ( BV32.of_int 4294967295 )
 
 function first_int #"i-cstrea.ads" 41 0 0# 
   : int =
  0
 
 function last_int #"i-cstrea.ads" 41 0 0# 
   : int =
  4294967295
 
 predicate in_range #"i-cstrea.ads" 41 0 0# 
   (x : BV32.t)  =
  ( (BV32.ule first x) /\ (BV32.ule x last) )
 
 predicate in_range_int #"i-cstrea.ads" 41 0 0# 
   (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Static_Modular_lt32 with
 type t = files, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function attr__ATTRIBUTE_MODULUS = attr__ATTRIBUTE_MODULUS, 
 predicate in_range_int = in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type files__ref #"i-cstrea.ads" 41 0 0# =
  { mutable files__content "model_trace:" : files }
 
 function files__ref_2__projection #"i-cstrea.ads" 41 0 0# 
   (a : files__ref) : files =
  a.files__content
 
 meta "model_projection" function files__ref_2__projection
 
 meta "inline : no" function files__ref_2__projection
 
 val files__havoc #"i-cstrea.ads" 41 0 0# 
   (x : files__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "int" defined at i-cstrea.ads:42, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__int
 use import "_gnatprove_standard".Main
 use import "int".Int

 type int__ #"i-cstrea.ads" 42 0 0# 
 
 function first #"i-cstrea.ads" 42 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"i-cstrea.ads" 42 0 0# 
   : int =
  2147483647
 
 predicate in_range #"i-cstrea.ads" 42 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = int__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type int____ref #"i-cstrea.ads" 42 0 0# =
  { mutable int____content "model_trace:" : int__ }
 
 function int____ref_2__projection #"i-cstrea.ads" 42 0 0# 
   (a : int____ref) : int__ =
  a.int____content
 
 meta "model_projection" function int____ref_2__projection
 
 meta "inline : no" function int____ref_2__projection
 
 val int____havoc #"i-cstrea.ads" 42 0 0# 
   (x : int____ref) : unit
  writes {x}

end

(* Module for axiomatizing type "long" defined at i-cstrea.ads:43, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__long
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long #"i-cstrea.ads" 43 0 0# 
 
 function first #"i-cstrea.ads" 43 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"i-cstrea.ads" 43 0 0# 
   : int =
  2147483647
 
 predicate in_range #"i-cstrea.ads" 43 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type long__ref #"i-cstrea.ads" 43 0 0# =
  { mutable long__content "model_trace:" : long }
 
 function long__ref_2__projection #"i-cstrea.ads" 43 0 0# 
   (a : long__ref) : long =
  a.long__content
 
 meta "model_projection" function long__ref_2__projection
 
 meta "inline : no" function long__ref_2__projection
 
 val long__havoc #"i-cstrea.ads" 43 0 0# 
   (x : long__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "size_t" defined at i-cstrea.ads:44, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__size_t
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32

 type size_t #"i-cstrea.ads" 44 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"i-cstrea.ads" 44 0 0# 
   : BV32.t
 
 function first #"i-cstrea.ads" 44 0 0# 
   : BV32.t =
  ( BV32.of_int 0 )
 
 function last #"i-cstrea.ads" 44 0 0# 
   : BV32.t =
  ( BV32.of_int 4294967295 )
 
 function first_int #"i-cstrea.ads" 44 0 0# 
   : int =
  0
 
 function last_int #"i-cstrea.ads" 44 0 0# 
   : int =
  4294967295
 
 predicate in_range #"i-cstrea.ads" 44 0 0# 
   (x : BV32.t)  =
  true
 
 predicate in_range_int #"i-cstrea.ads" 44 0 0# 
   (x : int)  =
  BV32.uint_in_range x
 
 clone export "ada__model".Static_Modular_32 with
 type t = size_t, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type size_t__ref #"i-cstrea.ads" 44 0 0# =
  { mutable size_t__content "model_trace:" : size_t }
 
 function size_t__ref_2__projection #"i-cstrea.ads" 44 0 0# 
   (a : size_t__ref) : size_t =
  a.size_t__content
 
 meta "model_projection" function size_t__ref_2__projection
 
 meta "inline : no" function size_t__ref_2__projection
 
 val size_t__havoc #"i-cstrea.ads" 44 0 0# 
   (x : size_t__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "ssize_t" defined at i-cstrea.ads:45, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__ssize_t
 use import "_gnatprove_standard".Main
 use import "int".Int

 type ssize_t #"i-cstrea.ads" 45 0 0# 
 
 function first #"i-cstrea.ads" 45 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"i-cstrea.ads" 45 0 0# 
   : int =
  2147483647
 
 predicate in_range #"i-cstrea.ads" 45 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = ssize_t, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type ssize_t__ref #"i-cstrea.ads" 45 0 0# =
  { mutable ssize_t__content "model_trace:" : ssize_t }
 
 function ssize_t__ref_2__projection #"i-cstrea.ads" 45 0 0# 
   (a : ssize_t__ref) : ssize_t =
  a.ssize_t__content
 
 meta "model_projection" function ssize_t__ref_2__projection
 
 meta "inline : no" function ssize_t__ref_2__projection
 
 val ssize_t__havoc #"i-cstrea.ads" 45 0 0# 
   (x : ssize_t__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "int64" defined at i-cstrea.ads:46, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__int64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type int64 #"i-cstrea.ads" 46 0 0# 
 
 function first #"i-cstrea.ads" 46 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"i-cstrea.ads" 46 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"i-cstrea.ads" 46 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = int64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type int64__ref #"i-cstrea.ads" 46 0 0# =
  { mutable int64__content "model_trace:" : int64 }
 
 function int64__ref_2__projection #"i-cstrea.ads" 46 0 0# 
   (a : int64__ref) : int64 =
  a.int64__content
 
 meta "model_projection" function int64__ref_2__projection
 
 meta "inline : no" function int64__ref_2__projection
 
 val int64__havoc #"i-cstrea.ads" 46 0 0# 
   (x : int64__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "voids" defined at i-cstrea.ads:47, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__voids
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32

 type voids #"i-cstrea.ads" 47 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"i-cstrea.ads" 47 0 0# 
   : BV32.t =
  ( BV32.of_int 0 )
 
 function first #"i-cstrea.ads" 47 0 0# 
   : BV32.t =
  ( BV32.of_int 0 )
 
 function last #"i-cstrea.ads" 47 0 0# 
   : BV32.t =
  ( BV32.of_int 4294967295 )
 
 function first_int #"i-cstrea.ads" 47 0 0# 
   : int =
  0
 
 function last_int #"i-cstrea.ads" 47 0 0# 
   : int =
  4294967295
 
 predicate in_range #"i-cstrea.ads" 47 0 0# 
   (x : BV32.t)  =
  ( (BV32.ule first x) /\ (BV32.ule x last) )
 
 predicate in_range_int #"i-cstrea.ads" 47 0 0# 
   (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Static_Modular_lt32 with
 type t = voids, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function attr__ATTRIBUTE_MODULUS = attr__ATTRIBUTE_MODULUS, 
 predicate in_range_int = in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type voids__ref #"i-cstrea.ads" 47 0 0# =
  { mutable voids__content "model_trace:" : voids }
 
 function voids__ref___projection #"i-cstrea.ads" 47 0 0# 
   (a : voids__ref) : voids =
  a.voids__content
 
 meta "model_projection" function voids__ref___projection
 
 meta "inline : no" function voids__ref___projection
 
 val voids__havoc #"i-cstrea.ads" 47 0 0# 
   (x : voids__ref) : unit
  writes {x}

end

(* Module for defining the constant "null_stream" defined at i-cstrea.ads:49, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__null_stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function null_stream #"i-cstrea.ads" 49 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 41 0 0# 
   : int

end

(* Module for defining the constant "eof" defined at i-cstrea.ads:56, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__eof
 use import "_gnatprove_standard".Main

 function eof #"i-cstrea.ads" 56 0 0# "model" "model_trace:9741" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 42 0 0# 
   : int

end

(* Module for defining the constant "iofbf" defined at i-cstrea.ads:59, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__iofbf
 use import "_gnatprove_standard".Main

 function iofbf #"i-cstrea.ads" 59 0 0# "model" "model_trace:9750" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 42 0 0# 
   : int

end

(* Module for defining the constant "iolbf" defined at i-cstrea.ads:60, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__iolbf
 use import "_gnatprove_standard".Main

 function iolbf #"i-cstrea.ads" 60 0 0# "model" "model_trace:9759" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 42 0 0# 
   : int

end

(* Module for defining the constant "ionbf" defined at i-cstrea.ads:61, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__ionbf
 use import "_gnatprove_standard".Main

 function ionbf #"i-cstrea.ads" 61 0 0# "model" "model_trace:9768" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 42 0 0# 
   : int

end

(* Module for defining the constant "l_tmpnam" defined at i-cstrea.ads:64, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__l_tmpnam
 use import "_gnatprove_standard".Main

 function l_tmpnam #"i-cstrea.ads" 64 0 0# "model" "model_trace:9777" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 42 0 0# 
   : int

end

(* Module for defining the constant "seek_cur" defined at i-cstrea.ads:67, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__seek_cur
 use import "_gnatprove_standard".Main

 function seek_cur #"i-cstrea.ads" 67 0 0# "model" "model_trace:9786" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 42 0 0# 
   : int

end

(* Module for defining the constant "seek_end" defined at i-cstrea.ads:68, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__seek_end
 use import "_gnatprove_standard".Main

 function seek_end #"i-cstrea.ads" 68 0 0# "model" "model_trace:9795" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 42 0 0# 
   : int

end

(* Module for defining the constant "seek_set" defined at i-cstrea.ads:69, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__seek_set
 use import "_gnatprove_standard".Main

 function seek_set #"i-cstrea.ads" 69 0 0# "model" "model_trace:9804" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 42 0 0# 
   : int

end

(* Module for possibly declaring a logic function for "stdin" defined at i-cstrea.ads:72, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__stdin
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function stdin #"i-cstrea.ads" 72 0 0# 
   (__void_param : unit) : BV32.t

end

(* Module for possibly declaring a logic function for "stdout" defined at i-cstrea.ads:73, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__stdout
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function stdout #"i-cstrea.ads" 73 0 0# 
   (__void_param : unit) : BV32.t

end

(* Module for possibly declaring a logic function for "stderr" defined at i-cstrea.ads:74, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__stderr
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function stderr #"i-cstrea.ads" 74 0 0# 
   (__void_param : unit) : BV32.t

end

(* Module for defining the constant "stream" defined at i-cstrea.ads:95, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__feof__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function stream #"i-cstrea.ads" 95 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at i-cstrea.ads:95, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__feof__stream__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "feof" defined at i-cstrea.ads:95, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__feof
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function feof #"i-cstrea.ads" 95 0 0# 
   (stream : BV32.t) : int

end

(* Module for defining the constant "stream" defined at i-cstrea.ads:97, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__ferror__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function stream #"i-cstrea.ads" 97 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at i-cstrea.ads:97, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__ferror__stream__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "ferror" defined at i-cstrea.ads:97, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__ferror
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function ferror #"i-cstrea.ads" 97 0 0# 
   (stream : BV32.t) : int

end

(* Module for defining the constant "stream" defined at i-cstrea.ads:106, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fileno__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function stream #"i-cstrea.ads" 106 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at i-cstrea.ads:106, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fileno__stream__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fileno" defined at i-cstrea.ads:106, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__fileno
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function fileno #"i-cstrea.ads" 106 0 0# 
   (stream : BV32.t) : int

end

(* Module for defining the constant "buffer" defined at i-cstrea.ads:129, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fread__buffer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function buffer #"i-cstrea.ads" 129 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 47 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "buffer" defined at i-cstrea.ads:129, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fread__buffer__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "size" defined at i-cstrea.ads:130, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fread__size
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function size #"i-cstrea.ads" 130 0 0# "model" "model_trace:10236" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "size" defined at i-cstrea.ads:130, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fread__size__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "count" defined at i-cstrea.ads:131, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fread__count
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function count #"i-cstrea.ads" 131 0 0# "model" "model_trace:10245" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "count" defined at i-cstrea.ads:131, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fread__count__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "stream" defined at i-cstrea.ads:132, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fread__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function stream #"i-cstrea.ads" 132 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at i-cstrea.ads:132, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fread__stream__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fread" defined at i-cstrea.ads:128, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__fread
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function fread #"i-cstrea.ads" 128 0 0# 
   (buffer : BV32.t) (size : BV32.t) (count : BV32.t) (stream : BV32.t) : BV32.t

end

(* Module for defining the constant "buffer" defined at i-cstrea.ads:135, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fread__2__buffer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function buffer #"i-cstrea.ads" 135 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 47 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "buffer" defined at i-cstrea.ads:135, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fread__2__buffer__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "index" defined at i-cstrea.ads:136, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fread__2__index
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function index #"i-cstrea.ads" 136 0 0# "model" "model_trace:10282" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "index" defined at i-cstrea.ads:136, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fread__2__index__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "size" defined at i-cstrea.ads:137, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fread__2__size
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function size #"i-cstrea.ads" 137 0 0# "model" "model_trace:10291" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "size" defined at i-cstrea.ads:137, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fread__2__size__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "count" defined at i-cstrea.ads:138, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fread__2__count
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function count #"i-cstrea.ads" 138 0 0# "model" "model_trace:10300" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "count" defined at i-cstrea.ads:138, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fread__2__count__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "stream" defined at i-cstrea.ads:139, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fread__2__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function stream #"i-cstrea.ads" 139 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at i-cstrea.ads:139, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fread__2__stream__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fread__2" defined at i-cstrea.ads:134, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__fread__2
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function fread__2 #"i-cstrea.ads" 134 0 0# 
   (buffer : BV32.t) (index : BV32.t) (size : BV32.t) (count : BV32.t) (stream : BV32.t) : BV32.t

end

(* Module for defining the constant "buffer" defined at i-cstrea.ads:172, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fwrite__buffer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function buffer #"i-cstrea.ads" 172 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 47 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "buffer" defined at i-cstrea.ads:172, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fwrite__buffer__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "size" defined at i-cstrea.ads:173, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fwrite__size
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function size #"i-cstrea.ads" 173 0 0# "model" "model_trace:10529" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "size" defined at i-cstrea.ads:173, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fwrite__size__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "count" defined at i-cstrea.ads:174, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fwrite__count
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function count #"i-cstrea.ads" 174 0 0# "model" "model_trace:10538" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "count" defined at i-cstrea.ads:174, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fwrite__count__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "stream" defined at i-cstrea.ads:175, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fwrite__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function stream #"i-cstrea.ads" 175 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at i-cstrea.ads:175, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fwrite__stream__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fwrite" defined at i-cstrea.ads:171, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__fwrite
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function fwrite #"i-cstrea.ads" 171 0 0# 
   (buffer : BV32.t) (size : BV32.t) (count : BV32.t) (stream : BV32.t) : BV32.t

end

(* Module for defining the constant "stream" defined at i-cstrea.ads:185, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__setvbuf__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function stream #"i-cstrea.ads" 185 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at i-cstrea.ads:185, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__setvbuf__stream__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "buffer" defined at i-cstrea.ads:186, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__setvbuf__buffer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function buffer #"i-cstrea.ads" 186 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 40 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "buffer" defined at i-cstrea.ads:186, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__setvbuf__buffer__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "mode" defined at i-cstrea.ads:187, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__setvbuf__mode
 use import "_gnatprove_standard".Main

 function mode #"i-cstrea.ads" 187 0 0# "model" "model_trace:10654" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 42 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "mode" defined at i-cstrea.ads:187, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__setvbuf__mode__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "size" defined at i-cstrea.ads:188, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__setvbuf__size
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function size #"i-cstrea.ads" 188 0 0# "model" "model_trace:10663" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "size" defined at i-cstrea.ads:188, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__setvbuf__size__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "setvbuf" defined at i-cstrea.ads:184, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__setvbuf
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function setvbuf #"i-cstrea.ads" 184 0 0# 
   (stream : BV32.t) (buffer : BV32.t) (mode : int) (size : BV32.t) : int

end

(* Module for defining the constant "name" defined at i-cstrea.ads:212, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__file_exists__name
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function name #"i-cstrea.ads" 212 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 40 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "name" defined at i-cstrea.ads:212, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__file_exists__name__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "file_exists" defined at i-cstrea.ads:212, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__file_exists
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function file_exists #"i-cstrea.ads" 212 0 0# 
   (name : BV32.t) : int

end

(* Module for defining the constant "handle" defined at i-cstrea.ads:215, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__is_regular_file__handle
 use import "_gnatprove_standard".Main

 function handle #"i-cstrea.ads" 215 0 0# "model" "model_trace:10796" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 42 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "handle" defined at i-cstrea.ads:215, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__is_regular_file__handle__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "is_regular_file" defined at i-cstrea.ads:215, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__is_regular_file
 use import "_gnatprove_standard".Main

 function is_regular_file #"i-cstrea.ads" 215 0 0# 
   (handle : int) : int

end

(* Module for defining the constant "handle" defined at i-cstrea.ads:223, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__set_binary_mode__handle
 use import "_gnatprove_standard".Main

 function handle #"i-cstrea.ads" 223 0 0# "model" "model_trace:10815" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 42 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "handle" defined at i-cstrea.ads:223, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__set_binary_mode__handle__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "handle" defined at i-cstrea.ads:224, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__set_text_mode__handle
 use import "_gnatprove_standard".Main

 function handle #"i-cstrea.ads" 224 0 0# "model" "model_trace:10833" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 42 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "handle" defined at i-cstrea.ads:224, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__set_text_mode__handle__axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "content_encoding" defined at i-cstrea.ads:230, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__content_encoding
 use import "_gnatprove_standard".Main
 use import "int".Int

 type content_encoding #"i-cstrea.ads" 230 0 0# 
 
 function first #"i-cstrea.ads" 230 0 0# 
   : int =
  0
 
 function last #"i-cstrea.ads" 230 0 0# 
   : int =
  5
 
 predicate in_range #"i-cstrea.ads" 230 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = content_encoding, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type content_encoding__ref #"i-cstrea.ads" 230 0 0# =
  { mutable content_encoding__content "model_trace:" : content_encoding }
 
 function content_encoding__ref___projection #"i-cstrea.ads" 230 0 0# 
   (a : content_encoding__ref) : content_encoding =
  a.content_encoding__content
 
 meta "model_projection" function content_encoding__ref___projection
 
 meta "inline : no" function content_encoding__ref___projection
 
 val content_encoding__havoc #"i-cstrea.ads" 230 0 0# 
   (x : content_encoding__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "text_content_encoding" defined at i-cstrea.ads:248, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__text_content_encoding
 use import "_gnatprove_standard".Main
 use import "int".Int

 type text_content_encoding #"i-cstrea.ads" 248 0 0# 
 
 function first #"i-cstrea.ads" 248 0 0# 
   : int =
  1
 
 function last #"i-cstrea.ads" 248 0 0# 
   : int =
  5
 
 predicate in_range #"i-cstrea.ads" 248 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = text_content_encoding, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type text_content_encoding__ref #"i-cstrea.ads" 248 0 0# =
  { mutable text_content_encoding__content "model_trace:" : text_content_encoding }
 
 function text_content_encoding__ref___projection #"i-cstrea.ads" 248 0 0# 
   (a : text_content_encoding__ref) : text_content_encoding =
  a.text_content_encoding__content
 
 meta "model_projection" function text_content_encoding__ref___projection
 
 meta "inline : no" function text_content_encoding__ref___projection
 
 val text_content_encoding__havoc #"i-cstrea.ads" 248 0 0# 
   (x : text_content_encoding__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "non_default_text_content_encoding" defined at i-cstrea.ads:251, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__non_default_text_content_encoding
 use import "_gnatprove_standard".Main
 use import "int".Int

 type non_default_text_content_encoding #"i-cstrea.ads" 251 0 0# 
 
 function first #"i-cstrea.ads" 251 0 0# 
   : int =
  2
 
 function last #"i-cstrea.ads" 251 0 0# 
   : int =
  5
 
 predicate in_range #"i-cstrea.ads" 251 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = non_default_text_content_encoding, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type non_default_text_content_encoding__ref #"i-cstrea.ads" 251 0 0# =
  { mutable non_default_text_content_encoding__content "model_trace:" : non_default_text_content_encoding }
 
 function non_default_text_content_encoding__ref___projection #"i-cstrea.ads" 251 0 0# 
   (a : non_default_text_content_encoding__ref) : non_default_text_content_encoding =
  a.non_default_text_content_encoding__content
 
 meta "model_projection" function non_default_text_content_encoding__ref___projection
 
 meta "inline : no" function non_default_text_content_encoding__ref___projection
 
 val non_default_text_content_encoding__havoc #"i-cstrea.ads" 251 0 0# 
   (x : non_default_text_content_encoding__ref) : unit
  writes {x}

end

(* Module for defining the constant "handle" defined at i-cstrea.ads:254, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__set_mode__handle
 use import "_gnatprove_standard".Main

 function handle #"i-cstrea.ads" 254 0 0# "model" "model_trace:10947" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 42 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "handle" defined at i-cstrea.ads:254, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__set_mode__handle__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "mode" defined at i-cstrea.ads:254, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__set_mode__mode
 use import "_gnatprove_standard".Main

 function mode #"i-cstrea.ads" 254 0 0# "model" "model_trace:10956" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 230 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "mode" defined at i-cstrea.ads:254, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__set_mode__mode__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "nam" defined at i-cstrea.ads:262, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__full_name__nam
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function nam #"i-cstrea.ads" 262 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 40 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "nam" defined at i-cstrea.ads:262, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__full_name__nam__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "buffer" defined at i-cstrea.ads:262, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__full_name__buffer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function buffer #"i-cstrea.ads" 262 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 40 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "buffer" defined at i-cstrea.ads:262, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__full_name__buffer__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "max_path_len" defined at i-cstrea.ads:270, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__max_path_len
 use import "_gnatprove_standard".Main

 function max_path_len #"i-cstrea.ads" 270 0 0# "model" "model_trace:10997" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module for axiomatizing type "file_mode" defined at s-ficobl.ads:63, created in Gnat2Why.Types.Translate_Type *)
module System__file_control_block__file_mode
 use import "_gnatprove_standard".Main
 use import "int".Int

 type file_mode #"s-ficobl.ads" 63 0 0# 
 
 function first #"s-ficobl.ads" 63 0 0# 
   : int =
  0
 
 function last #"s-ficobl.ads" 63 0 0# 
   : int =
  3
 
 predicate in_range #"s-ficobl.ads" 63 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = file_mode, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type file_mode__ref #"s-ficobl.ads" 63 0 0# =
  { mutable file_mode__content "model_trace:" : file_mode }
 
 function file_mode__ref___projection #"s-ficobl.ads" 63 0 0# 
   (a : file_mode__ref) : file_mode =
  a.file_mode__content
 
 meta "model_projection" function file_mode__ref___projection
 
 meta "inline : no" function file_mode__ref___projection
 
 val file_mode__havoc #"s-ficobl.ads" 63 0 0# 
   (x : file_mode__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "read_file_mode" defined at s-ficobl.ads:64, created in Gnat2Why.Types.Translate_Type *)
module System__file_control_block__read_file_mode
 use import "_gnatprove_standard".Main
 use import "int".Int

 type read_file_mode #"s-ficobl.ads" 64 0 0# 
 
 function first #"s-ficobl.ads" 64 0 0# 
   : int =
  0
 
 function last #"s-ficobl.ads" 64 0 0# 
   : int =
  1
 
 predicate in_range #"s-ficobl.ads" 64 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = read_file_mode, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type read_file_mode__ref #"s-ficobl.ads" 64 0 0# =
  { mutable read_file_mode__content "model_trace:" : read_file_mode }
 
 function read_file_mode__ref___projection #"s-ficobl.ads" 64 0 0# 
   (a : read_file_mode__ref) : read_file_mode =
  a.read_file_mode__content
 
 meta "model_projection" function read_file_mode__ref___projection
 
 meta "inline : no" function read_file_mode__ref___projection
 
 val read_file_mode__havoc #"s-ficobl.ads" 64 0 0# 
   (x : read_file_mode__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "shared_status_type" defined at s-ficobl.ads:69, created in Gnat2Why.Types.Translate_Type *)
module System__file_control_block__shared_status_type
 use import "_gnatprove_standard".Main
 use import "int".Int

 type shared_status_type #"s-ficobl.ads" 69 0 0# 
 
 function first #"s-ficobl.ads" 69 0 0# 
   : int =
  0
 
 function last #"s-ficobl.ads" 69 0 0# 
   : int =
  2
 
 predicate in_range #"s-ficobl.ads" 69 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = shared_status_type, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type shared_status_type__ref #"s-ficobl.ads" 69 0 0# =
  { mutable shared_status_type__content "model_trace:" : shared_status_type }
 
 function shared_status_type__ref___projection #"s-ficobl.ads" 69 0 0# 
   (a : shared_status_type__ref) : shared_status_type =
  a.shared_status_type__content
 
 meta "model_projection" function shared_status_type__ref___projection
 
 meta "inline : no" function shared_status_type__ref___projection
 
 val shared_status_type__havoc #"s-ficobl.ads" 69 0 0# 
   (x : shared_status_type__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Twc_encoding_methodB" defined at s-wchcon.ads:94, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__Twc_encoding_methodB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type twc_encoding_methodB #"s-wchcon.ads" 94 0 0# 
 
 function first #"s-wchcon.ads" 94 0 0# 
   : int =
  ( -128 )
 
 function last #"s-wchcon.ads" 94 0 0# 
   : int =
  127
 
 predicate in_range #"s-wchcon.ads" 94 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = twc_encoding_methodB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type twc_encoding_methodB__ref #"s-wchcon.ads" 94 0 0# =
  { mutable twc_encoding_methodB__content "model_trace:" : twc_encoding_methodB }
 
 function twc_encoding_methodB__ref___projection #"s-wchcon.ads" 94 0 0# 
   (a : twc_encoding_methodB__ref) : twc_encoding_methodB =
  a.twc_encoding_methodB__content
 
 meta "model_projection" function twc_encoding_methodB__ref___projection
 
 meta "inline : no" function twc_encoding_methodB__ref___projection
 
 val twc_encoding_methodB__havoc #"s-wchcon.ads" 94 0 0# 
   (x : twc_encoding_methodB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "wc_encoding_method" defined at s-wchcon.ads:94, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__wc_encoding_method
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wc_encoding_method #"s-wchcon.ads" 94 0 0# 
 
 function first #"s-wchcon.ads" 94 0 0# 
   : int =
  1
 
 function last #"s-wchcon.ads" 94 0 0# 
   : int =
  6
 
 predicate in_range #"s-wchcon.ads" 94 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wc_encoding_method, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type wc_encoding_method__ref #"s-wchcon.ads" 94 0 0# =
  { mutable wc_encoding_method__content "model_trace:" : wc_encoding_method }
 
 function wc_encoding_method__ref___projection #"s-wchcon.ads" 94 0 0# 
   (a : wc_encoding_method__ref) : wc_encoding_method =
  a.wc_encoding_method__content
 
 meta "model_projection" function wc_encoding_method__ref___projection
 
 meta "inline : no" function wc_encoding_method__ref___projection
 
 val wc_encoding_method__havoc #"s-wchcon.ads" 94 0 0# 
   (x : wc_encoding_method__ref) : unit
  writes {x}

end

(* Module for defining the constant "wcem_hex" defined at s-wchcon.ads:100, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__wcem_hex
 use import "_gnatprove_standard".Main

 function wcem_hex #"s-wchcon.ads" 100 0 0# "model" "model_trace:13251" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-wchcon.ads" 94 0 0# 
   : int

end

(* Module for defining the constant "wcem_upper" defined at s-wchcon.ads:108, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__wcem_upper
 use import "_gnatprove_standard".Main

 function wcem_upper #"s-wchcon.ads" 108 0 0# "model" "model_trace:13261" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-wchcon.ads" 94 0 0# 
   : int

end

(* Module for defining the constant "wcem_shift_jis" defined at s-wchcon.ads:117, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__wcem_shift_jis
 use import "_gnatprove_standard".Main

 function wcem_shift_jis #"s-wchcon.ads" 117 0 0# "model" "model_trace:13271" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-wchcon.ads" 94 0 0# 
   : int

end

(* Module for defining the constant "wcem_euc" defined at s-wchcon.ads:126, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__wcem_euc
 use import "_gnatprove_standard".Main

 function wcem_euc #"s-wchcon.ads" 126 0 0# "model" "model_trace:13281" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-wchcon.ads" 94 0 0# 
   : int

end

(* Module for defining the constant "wcem_utf8" defined at s-wchcon.ads:134, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__wcem_utf8
 use import "_gnatprove_standard".Main

 function wcem_utf8 #"s-wchcon.ads" 134 0 0# "model" "model_trace:13291" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-wchcon.ads" 94 0 0# 
   : int

end

(* Module for defining the constant "wcem_brackets" defined at s-wchcon.ads:156, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__wcem_brackets
 use import "_gnatprove_standard".Main

 function wcem_brackets #"s-wchcon.ads" 156 0 0# "model" "model_trace:13301" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-wchcon.ads" 94 0 0# 
   : int

end

(* Module for axiomatizing type "Twc_encoding_lettersB" defined at s-wchcon.ads:169, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__Twc_encoding_lettersB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character
 use        System__wch_con__Twc_encoding_methodB
 use        System__wch_con__wc_encoding_method

 type component_type #"s-wchcon.ads" 94 0 0# =
  Standard__character.character
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = System__wch_con__Twc_encoding_methodB.twc_encoding_methodB, 
 type index_rep_type = int, 
 function to_rep = System__wch_con__Twc_encoding_methodB.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = System__wch_con__Twc_encoding_methodB.in_range, 
 predicate index_dynamic_property = System__wch_con__wc_encoding_method.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type twc_encoding_lettersB #"s-wchcon.ads" 169 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type twc_encoding_lettersB__ref #"s-wchcon.ads" 169 0 0# =
  { mutable twc_encoding_lettersB__content "model_trace:" : twc_encoding_lettersB }
 
 function twc_encoding_lettersB__ref___projection #"s-wchcon.ads" 169 0 0# 
   (a : twc_encoding_lettersB__ref) : twc_encoding_lettersB =
  a.twc_encoding_lettersB__content
 
 meta "model_projection" function twc_encoding_lettersB__ref___projection
 
 meta "inline : no" function twc_encoding_lettersB__ref___projection
 
 val twc_encoding_lettersB__havoc #"s-wchcon.ads" 169 0 0# 
   (x : twc_encoding_lettersB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Twc_encoding_lettersT" defined at s-wchcon.ads:169, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__Twc_encoding_lettersT
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"s-wchcon.ads" 169 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  6
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T3s" defined at s-wchcon.ads:170, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__T3s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t3s #"s-wchcon.ads" 170 0 0# 
 
 function first #"s-wchcon.ads" 170 0 0# 
   : int =
  1
 
 function last #"s-wchcon.ads" 170 0 0# 
   : int =
  6
 
 predicate in_range #"s-wchcon.ads" 170 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t3s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type t3s__ref #"s-wchcon.ads" 170 0 0# =
  { mutable t3s__content "model_trace:" : t3s }
 
 function t3s__ref_2__projection #"s-wchcon.ads" 170 0 0# 
   (a : t3s__ref) : t3s =
  a.t3s__content
 
 meta "model_projection" function t3s__ref_2__projection
 
 meta "inline : no" function t3s__ref_2__projection
 
 val t3s__havoc #"s-wchcon.ads" 170 0 0# 
   (x : t3s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T4s" defined at s-wchcon.ads:170, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__T4s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"s-wchcon.ads" 170 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  6
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "wc_encoding_letters" defined at s-wchcon.ads:169, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__wc_encoding_letters
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function wc_encoding_letters #"s-wchcon.ads" 169 0 0# "model_projected" "model_trace:13311" 
   : Array__Int__Standard__character.map
 
 function attr__ATTRIBUTE_ADDRESS #"s-wchcon.ads" 169 0 0# 
   : int

end

(* Module for axiomatizing type "wc_esc_encoding_method" defined at s-wchcon.ads:180, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__wc_esc_encoding_method
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wc_esc_encoding_method #"s-wchcon.ads" 180 0 0# 
 
 function first #"s-wchcon.ads" 180 0 0# 
   : int =
  1
 
 function last #"s-wchcon.ads" 180 0 0# 
   : int =
  1
 
 predicate in_range #"s-wchcon.ads" 180 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wc_esc_encoding_method, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type wc_esc_encoding_method__ref #"s-wchcon.ads" 180 0 0# =
  { mutable wc_esc_encoding_method__content "model_trace:" : wc_esc_encoding_method }
 
 function wc_esc_encoding_method__ref___projection #"s-wchcon.ads" 180 0 0# 
   (a : wc_esc_encoding_method__ref) : wc_esc_encoding_method =
  a.wc_esc_encoding_method__content
 
 meta "model_projection" function wc_esc_encoding_method__ref___projection
 
 meta "inline : no" function wc_esc_encoding_method__ref___projection
 
 val wc_esc_encoding_method__havoc #"s-wchcon.ads" 180 0 0# 
   (x : wc_esc_encoding_method__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "wc_upper_half_encoding_method" defined at s-wchcon.ads:184, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__wc_upper_half_encoding_method
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wc_upper_half_encoding_method #"s-wchcon.ads" 184 0 0# 
 
 function first #"s-wchcon.ads" 184 0 0# 
   : int =
  2
 
 function last #"s-wchcon.ads" 184 0 0# 
   : int =
  5
 
 predicate in_range #"s-wchcon.ads" 184 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wc_upper_half_encoding_method, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type wc_upper_half_encoding_method__ref #"s-wchcon.ads" 184 0 0# =
  { mutable wc_upper_half_encoding_method__content "model_trace:" : wc_upper_half_encoding_method }
 
 function wc_upper_half_encoding_method__ref___projection #"s-wchcon.ads" 184 0 0# 
   (a : wc_upper_half_encoding_method__ref) : wc_upper_half_encoding_method =
  a.wc_upper_half_encoding_method__content
 
 meta "model_projection" function wc_upper_half_encoding_method__ref___projection
 
 meta "inline : no" function wc_upper_half_encoding_method__ref___projection
 
 val wc_upper_half_encoding_method__havoc #"s-wchcon.ads" 184 0 0# 
   (x : wc_upper_half_encoding_method__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "Twc_longest_sequencesB" defined at s-wchcon.ads:193, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 function index_I1_one #"s-wchcon.ads" 184 0 0# 
   : int =
  1
 
 type component_type #"s-wchcon.ads" 184 0 0# =
  Standard__natural.natural
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__natural.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "Twc_longest_sequencesB" defined at s-wchcon.ads:193, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__Twc_longest_sequencesB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural
 use        System__wch_con__Twc_encoding_methodB
 use        System__wch_con__wc_encoding_method
 use        Array__Int__Standard__natural

 type component_type #"system.ads" 1 0 0# =
  Standard__natural.natural
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__natural.map, 
 function array_bool_eq = Array__Int__Standard__natural.bool_eq, 
 type index_base_type = System__wch_con__Twc_encoding_methodB.twc_encoding_methodB, 
 type index_rep_type = int, 
 function to_rep = System__wch_con__Twc_encoding_methodB.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = System__wch_con__Twc_encoding_methodB.in_range, 
 predicate index_dynamic_property = System__wch_con__wc_encoding_method.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type twc_longest_sequencesB #"s-wchcon.ads" 193 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type twc_longest_sequencesB__ref #"s-wchcon.ads" 193 0 0# =
  { mutable twc_longest_sequencesB__content "model_trace:" : twc_longest_sequencesB }
 
 function twc_longest_sequencesB__ref___projection #"s-wchcon.ads" 193 0 0# 
   (a : twc_longest_sequencesB__ref) : twc_longest_sequencesB =
  a.twc_longest_sequencesB__content
 
 meta "model_projection" function twc_longest_sequencesB__ref___projection
 
 meta "inline : no" function twc_longest_sequencesB__ref___projection
 
 val twc_longest_sequencesB__havoc #"s-wchcon.ads" 193 0 0# 
   (x : twc_longest_sequencesB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Twc_longest_sequencesT" defined at s-wchcon.ads:193, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__Twc_longest_sequencesT
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural
 use        Array__Int__Standard__natural

 type component_type #"s-wchcon.ads" 193 0 0# =
  Standard__natural.natural
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  6
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__natural.map, 
 function array_bool_eq = Array__Int__Standard__natural.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T7s" defined at s-wchcon.ads:194, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__T7s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t7s #"s-wchcon.ads" 194 0 0# 
 
 function first #"s-wchcon.ads" 194 0 0# 
   : int =
  1
 
 function last #"s-wchcon.ads" 194 0 0# 
   : int =
  6
 
 predicate in_range #"s-wchcon.ads" 194 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t7s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type t7s__ref #"s-wchcon.ads" 194 0 0# =
  { mutable t7s__content "model_trace:" : t7s }
 
 function t7s__ref___projection #"s-wchcon.ads" 194 0 0# 
   (a : t7s__ref) : t7s =
  a.t7s__content
 
 meta "model_projection" function t7s__ref___projection
 
 meta "inline : no" function t7s__ref___projection
 
 val t7s__havoc #"s-wchcon.ads" 194 0 0# 
   (x : t7s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T8s" defined at s-wchcon.ads:194, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__T8s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural
 use        Array__Int__Standard__natural

 type component_type #"s-wchcon.ads" 194 0 0# =
  Standard__natural.natural
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  6
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__natural.map, 
 function array_bool_eq = Array__Int__Standard__natural.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "wc_longest_sequences" defined at s-wchcon.ads:193, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__wc_longest_sequences
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__natural

 function wc_longest_sequences #"s-wchcon.ads" 193 0 0# "model_projected" "model_trace:13379" 
   : Array__Int__Standard__natural.map
 
 function attr__ATTRIBUTE_ADDRESS #"s-wchcon.ads" 193 0 0# 
   : int

end

(* Module for defining the constant "c" defined at s-wchcon.ads:203, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__get_wc_encoding_method__c
 use import "_gnatprove_standard".Main

 function c #"s-wchcon.ads" 203 0 0# "model" "model_trace:13417" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "c" defined at s-wchcon.ads:203, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__wch_con__get_wc_encoding_method__c__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_wc_encoding_method" defined at s-wchcon.ads:203, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__wch_con__get_wc_encoding_method
 use import "_gnatprove_standard".Main

 function get_wc_encoding_method #"s-wchcon.ads" 203 0 0# 
   (c : int) : int

end

(* Module for defining the constant "s" defined at s-wchcon.ads:207, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__get_wc_encoding_method__2__s
 use import "_gnatprove_standard".Main
 use        Standard__string

 function s #"s-wchcon.ads" 207 0 0# "model_projected" "model_trace:13436" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s" defined at s-wchcon.ads:207, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__wch_con__get_wc_encoding_method__2__s__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_wc_encoding_method__2" defined at s-wchcon.ads:207, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__wch_con__get_wc_encoding_method__2
 use import "_gnatprove_standard".Main
 use        Standard__string

 function get_wc_encoding_method__2 #"s-wchcon.ads" 207 0 0# 
   (s : Standard__string.string) : int

end

(* Module for defining the constant "c" defined at s-wchcon.ads:213, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__is_start_of_encoding__c
 use import "_gnatprove_standard".Main

 function c #"s-wchcon.ads" 213 0 0# "model" "model_trace:13455" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "c" defined at s-wchcon.ads:213, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__wch_con__is_start_of_encoding__c__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "em" defined at s-wchcon.ads:214, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__is_start_of_encoding__em
 use import "_gnatprove_standard".Main

 function em #"s-wchcon.ads" 214 0 0# "model" "model_trace:13464" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-wchcon.ads" 94 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "em" defined at s-wchcon.ads:214, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__wch_con__is_start_of_encoding__em__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "is_start_of_encoding" defined at s-wchcon.ads:212, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__wch_con__is_start_of_encoding
 use import "_gnatprove_standard".Main

 function is_start_of_encoding #"s-wchcon.ads" 212 0 0# 
   (c : int) (em : int) : bool

end

(* Module for axiomatizing type "file_type" defined at a-textio.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__file_type
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type __split_fields #"s-wchcon.ads" 214 0 0# =
  { rec__main__ "model_trace:" : Main.__private }
 
 function __split_fields_2__projection #"s-wchcon.ads" 214 0 0# 
   (a : __split_fields) : Main.__private =
  a.rec__main__
 
 meta "model_projection" function __split_fields_2__projection
 
 meta "inline : no" function __split_fields_2__projection
 
 type __split_fields__ref #"s-wchcon.ads" 214 0 0# =
  { mutable __split_fields__content "model_trace:" : __split_fields }
 
 function __split_fields__ref_7__projection #"s-wchcon.ads" 214 0 0# 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref_7__projection
 
 meta "inline : no" function __split_fields__ref_7__projection
 
 val __split_fields__havoc #"s-wchcon.ads" 214 0 0# 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type file_type #"a-textio.ads" 52 0 0# =
  { __split_fields "model_trace:" : __split_fields }
 
 function file_type___projection #"a-textio.ads" 52 0 0# 
   (a : file_type) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function file_type___projection
 
 meta "inline : no" function file_type___projection
 
 function bool_eq #"a-textio.ads" 52 0 0# 
   (a : file_type) (b : file_type) : bool =
  (if ((a.__split_fields.rec__main__ = b.__split_fields.rec__main__)) then (
   True) else (
   False))
 
 function user_eq #"a-textio.ads" 52 0 0# 
   (a : file_type) (b : file_type) : bool
 
 function value__size #"a-textio.ads" 52 0 0# 
   : int
 
 function object__size #"a-textio.ads" 52 0 0# 
   (a : file_type) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a : file_type.
   ((object__size a) >= 0))
 
 function dummy #"a-textio.ads" 52 0 0# 
   : file_type
 
 type file_type__ref #"a-textio.ads" 52 0 0# =
  { mutable file_type__content "model_trace:" : file_type }
 
 function file_type__ref___projection #"a-textio.ads" 52 0 0# 
   (a : file_type__ref) : file_type =
  a.file_type__content
 
 meta "model_projection" function file_type__ref___projection
 
 meta "inline : no" function file_type__ref___projection
 
 val file_type__havoc #"a-textio.ads" 52 0 0# 
   (x : file_type__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "file_mode" defined at a-textio.ads:53, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__file_mode
 use import "_gnatprove_standard".Main
 use import "int".Int

 type file_mode #"a-textio.ads" 53 0 0# 
 
 function first #"a-textio.ads" 53 0 0# 
   : int =
  0
 
 function last #"a-textio.ads" 53 0 0# 
   : int =
  2
 
 predicate in_range #"a-textio.ads" 53 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = file_mode, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type file_mode__ref #"a-textio.ads" 53 0 0# =
  { mutable file_mode__content "model_trace:" : file_mode }
 
 function file_mode__ref_2__projection #"a-textio.ads" 53 0 0# 
   (a : file_mode__ref) : file_mode =
  a.file_mode__content
 
 meta "model_projection" function file_mode__ref_2__projection
 
 meta "inline : no" function file_mode__ref_2__projection
 
 val file_mode__havoc #"a-textio.ads" 53 0 0# 
   (x : file_mode__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TcountB" defined at a-textio.ads:64, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tcountB #"a-textio.ads" 64 0 0# 
 
 function first #"a-textio.ads" 64 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"a-textio.ads" 64 0 0# 
   : int =
  2147483647
 
 predicate in_range #"a-textio.ads" 64 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tcountB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type tcountB__ref #"a-textio.ads" 64 0 0# =
  { mutable tcountB__content "model_trace:" : tcountB }
 
 function tcountB__ref___projection #"a-textio.ads" 64 0 0# 
   (a : tcountB__ref) : tcountB =
  a.tcountB__content
 
 meta "model_projection" function tcountB__ref___projection
 
 meta "inline : no" function tcountB__ref___projection
 
 val tcountB__havoc #"a-textio.ads" 64 0 0# 
   (x : tcountB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "count" defined at a-textio.ads:64, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count
 use import "_gnatprove_standard".Main
 use import "int".Int

 type count #"a-textio.ads" 64 0 0# 
 
 function first #"a-textio.ads" 64 0 0# 
   : int =
  0
 
 function last #"a-textio.ads" 64 0 0# 
   : int =
  2147483647
 
 predicate in_range #"a-textio.ads" 64 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type count__ref #"a-textio.ads" 64 0 0# =
  { mutable count__content "model_trace:" : count }
 
 function count__ref___projection #"a-textio.ads" 64 0 0# 
   (a : count__ref) : count =
  a.count__content
 
 meta "model_projection" function count__ref___projection
 
 meta "inline : no" function count__ref___projection
 
 val count__havoc #"a-textio.ads" 64 0 0# 
   (x : count__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "positive_count" defined at a-textio.ads:68, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__positive_count
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive_count #"a-textio.ads" 68 0 0# 
 
 function first #"a-textio.ads" 68 0 0# 
   : int =
  1
 
 function last #"a-textio.ads" 68 0 0# 
   : int =
  2147483647
 
 predicate in_range #"a-textio.ads" 68 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive_count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type positive_count__ref #"a-textio.ads" 68 0 0# =
  { mutable positive_count__content "model_trace:" : positive_count }
 
 function positive_count__ref___projection #"a-textio.ads" 68 0 0# 
   (a : positive_count__ref) : positive_count =
  a.positive_count__content
 
 meta "model_projection" function positive_count__ref___projection
 
 meta "inline : no" function positive_count__ref___projection
 
 val positive_count__havoc #"a-textio.ads" 68 0 0# 
   (x : positive_count__ref) : unit
  writes {x}

end

(* Module for defining the constant "unbounded" defined at a-textio.ads:70, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__unbounded
 use import "_gnatprove_standard".Main

 function unbounded #"a-textio.ads" 70 0 0# "model" "model_trace:4996" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 64 0 0# 
   : int

end

(* Module for axiomatizing type "field" defined at a-textio.ads:73, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__field
 use import "_gnatprove_standard".Main
 use import "int".Int

 type field #"a-textio.ads" 73 0 0# 
 
 function first #"a-textio.ads" 73 0 0# 
   : int =
  0
 
 function last #"a-textio.ads" 73 0 0# 
   : int =
  255
 
 predicate in_range #"a-textio.ads" 73 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = field, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type field__ref #"a-textio.ads" 73 0 0# =
  { mutable field__content "model_trace:" : field }
 
 function field__ref___projection #"a-textio.ads" 73 0 0# 
   (a : field__ref) : field =
  a.field__content
 
 meta "model_projection" function field__ref___projection
 
 meta "inline : no" function field__ref___projection
 
 val field__havoc #"a-textio.ads" 73 0 0# 
   (x : field__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "number_base" defined at a-textio.ads:78, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__number_base
 use import "_gnatprove_standard".Main
 use import "int".Int

 type number_base #"a-textio.ads" 78 0 0# 
 
 function first #"a-textio.ads" 78 0 0# 
   : int =
  2
 
 function last #"a-textio.ads" 78 0 0# 
   : int =
  16
 
 predicate in_range #"a-textio.ads" 78 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = number_base, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type number_base__ref #"a-textio.ads" 78 0 0# =
  { mutable number_base__content "model_trace:" : number_base }
 
 function number_base__ref___projection #"a-textio.ads" 78 0 0# 
   (a : number_base__ref) : number_base =
  a.number_base__content
 
 meta "model_projection" function number_base__ref___projection
 
 meta "inline : no" function number_base__ref___projection
 
 val number_base__havoc #"a-textio.ads" 78 0 0# 
   (x : number_base__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "type_set" defined at a-textio.ads:80, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__type_set
 use import "_gnatprove_standard".Main
 use import "int".Int

 type type_set #"a-textio.ads" 80 0 0# 
 
 function first #"a-textio.ads" 80 0 0# 
   : int =
  0
 
 function last #"a-textio.ads" 80 0 0# 
   : int =
  1
 
 predicate in_range #"a-textio.ads" 80 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = type_set, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type type_set__ref #"a-textio.ads" 80 0 0# =
  { mutable type_set__content "model_trace:" : type_set }
 
 function type_set__ref___projection #"a-textio.ads" 80 0 0# 
   (a : type_set__ref) : type_set =
  a.type_set__content
 
 meta "model_projection" function type_set__ref___projection
 
 meta "inline : no" function type_set__ref___projection
 
 val type_set__havoc #"a-textio.ads" 80 0 0# 
   (x : type_set__ref) : unit
  writes {x}

end

(* Module for defining the constant "mode" defined at a-textio.ads:88, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__create__mode
 use import "_gnatprove_standard".Main

 function mode #"a-textio.ads" 88 0 0# "model" "model_trace:5074" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "mode" defined at a-textio.ads:88, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__create__mode__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "name" defined at a-textio.ads:89, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__create__name
 use import "_gnatprove_standard".Main
 use        Standard__string

 function name #"a-textio.ads" 89 0 0# "model_projected" "model_trace:5084" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "name" defined at a-textio.ads:89, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__create__name__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "form" defined at a-textio.ads:90, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__create__form
 use import "_gnatprove_standard".Main
 use        Standard__string

 function form #"a-textio.ads" 90 0 0# "model_projected" "model_trace:5094" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "form" defined at a-textio.ads:90, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__create__form__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "mode" defined at a-textio.ads:94, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__open__mode
 use import "_gnatprove_standard".Main

 function mode #"a-textio.ads" 94 0 0# "model" "model_trace:5122" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "mode" defined at a-textio.ads:94, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__open__mode__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "name" defined at a-textio.ads:95, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__open__name
 use import "_gnatprove_standard".Main
 use        Standard__string

 function name #"a-textio.ads" 95 0 0# "model_projected" "model_trace:5131" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "name" defined at a-textio.ads:95, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__open__name__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "form" defined at a-textio.ads:96, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__open__form
 use import "_gnatprove_standard".Main
 use        Standard__string

 function form #"a-textio.ads" 96 0 0# "model_projected" "model_trace:5140" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "form" defined at a-textio.ads:96, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__open__form__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "mode" defined at a-textio.ads:100, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__reset__mode
 use import "_gnatprove_standard".Main

 function mode #"a-textio.ads" 100 0 0# "model" "model_trace:5204" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "mode" defined at a-textio.ads:100, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__reset__mode__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:103, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__mode__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 103 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:103, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__mode__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "mode" defined at a-textio.ads:103, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__mode
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function mode #"a-textio.ads" 103 0 0# 
   (file : Ada__text_io__file_type.file_type) : int

end

(* Module for defining the constant "file" defined at a-textio.ads:104, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__name__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 104 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:104, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__name__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "name" defined at a-textio.ads:104, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__name
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Ada__text_io__file_type

 function name #"a-textio.ads" 104 0 0# 
   (file : Ada__text_io__file_type.file_type) : Standard__string.string

end

(* Module for defining the constant "file" defined at a-textio.ads:105, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__form__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 105 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:105, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__form__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "form" defined at a-textio.ads:105, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__form
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Ada__text_io__file_type

 function form #"a-textio.ads" 105 0 0# 
   (file : Ada__text_io__file_type.file_type) : Standard__string.string

end

(* Module for defining the constant "file" defined at a-textio.ads:107, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__is_open__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 107 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:107, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__is_open__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "is_open" defined at a-textio.ads:107, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__is_open
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function is_open #"a-textio.ads" 107 0 0# 
   (file : Ada__text_io__file_type.file_type) : bool

end

(* Module for defining the constant "file" defined at a-textio.ads:113, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_input__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 113 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:113, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_input__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:114, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_output__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 114 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:114, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_output__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:115, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_error__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 115 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:115, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_error__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "standard_input" defined at a-textio.ads:117, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__standard_input
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function standard_input #"a-textio.ads" 117 0 0# 
   (__void_param : unit) : Ada__text_io__file_type.file_type

end

(* Module for possibly declaring a logic function for "standard_output" defined at a-textio.ads:118, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__standard_output
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function standard_output #"a-textio.ads" 118 0 0# 
   (__void_param : unit) : Ada__text_io__file_type.file_type

end

(* Module for possibly declaring a logic function for "standard_error" defined at a-textio.ads:119, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__standard_error
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function standard_error #"a-textio.ads" 119 0 0# 
   (__void_param : unit) : Ada__text_io__file_type.file_type

end

(* Module for possibly declaring a logic function for "current_input" defined at a-textio.ads:121, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__current_input
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function current_input #"a-textio.ads" 121 0 0# 
   (__void_param : unit) : Ada__text_io__file_type.file_type

end

(* Module for possibly declaring a logic function for "current_output" defined at a-textio.ads:122, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__current_output
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function current_output #"a-textio.ads" 122 0 0# 
   (__void_param : unit) : Ada__text_io__file_type.file_type

end

(* Module for possibly declaring a logic function for "current_error" defined at a-textio.ads:123, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__current_error
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function current_error #"a-textio.ads" 123 0 0# 
   (__void_param : unit) : Ada__text_io__file_type.file_type

end

(* Module for defining the constant "file" defined at a-textio.ads:142, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__flush__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 142 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:142, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__flush__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:149, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_line_length__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 149 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:149, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_line_length__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "to" defined at a-textio.ads:149, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_line_length__to
 use import "_gnatprove_standard".Main

 function to__ #"a-textio.ads" 149 0 0# "model" "model_trace:5536" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 64 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "to" defined at a-textio.ads:149, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_line_length__to__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "to" defined at a-textio.ads:150, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_line_length__2__to
 use import "_gnatprove_standard".Main

 function to__ #"a-textio.ads" 150 0 0# "model" "model_trace:5554" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 64 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "to" defined at a-textio.ads:150, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_line_length__2__to__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:152, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_page_length__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 152 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:152, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_page_length__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "to" defined at a-textio.ads:152, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_page_length__to
 use import "_gnatprove_standard".Main

 function to__ #"a-textio.ads" 152 0 0# "model" "model_trace:5581" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 64 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "to" defined at a-textio.ads:152, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_page_length__to__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "to" defined at a-textio.ads:153, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_page_length__2__to
 use import "_gnatprove_standard".Main

 function to__ #"a-textio.ads" 153 0 0# "model" "model_trace:5599" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 64 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "to" defined at a-textio.ads:153, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_page_length__2__to__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:155, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__line_length__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 155 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:155, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__line_length__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "line_length" defined at a-textio.ads:155, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line_length
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function line_length #"a-textio.ads" 155 0 0# 
   (file : Ada__text_io__file_type.file_type) : int

end

(* Module for possibly declaring a logic function for "line_length__2" defined at a-textio.ads:156, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line_length__2
 use import "_gnatprove_standard".Main

 function line_length__2 #"a-textio.ads" 156 0 0# 
   (__void_param : unit) : int

end

(* Module for defining the constant "file" defined at a-textio.ads:158, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__page_length__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 158 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:158, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__page_length__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "page_length" defined at a-textio.ads:158, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page_length
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function page_length #"a-textio.ads" 158 0 0# 
   (file : Ada__text_io__file_type.file_type) : int

end

(* Module for possibly declaring a logic function for "page_length__2" defined at a-textio.ads:159, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page_length__2
 use import "_gnatprove_standard".Main

 function page_length__2 #"a-textio.ads" 159 0 0# 
   (__void_param : unit) : int

end

(* Module for defining the constant "file" defined at a-textio.ads:165, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__new_line__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 165 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:165, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__new_line__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "spacing" defined at a-textio.ads:165, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__new_line__spacing
 use import "_gnatprove_standard".Main

 function spacing #"a-textio.ads" 165 0 0# "model" "model_trace:5684" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 68 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "spacing" defined at a-textio.ads:165, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__new_line__spacing__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "spacing" defined at a-textio.ads:166, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__new_line__2__spacing
 use import "_gnatprove_standard".Main

 function spacing #"a-textio.ads" 166 0 0# "model" "model_trace:5703" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 68 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "spacing" defined at a-textio.ads:166, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__new_line__2__spacing__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:168, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__skip_line__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 168 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:168, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__skip_line__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "spacing" defined at a-textio.ads:168, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__skip_line__spacing
 use import "_gnatprove_standard".Main

 function spacing #"a-textio.ads" 168 0 0# "model" "model_trace:5731" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 68 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "spacing" defined at a-textio.ads:168, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__skip_line__spacing__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "spacing" defined at a-textio.ads:169, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__skip_line__2__spacing
 use import "_gnatprove_standard".Main

 function spacing #"a-textio.ads" 169 0 0# "model" "model_trace:5750" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 68 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "spacing" defined at a-textio.ads:169, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__skip_line__2__spacing__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:171, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__end_of_line__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 171 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:171, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__end_of_line__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "end_of_line" defined at a-textio.ads:171, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__end_of_line
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function end_of_line #"a-textio.ads" 171 0 0# 
   (file : Ada__text_io__file_type.file_type) : bool

end

(* Module for possibly declaring a logic function for "end_of_line__2" defined at a-textio.ads:172, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__end_of_line__2
 use import "_gnatprove_standard".Main

 function end_of_line__2 #"a-textio.ads" 172 0 0# 
   (__void_param : unit) : bool

end

(* Module for defining the constant "file" defined at a-textio.ads:174, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__new_page__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 174 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:174, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__new_page__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:177, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__skip_page__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 177 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:177, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__skip_page__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:180, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__end_of_page__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 180 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:180, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__end_of_page__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "end_of_page" defined at a-textio.ads:180, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__end_of_page
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function end_of_page #"a-textio.ads" 180 0 0# 
   (file : Ada__text_io__file_type.file_type) : bool

end

(* Module for possibly declaring a logic function for "end_of_page__2" defined at a-textio.ads:181, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__end_of_page__2
 use import "_gnatprove_standard".Main

 function end_of_page__2 #"a-textio.ads" 181 0 0# 
   (__void_param : unit) : bool

end

(* Module for defining the constant "file" defined at a-textio.ads:183, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__end_of_file__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 183 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:183, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__end_of_file__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "end_of_file" defined at a-textio.ads:183, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__end_of_file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function end_of_file #"a-textio.ads" 183 0 0# 
   (file : Ada__text_io__file_type.file_type) : bool

end

(* Module for possibly declaring a logic function for "end_of_file__2" defined at a-textio.ads:184, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__end_of_file__2
 use import "_gnatprove_standard".Main

 function end_of_file__2 #"a-textio.ads" 184 0 0# 
   (__void_param : unit) : bool

end

(* Module for defining the constant "file" defined at a-textio.ads:186, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_col__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 186 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:186, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_col__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "to" defined at a-textio.ads:186, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_col__to
 use import "_gnatprove_standard".Main

 function to__ #"a-textio.ads" 186 0 0# "model" "model_trace:5919" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 68 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "to" defined at a-textio.ads:186, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_col__to__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "to" defined at a-textio.ads:187, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_col__2__to
 use import "_gnatprove_standard".Main

 function to__ #"a-textio.ads" 187 0 0# "model" "model_trace:5937" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 68 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "to" defined at a-textio.ads:187, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_col__2__to__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:189, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_line__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 189 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:189, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_line__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "to" defined at a-textio.ads:189, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_line__to
 use import "_gnatprove_standard".Main

 function to__ #"a-textio.ads" 189 0 0# "model" "model_trace:5964" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 68 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "to" defined at a-textio.ads:189, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_line__to__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "to" defined at a-textio.ads:190, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_line__2__to
 use import "_gnatprove_standard".Main

 function to__ #"a-textio.ads" 190 0 0# "model" "model_trace:5982" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 68 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "to" defined at a-textio.ads:190, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_line__2__to__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:192, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__col__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 192 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:192, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__col__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "col" defined at a-textio.ads:192, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__col
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function col #"a-textio.ads" 192 0 0# 
   (file : Ada__text_io__file_type.file_type) : int

end

(* Module for possibly declaring a logic function for "col__2" defined at a-textio.ads:193, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__col__2
 use import "_gnatprove_standard".Main

 function col__2 #"a-textio.ads" 193 0 0# 
   (__void_param : unit) : int

end

(* Module for defining the constant "file" defined at a-textio.ads:195, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__line__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 195 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:195, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__line__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "line" defined at a-textio.ads:195, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function line #"a-textio.ads" 195 0 0# 
   (file : Ada__text_io__file_type.file_type) : int

end

(* Module for possibly declaring a logic function for "line__2" defined at a-textio.ads:196, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line__2
 use import "_gnatprove_standard".Main

 function line__2 #"a-textio.ads" 196 0 0# 
   (__void_param : unit) : int

end

(* Module for defining the constant "file" defined at a-textio.ads:198, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__page__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 198 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:198, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__page__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "page" defined at a-textio.ads:198, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function page #"a-textio.ads" 198 0 0# 
   (file : Ada__text_io__file_type.file_type) : int

end

(* Module for possibly declaring a logic function for "page__2" defined at a-textio.ads:199, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page__2
 use import "_gnatprove_standard".Main

 function page__2 #"a-textio.ads" 199 0 0# 
   (__void_param : unit) : int

end

(* Module for defining the constant "file" defined at a-textio.ads:205, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__get__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 205 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:205, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:207, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 207 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:207, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at a-textio.ads:207, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put__item
 use import "_gnatprove_standard".Main

 function item #"a-textio.ads" 207 0 0# "model" "model_trace:6141" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:207, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put__item__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at a-textio.ads:208, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put__2__item
 use import "_gnatprove_standard".Main

 function item #"a-textio.ads" 208 0 0# "model" "model_trace:6159" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:208, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put__2__item__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:211, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__look_ahead__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 211 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:211, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__look_ahead__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:220, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__get_immediate__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 220 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:220, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_immediate__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:227, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__get_immediate__3__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 227 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:227, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_immediate__3__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:239, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__get__3__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 239 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:239, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get__3__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:241, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put__3__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 241 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:241, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put__3__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at a-textio.ads:241, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put__3__item
 use import "_gnatprove_standard".Main
 use        Standard__string

 function item #"a-textio.ads" 241 0 0# "model_projected" "model_trace:6402" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:241, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put__3__item__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at a-textio.ads:242, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put__4__item
 use import "_gnatprove_standard".Main
 use        Standard__string

 function item #"a-textio.ads" 242 0 0# "model_projected" "model_trace:6420" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:242, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put__4__item__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:245, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__get_line__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 245 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:245, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:253, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__get_line__3__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 253 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:253, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__3__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_line__3" defined at a-textio.ads:253, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get_line__3
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Ada__text_io__file_type

 function get_line__3 #"a-textio.ads" 253 0 0# 
   (file : Ada__text_io__file_type.file_type) : Standard__string.string

end

(* Module for possibly declaring a logic function for "get_line__4" defined at a-textio.ads:256, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get_line__4
 use import "_gnatprove_standard".Main
 use        Standard__string

 function get_line__4 #"a-textio.ads" 256 0 0# 
   (__void_param : unit) : Standard__string.string

end

(* Module for defining the constant "file" defined at a-textio.ads:260, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put_line__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 260 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:260, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put_line__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at a-textio.ads:261, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put_line__item
 use import "_gnatprove_standard".Main
 use        Standard__string

 function item #"a-textio.ads" 261 0 0# "model_projected" "model_trace:6547" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:261, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put_line__item__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at a-textio.ads:264, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put_line__2__item
 use import "_gnatprove_standard".Main
 use        Standard__string

 function item #"a-textio.ads" 264 0 0# "model_projected" "model_trace:6565" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:264, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put_line__2__item__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at a-textio.ads:439, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__write__2__item
 use import "_gnatprove_standard".Main
 use        Ada__streams__stream_element_array

 function item #"a-textio.ads" 439 0 0# "model_projected" "model_trace:7056" 
   : Ada__streams__stream_element_array.stream_element_array
 
 function attr__ATTRIBUTE_ADDRESS #"a-stream.ads" 54 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:439, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__write__2__item__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "eof_char" defined at a-textio.ads:460, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__eof_char
 use import "_gnatprove_standard".Main

 function eof_char #"a-textio.ads" 460 0 0# 
   (__void_param : unit) : int

end
(* Module for defining a ref holding the value of variable "pump_r" defined at pump.ads:33, created in Gnat2Why.Decls.Translate_Variable *)
module Pump__set_fuel_price__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 val pump_r__split_fields #"pump.ads" 33 0 0# "model_projected" "model_trace:3193"  : Pump__pump.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:33, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__set_fuel_price__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pump_r" defined at pump.ads:34, created in Gnat2Why.Decls.Translate_Variable *)
module Pump__set_pump_state__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 val pump_r__split_fields #"pump.ads" 34 0 0# "model_projected" "model_trace:3220"  : Pump__pump.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__set_pump_state__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pump_r" defined at pump.ads:35, created in Gnat2Why.Decls.Translate_Variable *)
module Pump__set_pumped__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 val pump_r__split_fields #"pump.ads" 35 0 0# "model_projected" "model_trace:3247"  : Pump__pump.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__set_pumped__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pump_r" defined at pump.ads:36, created in Gnat2Why.Decls.Translate_Variable *)
module Pump__set_pump_nozzle_state__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 val pump_r__split_fields #"pump.ads" 36 0 0# "model_projected" "model_trace:3274"  : Pump__pump.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:36, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__set_pump_nozzle_state__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pump_r" defined at pump.ads:38, created in Gnat2Why.Decls.Translate_Variable *)
module Pump__append_reservoir__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 val pump_r__split_fields #"pump.ads" 38 0 0# "model_projected" "model_trace:3301"  : Pump__pump.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:38, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__append_reservoir__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pump_r" defined at pump.ads:40, created in Gnat2Why.Decls.Translate_Variable *)
module Pump__set_reservoir_size__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 val pump_r__split_fields #"pump.ads" 40 0 0# "model_projected" "model_trace:3328"  : Pump__pump.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:40, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__set_reservoir_size__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pump_r" defined at pump.ads:42, created in Gnat2Why.Decls.Translate_Variable *)
module Pump__remove_petrol_reservoir__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 val pump_r__split_fields #"pump.ads" 42 0 0# "model_projected" "model_trace:3355"  : Pump__pump.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:42, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__remove_petrol_reservoir__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pumpunit" defined at pump_unit.ads:43, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__set_is_using__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 val pumpunit__split_fields #"pump_unit.ads" 43 0 0# "model_projected" "model_trace:3935"  : Pump_unit__pump_unit.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:43, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__set_is_using__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pumpunit" defined at pump_unit.ads:47, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__set_is_paid__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 val pumpunit__split_fields #"pump_unit.ads" 47 0 0# "model_projected" "model_trace:3981"  : Pump_unit__pump_unit.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:47, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__set_is_paid__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pumpunit" defined at pump_unit.ads:48, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__set_to_pay__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 val pumpunit__split_fields #"pump_unit.ads" 48 0 0# "model_projected" "model_trace:3999"  : Pump_unit__pump_unit.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:48, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__set_to_pay__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pumpunit" defined at pump_unit.ads:49, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__set_unit_id__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 val pumpunit__split_fields #"pump_unit.ads" 49 0 0# "model_projected" "model_trace:4028"  : Pump_unit__pump_unit.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:49, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__set_unit_id__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pumpunit" defined at pump_unit.ads:50, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__set_pumped__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 val pumpunit__split_fields #"pump_unit.ads" 50 0 0# "model_projected" "model_trace:4055"  : Pump_unit__pump_unit.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:50, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__set_pumped__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pumpunit" defined at pump_unit.ads:51, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__set_pump_active_state__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 val pumpunit__split_fields #"pump_unit.ads" 51 0 0# "model_projected" "model_trace:4084"  : Pump_unit__pump_unit.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:51, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__set_pump_active_state__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pumpunit" defined at pump_unit.ads:52, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__set_pump_nozzle_state__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 val pumpunit__split_fields #"pump_unit.ads" 52 0 0# "model_projected" "model_trace:4124"  : Pump_unit__pump_unit.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:52, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__set_pump_nozzle_state__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pumpunit" defined at pump_unit.ads:54, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__add_pump__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 val pumpunit__split_fields #"pump_unit.ads" 54 0 0# "model_projected" "model_trace:4164"  : Pump_unit__pump_unit.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:54, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__add_pump__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pump_r" defined at pump_unit.ads:54, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__add_pump__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 val pump_r__split_fields #"pump_unit.ads" 54 0 0# "model_projected" "model_trace:4173"  : Pump__pump.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump_unit.ads:54, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__add_pump__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pumpunit" defined at pump_unit.ads:56, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__left_nozzle__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 val pumpunit__split_fields #"pump_unit.ads" 56 0 0# "model_projected" "model_trace:4204"  : Pump_unit__pump_unit.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:56, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__left_nozzle__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pump_r" defined at pump_unit.ads:56, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__left_nozzle__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 val pump_r__split_fields #"pump_unit.ads" 56 0 0# "model_projected" "model_trace:4213"  : Pump__pump.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump_unit.ads:56, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__left_nozzle__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pumpunit" defined at pump_unit.ads:61, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__return_nozzle__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 val pumpunit__split_fields #"pump_unit.ads" 61 0 0# "model_projected" "model_trace:4282"  : Pump_unit__pump_unit.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:61, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__return_nozzle__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pump_r" defined at pump_unit.ads:61, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__return_nozzle__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 val pump_r__split_fields #"pump_unit.ads" 61 0 0# "model_projected" "model_trace:4291"  : Pump__pump.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump_unit.ads:61, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__return_nozzle__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pumpunit" defined at pump_unit.ads:70, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__start_pumping__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 val pumpunit__split_fields #"pump_unit.ads" 70 0 0# "model_projected" "model_trace:4370"  : Pump_unit__pump_unit.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:70, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__start_pumping__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pump_r" defined at pump_unit.ads:70, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__start_pumping__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 val pump_r__split_fields #"pump_unit.ads" 70 0 0# "model_projected" "model_trace:4379"  : Pump__pump.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump_unit.ads:70, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__start_pumping__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "car_tank_space" defined at pump_unit.ads:70, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__start_pumping__car_tank_space
 use import "_gnatprove_standard".Main
 use        Pump__float_number

 val car_tank_space #"pump_unit.ads" 70 0 0#  : Pump__float_number.float_number__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 6 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "car_tank_space" defined at pump_unit.ads:70, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__start_pumping__car_tank_space__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pumpunit" defined at pump_unit.ads:75, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__stop_pumping__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 val pumpunit__split_fields #"pump_unit.ads" 75 0 0# "model_projected" "model_trace:4459"  : Pump_unit__pump_unit.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:75, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__stop_pumping__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pump_r" defined at pump_unit.ads:75, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__stop_pumping__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 val pump_r__split_fields #"pump_unit.ads" 75 0 0# "model_projected" "model_trace:4468"  : Pump__pump.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump_unit.ads:75, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__stop_pumping__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "cashregister" defined at cash_register.ads:29, created in Gnat2Why.Decls.Translate_Variable *)
module Cash_register__cashregister
 use import "_gnatprove_standard".Main
 use        Cash_register__cash_register

 val cashregister__split_fields #"cash_register.ads" 29 0 0# "model_projected" "model_trace:4639"  : Cash_register__cash_register.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"cash_register.ads" 24 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "cashregister" defined at cash_register.ads:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Cash_register__cashregister__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pumpunit" defined at cash_register.ads:32, created in Gnat2Why.Decls.Translate_Variable *)
module Cash_register__payfuel__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 val pumpunit__split_fields #"cash_register.ads" 32 0 0# "model_projected" "model_trace:4655"  : Pump_unit__pump_unit.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at cash_register.ads:32, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Cash_register__payfuel__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pump_r" defined at cash_register.ads:32, created in Gnat2Why.Decls.Translate_Variable *)
module Cash_register__payfuel__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 val pump_r__split_fields #"cash_register.ads" 32 0 0# "model_projected" "model_trace:4666"  : Pump__pump.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at cash_register.ads:32, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Cash_register__payfuel__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "stream" defined at a-stream.ads:58, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__streams__read__stream
 use import "_gnatprove_standard".Main
 use        Ada__streams__root_stream_type

 val stream__split_fields #"a-stream.ads" 58 0 0# "model_projected" "model_trace:7364"  : Ada__streams__root_stream_type.__split_fields__ref 
 
 function stream__attr__tag #"a-stream.ads" 58 0 0# 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-stream.ads" 58 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at a-stream.ads:58, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__streams__read__stream__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-stream.ads:59, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__streams__read__item
 use import "_gnatprove_standard".Main
 use        Ada__streams__Tstream_element_offsetB
 use        Array__Int__Ada__streams__stream_element

 val item #"a-stream.ads" 59 0 0# "model_projected" "model_trace:7373"  : Array__Int__Ada__streams__stream_element.map__ref 
 
 function item__first #"a-stream.ads" 59 0 0# "model_projected" "model_trace:7373'First" 
   : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB
 
 function item__last #"a-stream.ads" 59 0 0# "model_projected" "model_trace:7373'Last" 
   : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB
 
 function attr__ATTRIBUTE_ADDRESS #"a-stream.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-stream.ads:59, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__streams__read__item__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "last" defined at a-stream.ads:60, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__streams__read__last
 use import "_gnatprove_standard".Main

 val last #"a-stream.ads" 60 0 0# "model" "model_trace:7382"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-stream.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "last" defined at a-stream.ads:60, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__streams__read__last__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "stream" defined at a-stream.ads:64, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__streams__write__stream
 use import "_gnatprove_standard".Main
 use        Ada__streams__root_stream_type

 val stream__split_fields #"a-stream.ads" 64 0 0# "model_projected" "model_trace:7400"  : Ada__streams__root_stream_type.__split_fields__ref 
 
 function stream__attr__tag #"a-stream.ads" 64 0 0# 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-stream.ads" 64 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at a-stream.ads:64, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__streams__write__stream__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "v" defined at a-stream.ads:78, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__streams__read_sea__v
 use import "_gnatprove_standard".Main
 use        Ada__streams__Tstream_element_offsetB
 use        Array__Int__Ada__streams__stream_element

 val v #"a-stream.ads" 78 0 0# "model_projected" "model_trace:7449"  : Array__Int__Ada__streams__stream_element.map__ref 
 
 function v__first #"a-stream.ads" 78 0 0# "model_projected" "model_trace:7449'First" 
   : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB
 
 function v__last #"a-stream.ads" 78 0 0# "model_projected" "model_trace:7449'Last" 
   : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB
 
 function attr__ATTRIBUTE_ADDRESS #"a-stream.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "v" defined at a-stream.ads:78, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__streams__read_sea__v__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "v" defined at a-stream.ads:84, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__streams__stream_element_arraySR__v
 use import "_gnatprove_standard".Main
 use        Ada__streams__Tstream_element_offsetB
 use        Array__Int__Ada__streams__stream_element

 val v #"a-stream.ads" 84 0 0#  : Array__Int__Ada__streams__stream_element.map__ref 
 
 function v__first #"a-stream.ads" 84 0 0# 
   : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB
 
 function v__last #"a-stream.ads" 84 0 0# 
   : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB
 
 function attr__ATTRIBUTE_ADDRESS #"a-stream.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "v" defined at a-stream.ads:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__streams__stream_element_arraySR__v__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "file" defined at a-textio.ads:87, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__create__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val file #"a-textio.ads" 87 0 0#  : Ada__text_io__file_type.file_type__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:87, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__create__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "file" defined at a-textio.ads:93, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__open__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val file #"a-textio.ads" 93 0 0#  : Ada__text_io__file_type.file_type__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:93, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__open__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "file" defined at a-textio.ads:98, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__close__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val file #"a-textio.ads" 98 0 0#  : Ada__text_io__file_type.file_type__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:98, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__close__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "file" defined at a-textio.ads:99, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__delete__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val file #"a-textio.ads" 99 0 0#  : Ada__text_io__file_type.file_type__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:99, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__delete__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "file" defined at a-textio.ads:100, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__reset__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val file #"a-textio.ads" 100 0 0#  : Ada__text_io__file_type.file_type__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:100, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__reset__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "file" defined at a-textio.ads:101, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__reset__2__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val file #"a-textio.ads" 101 0 0#  : Ada__text_io__file_type.file_type__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:101, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__reset__2__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:205, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get__item
 use import "_gnatprove_standard".Main

 val item #"a-textio.ads" 205 0 0# "model" "model_trace:6096"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:205, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get__item__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:206, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get__2__item
 use import "_gnatprove_standard".Main

 val item #"a-textio.ads" 206 0 0# "model" "model_trace:6114"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:206, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get__2__item__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:212, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__look_ahead__item
 use import "_gnatprove_standard".Main

 val item #"a-textio.ads" 212 0 0# "model" "model_trace:6186"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:212, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__look_ahead__item__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "end_of_line" defined at a-textio.ads:213, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__look_ahead__end_of_line
 use import "_gnatprove_standard".Main

 val end_of_line #"a-textio.ads" 213 0 0# "model" "model_trace:6195"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 213 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "end_of_line" defined at a-textio.ads:213, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__look_ahead__end_of_line__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:216, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__look_ahead__2__item
 use import "_gnatprove_standard".Main

 val item #"a-textio.ads" 216 0 0# "model" "model_trace:6213"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:216, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__look_ahead__2__item__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "end_of_line" defined at a-textio.ads:217, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__look_ahead__2__end_of_line
 use import "_gnatprove_standard".Main

 val end_of_line #"a-textio.ads" 217 0 0# "model" "model_trace:6222"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 217 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "end_of_line" defined at a-textio.ads:217, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__look_ahead__2__end_of_line__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:221, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_immediate__item
 use import "_gnatprove_standard".Main

 val item #"a-textio.ads" 221 0 0# "model" "model_trace:6249"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:221, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_immediate__item__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:224, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_immediate__2__item
 use import "_gnatprove_standard".Main

 val item #"a-textio.ads" 224 0 0# "model" "model_trace:6267"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:224, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_immediate__2__item__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:228, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_immediate__3__item
 use import "_gnatprove_standard".Main

 val item #"a-textio.ads" 228 0 0# "model" "model_trace:6294"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:228, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_immediate__3__item__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "available" defined at a-textio.ads:229, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_immediate__3__available
 use import "_gnatprove_standard".Main

 val available #"a-textio.ads" 229 0 0# "model" "model_trace:6303"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 229 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "available" defined at a-textio.ads:229, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_immediate__3__available__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:232, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_immediate__4__item
 use import "_gnatprove_standard".Main

 val item #"a-textio.ads" 232 0 0# "model" "model_trace:6321"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:232, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_immediate__4__item__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "available" defined at a-textio.ads:233, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_immediate__4__available
 use import "_gnatprove_standard".Main

 val available #"a-textio.ads" 233 0 0# "model" "model_trace:6330"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 233 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "available" defined at a-textio.ads:233, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_immediate__4__available__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:239, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get__3__item
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Standard__character

 val item #"a-textio.ads" 239 0 0# "model_projected" "model_trace:6357"  : Array__Int__Standard__character.map__ref 
 
 function item__first #"a-textio.ads" 239 0 0# "model_projected" "model_trace:6357'First" 
   : Standard__integer.integer
 
 function item__last #"a-textio.ads" 239 0 0# "model_projected" "model_trace:6357'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:239, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get__3__item__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:240, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get__4__item
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Standard__character

 val item #"a-textio.ads" 240 0 0# "model_projected" "model_trace:6375"  : Array__Int__Standard__character.map__ref 
 
 function item__first #"a-textio.ads" 240 0 0# "model_projected" "model_trace:6375'First" 
   : Standard__integer.integer
 
 function item__last #"a-textio.ads" 240 0 0# "model_projected" "model_trace:6375'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:240, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get__4__item__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:246, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_line__item
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Standard__character

 val item #"a-textio.ads" 246 0 0# "model_projected" "model_trace:6447"  : Array__Int__Standard__character.map__ref 
 
 function item__first #"a-textio.ads" 246 0 0# "model_projected" "model_trace:6447'First" 
   : Standard__integer.integer
 
 function item__last #"a-textio.ads" 246 0 0# "model_projected" "model_trace:6447'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:246, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__item__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "last" defined at a-textio.ads:247, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_line__last
 use import "_gnatprove_standard".Main

 val last #"a-textio.ads" 247 0 0# "model" "model_trace:6456"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "last" defined at a-textio.ads:247, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__last__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:250, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_line__2__item
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Standard__character

 val item #"a-textio.ads" 250 0 0# "model_projected" "model_trace:6474"  : Array__Int__Standard__character.map__ref 
 
 function item__first #"a-textio.ads" 250 0 0# "model_projected" "model_trace:6474'First" 
   : Standard__integer.integer
 
 function item__last #"a-textio.ads" 250 0 0# "model_projected" "model_trace:6474'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:250, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__2__item__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "last" defined at a-textio.ads:251, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_line__2__last
 use import "_gnatprove_standard".Main

 val last #"a-textio.ads" 251 0 0# "model" "model_trace:6483"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "last" defined at a-textio.ads:251, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__2__last__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "default_wcem" defined at a-textio.ads:362, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__default_wcem
 use import "_gnatprove_standard".Main

 val default_wcem #"a-textio.ads" 362 0 0# "model" "model_trace:6750"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"s-wchcon.ads" 94 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "default_wcem" defined at a-textio.ads:362, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__default_wcem__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "file" defined at a-textio.ads:432, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__read__2__file
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 val file #"a-textio.ads" 432 0 0#  : Main.__private__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 432 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:432, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__read__2__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:433, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__read__2__item
 use import "_gnatprove_standard".Main
 use        Ada__streams__Tstream_element_offsetB
 use        Array__Int__Ada__streams__stream_element

 val item #"a-textio.ads" 433 0 0# "model_projected" "model_trace:7012"  : Array__Int__Ada__streams__stream_element.map__ref 
 
 function item__first #"a-textio.ads" 433 0 0# "model_projected" "model_trace:7012'First" 
   : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB
 
 function item__last #"a-textio.ads" 433 0 0# "model_projected" "model_trace:7012'Last" 
   : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB
 
 function attr__ATTRIBUTE_ADDRESS #"a-stream.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:433, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__read__2__item__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "last" defined at a-textio.ads:434, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__read__2__last
 use import "_gnatprove_standard".Main

 val last #"a-textio.ads" 434 0 0# "model" "model_trace:7025"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-stream.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "last" defined at a-textio.ads:434, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__read__2__last__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "file" defined at a-textio.ads:438, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__write__2__file
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 val file #"a-textio.ads" 438 0 0#  : Main.__private__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 438 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:438, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__write__2__file__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "standard_in_afcb" defined at a-textio.ads:446, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__standard_in_afcb
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 val standard_in_afcb #"a-textio.ads" 446 0 0#  : Main.__private__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 446 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "standard_in_afcb" defined at a-textio.ads:446, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__standard_in_afcb__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "standard_out_afcb" defined at a-textio.ads:447, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__standard_out_afcb
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 val standard_out_afcb #"a-textio.ads" 447 0 0#  : Main.__private__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 447 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "standard_out_afcb" defined at a-textio.ads:447, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__standard_out_afcb__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "standard_err_afcb" defined at a-textio.ads:448, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__standard_err_afcb
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 val standard_err_afcb #"a-textio.ads" 448 0 0#  : Main.__private__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 448 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "standard_err_afcb" defined at a-textio.ads:448, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__standard_err_afcb__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "standard_in" defined at a-textio.ads:450, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__standard_in
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 val standard_in #"a-textio.ads" 450 0 0#  : Main.__private__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 450 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "standard_in" defined at a-textio.ads:450, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__standard_in__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "standard_out" defined at a-textio.ads:451, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__standard_out
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 val standard_out #"a-textio.ads" 451 0 0#  : Main.__private__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 451 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "standard_out" defined at a-textio.ads:451, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__standard_out__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "standard_err" defined at a-textio.ads:452, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__standard_err
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 val standard_err #"a-textio.ads" 452 0 0#  : Main.__private__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 452 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "standard_err" defined at a-textio.ads:452, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__standard_err__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "current_in" defined at a-textio.ads:455, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__current_in
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 val current_in #"a-textio.ads" 455 0 0#  : Main.__private__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 455 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "current_in" defined at a-textio.ads:455, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__current_in__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "current_out" defined at a-textio.ads:456, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__current_out
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 val current_out #"a-textio.ads" 456 0 0#  : Main.__private__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 456 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "current_out" defined at a-textio.ads:456, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__current_out__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "current_err" defined at a-textio.ads:457, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__current_err
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 val current_err #"a-textio.ads" 457 0 0#  : Main.__private__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 457 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "current_err" defined at a-textio.ads:457, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__current_err__axiom
 use import "_gnatprove_standard".Main


end

(* Module declaring the external object "main__f_u91," created in Gnat2Why.Decls.Translate_External_Object *)
module Main__f_u91
 use import "ref".Ref
 use import "_gnatprove_standard".Main

 val f_u91 #"a-textio.ads" 457 0 0#  : Main.__private__ref 

end

(* Module giving an empty axiom for the entity "main__f_u91", created in Gnat2Why.Decls.Translate_External_Object *)
module Main__f_u91__axiom
 use import "_gnatprove_standard".Main


end

(* Module declaring the external object "main__u91," created in Gnat2Why.Decls.Translate_External_Object *)
module Main__u91
 use import "ref".Ref
 use import "_gnatprove_standard".Main

 val u91 #"a-textio.ads" 457 0 0#  : Main.__private__ref 

end

(* Module giving an empty axiom for the entity "main__u91", created in Gnat2Why.Decls.Translate_External_Object *)
module Main__u91__axiom
 use import "_gnatprove_standard".Main


end

(* Module declaring the external object "main__f_u95," created in Gnat2Why.Decls.Translate_External_Object *)
module Main__f_u95
 use import "ref".Ref
 use import "_gnatprove_standard".Main

 val f_u95 #"a-textio.ads" 457 0 0#  : Main.__private__ref 

end

(* Module giving an empty axiom for the entity "main__f_u95", created in Gnat2Why.Decls.Translate_External_Object *)
module Main__f_u95__axiom
 use import "_gnatprove_standard".Main


end

(* Module declaring the external object "main__u95," created in Gnat2Why.Decls.Translate_External_Object *)
module Main__u95
 use import "ref".Ref
 use import "_gnatprove_standard".Main

 val u95 #"a-textio.ads" 457 0 0#  : Main.__private__ref 

end

(* Module giving an empty axiom for the entity "main__u95", created in Gnat2Why.Decls.Translate_External_Object *)
module Main__u95__axiom
 use import "_gnatprove_standard".Main


end

(* Module declaring the external object "main__f_diesel," created in Gnat2Why.Decls.Translate_External_Object *)
module Main__f_diesel
 use import "ref".Ref
 use import "_gnatprove_standard".Main

 val f_diesel #"a-textio.ads" 457 0 0#  : Main.__private__ref 

end

(* Module giving an empty axiom for the entity "main__f_diesel", created in Gnat2Why.Decls.Translate_External_Object *)
module Main__f_diesel__axiom
 use import "_gnatprove_standard".Main


end

(* Module declaring the external object "main__diesel," created in Gnat2Why.Decls.Translate_External_Object *)
module Main__diesel
 use import "ref".Ref
 use import "_gnatprove_standard".Main

 val diesel #"a-textio.ads" 457 0 0#  : Main.__private__ref 

end

(* Module giving an empty axiom for the entity "main__diesel", created in Gnat2Why.Decls.Translate_External_Object *)
module Main__diesel__axiom
 use import "_gnatprove_standard".Main


end

(* Module declaring the external object "main__unit_1," created in Gnat2Why.Decls.Translate_External_Object *)
module Main__unit_1
 use import "ref".Ref
 use import "_gnatprove_standard".Main

 val unit_1 #"a-textio.ads" 457 0 0#  : Main.__private__ref 

end

(* Module giving an empty axiom for the entity "main__unit_1", created in Gnat2Why.Decls.Translate_External_Object *)
module Main__unit_1__axiom
 use import "_gnatprove_standard".Main


end

(* Module declaring the external object "main__unit_1_91," created in Gnat2Why.Decls.Translate_External_Object *)
module Main__unit_1_91
 use import "ref".Ref
 use import "_gnatprove_standard".Main

 val unit_1_91 #"a-textio.ads" 457 0 0#  : Main.__private__ref 

end

(* Module giving an empty axiom for the entity "main__unit_1_91", created in Gnat2Why.Decls.Translate_External_Object *)
module Main__unit_1_91__axiom
 use import "_gnatprove_standard".Main


end

(* Module declaring the external object "main__unit_1_95," created in Gnat2Why.Decls.Translate_External_Object *)
module Main__unit_1_95
 use import "ref".Ref
 use import "_gnatprove_standard".Main

 val unit_1_95 #"a-textio.ads" 457 0 0#  : Main.__private__ref 

end

(* Module giving an empty axiom for the entity "main__unit_1_95", created in Gnat2Why.Decls.Translate_External_Object *)
module Main__unit_1_95__axiom
 use import "_gnatprove_standard".Main


end

(* Module declaring the external object "main__unit_1_diesel," created in Gnat2Why.Decls.Translate_External_Object *)
module Main__unit_1_diesel
 use import "ref".Ref
 use import "_gnatprove_standard".Main

 val unit_1_diesel #"a-textio.ads" 457 0 0#  : Main.__private__ref 

end

(* Module giving an empty axiom for the entity "main__unit_1_diesel", created in Gnat2Why.Decls.Translate_External_Object *)
module Main__unit_1_diesel__axiom
 use import "_gnatprove_standard".Main


end

(* Module declaring the external object "main__istest," created in Gnat2Why.Decls.Translate_External_Object *)
module Main__istest
 use import "ref".Ref
 use import "_gnatprove_standard".Main

 val istest #"a-textio.ads" 457 0 0#  : Main.__private__ref 

end

(* Module giving an empty axiom for the entity "main__istest", created in Gnat2Why.Decls.Translate_External_Object *)
module Main__istest__axiom
 use import "_gnatprove_standard".Main


end

(* Module declaring the external object "main__input_unit," created in Gnat2Why.Decls.Translate_External_Object *)
module Main__input_unit
 use import "ref".Ref
 use import "_gnatprove_standard".Main

 val input_unit #"a-textio.ads" 457 0 0#  : Main.__private__ref 

end

(* Module giving an empty axiom for the entity "main__input_unit", created in Gnat2Why.Decls.Translate_External_Object *)
module Main__input_unit__axiom
 use import "_gnatprove_standard".Main


end

(* Module declaring the external object "main__input_fuel_type," created in Gnat2Why.Decls.Translate_External_Object *)
module Main__input_fuel_type
 use import "ref".Ref
 use import "_gnatprove_standard".Main

 val input_fuel_type #"a-textio.ads" 457 0 0#  : Main.__private__ref 

end

(* Module giving an empty axiom for the entity "main__input_fuel_type", created in Gnat2Why.Decls.Translate_External_Object *)
module Main__input_fuel_type__axiom
 use import "_gnatprove_standard".Main


end

(* Module declaring the external object "main__input_action," created in Gnat2Why.Decls.Translate_External_Object *)
module Main__input_action
 use import "ref".Ref
 use import "_gnatprove_standard".Main

 val input_action #"a-textio.ads" 457 0 0#  : Main.__private__ref 

end

(* Module giving an empty axiom for the entity "main__input_action", created in Gnat2Why.Decls.Translate_External_Object *)
module Main__input_action__axiom
 use import "_gnatprove_standard".Main


end

(* Module declaring the external object "main__car_tank_space," created in Gnat2Why.Decls.Translate_External_Object *)
module Main__car_tank_space
 use import "ref".Ref
 use import "_gnatprove_standard".Main

 val car_tank_space #"a-textio.ads" 457 0 0#  : Main.__private__ref 

end

(* Module giving an empty axiom for the entity "main__car_tank_space", created in Gnat2Why.Decls.Translate_External_Object *)
module Main__car_tank_space__axiom
 use import "_gnatprove_standard".Main


end

(* Module declaring the external object "main__amount_to_fill," created in Gnat2Why.Decls.Translate_External_Object *)
module Main__amount_to_fill
 use import "ref".Ref
 use import "_gnatprove_standard".Main

 val amount_to_fill #"a-textio.ads" 457 0 0#  : Main.__private__ref 

end

(* Module giving an empty axiom for the entity "main__amount_to_fill", created in Gnat2Why.Decls.Translate_External_Object *)
module Main__amount_to_fill__axiom
 use import "_gnatprove_standard".Main


end

(* Module declaring the external object "pump__append_reservoir__r," created in Gnat2Why.Decls.Translate_External_Object *)
module Pump__append_reservoir__r
 use import "ref".Ref
 use import "_gnatprove_standard".Main

 val r #"a-textio.ads" 457 0 0#  : Main.__private__ref 

end

(* Module giving an empty axiom for the entity "pump__append_reservoir__r", created in Gnat2Why.Decls.Translate_External_Object *)
module Pump__append_reservoir__r__axiom
 use import "_gnatprove_standard".Main


end

(* Module declaring the external object "pump_unit__set_is_using__basestatetype," created in Gnat2Why.Decls.Translate_External_Object *)
module Pump_unit__set_is_using__basestatetype
 use import "ref".Ref
 use import "_gnatprove_standard".Main

 val basestatetype #"a-textio.ads" 457 0 0#  : Main.__private__ref 

end

(* Module giving an empty axiom for the entity "pump_unit__set_is_using__basestatetype", created in Gnat2Why.Decls.Translate_External_Object *)
module Pump_unit__set_is_using__basestatetype__axiom
 use import "_gnatprove_standard".Main


end

(* Module declaring the external object "pump_unit__set_is_paid__basestatetype," created in Gnat2Why.Decls.Translate_External_Object *)
module Pump_unit__set_is_paid__basestatetype
 use import "ref".Ref
 use import "_gnatprove_standard".Main

 val basestatetype #"a-textio.ads" 457 0 0#  : Main.__private__ref 

end

(* Module giving an empty axiom for the entity "pump_unit__set_is_paid__basestatetype", created in Gnat2Why.Decls.Translate_External_Object *)
module Pump_unit__set_is_paid__basestatetype__axiom
 use import "_gnatprove_standard".Main


end

(* Module declaring the external object "pump_unit__add_pump__nozzlestatetype," created in Gnat2Why.Decls.Translate_External_Object *)
module Pump_unit__add_pump__nozzlestatetype
 use import "ref".Ref
 use import "_gnatprove_standard".Main

 val nozzlestatetype #"a-textio.ads" 457 0 0#  : Main.__private__ref 

end

(* Module giving an empty axiom for the entity "pump_unit__add_pump__nozzlestatetype", created in Gnat2Why.Decls.Translate_External_Object *)
module Pump_unit__add_pump__nozzlestatetype__axiom
 use import "_gnatprove_standard".Main


end

(* Module declaring the external object "pump_unit__add_pump__basestatetype," created in Gnat2Why.Decls.Translate_External_Object *)
module Pump_unit__add_pump__basestatetype
 use import "ref".Ref
 use import "_gnatprove_standard".Main

 val basestatetype #"a-textio.ads" 457 0 0#  : Main.__private__ref 

end

(* Module giving an empty axiom for the entity "pump_unit__add_pump__basestatetype", created in Gnat2Why.Decls.Translate_External_Object *)
module Pump_unit__add_pump__basestatetype__axiom
 use import "_gnatprove_standard".Main


end

(* Module declaring the external object "pump_unit__start_pumping__tanksize," created in Gnat2Why.Decls.Translate_External_Object *)
module Pump_unit__start_pumping__tanksize
 use import "ref".Ref
 use import "_gnatprove_standard".Main

 val tanksize #"a-textio.ads" 457 0 0#  : Main.__private__ref 

end

(* Module giving an empty axiom for the entity "pump_unit__start_pumping__tanksize", created in Gnat2Why.Decls.Translate_External_Object *)
module Pump_unit__start_pumping__tanksize__axiom
 use import "_gnatprove_standard".Main


end

(* Module declaring the external object "pump_unit__start_pumping__pumped," created in Gnat2Why.Decls.Translate_External_Object *)
module Pump_unit__start_pumping__pumped
 use import "ref".Ref
 use import "_gnatprove_standard".Main

 val pumped #"a-textio.ads" 457 0 0#  : Main.__private__ref 

end

(* Module giving an empty axiom for the entity "pump_unit__start_pumping__pumped", created in Gnat2Why.Decls.Translate_External_Object *)
module Pump_unit__start_pumping__pumped__axiom
 use import "_gnatprove_standard".Main


end

(* Module declaring the external object "pump_unit__start_pumping__sensor," created in Gnat2Why.Decls.Translate_External_Object *)
module Pump_unit__start_pumping__sensor
 use import "ref".Ref
 use import "_gnatprove_standard".Main

 val sensor #"a-textio.ads" 457 0 0#  : Main.__private__ref 

end

(* Module giving an empty axiom for the entity "pump_unit__start_pumping__sensor", created in Gnat2Why.Decls.Translate_External_Object *)
module Pump_unit__start_pumping__sensor__axiom
 use import "_gnatprove_standard".Main


end

(* Module declaring the external object "pump_unit__start_pumping__temp," created in Gnat2Why.Decls.Translate_External_Object *)
module Pump_unit__start_pumping__temp
 use import "ref".Ref
 use import "_gnatprove_standard".Main

 val temp #"a-textio.ads" 457 0 0#  : Main.__private__ref 

end

(* Module giving an empty axiom for the entity "pump_unit__start_pumping__temp", created in Gnat2Why.Decls.Translate_External_Object *)
module Pump_unit__start_pumping__temp__axiom
 use import "_gnatprove_standard".Main


end

(* Module declaring the external object "pump_unit__return_nozzle__due," created in Gnat2Why.Decls.Translate_External_Object *)
module Pump_unit__return_nozzle__due
 use import "ref".Ref
 use import "_gnatprove_standard".Main

 val due #"a-textio.ads" 457 0 0#  : Main.__private__ref 

end

(* Module giving an empty axiom for the entity "pump_unit__return_nozzle__due", created in Gnat2Why.Decls.Translate_External_Object *)
module Pump_unit__return_nozzle__due__axiom
 use import "_gnatprove_standard".Main


end

(* Module declaring the external object "cash_register__set_pumped_info_to_cash_register__topay," created in Gnat2Why.Decls.Translate_External_Object *)
module Cash_register__set_pumped_info_to_cash_register__topay
 use import "ref".Ref
 use import "_gnatprove_standard".Main

 val topay #"a-textio.ads" 457 0 0#  : Main.__private__ref 

end

(* Module giving an empty axiom for the entity "cash_register__set_pumped_info_to_cash_register__topay", created in Gnat2Why.Decls.Translate_External_Object *)
module Cash_register__set_pumped_info_to_cash_register__topay__axiom
 use import "_gnatprove_standard".Main


end

(* Module declaring the external object "cash_register__set_pumped_info_to_cash_register__pumpunitid," created in Gnat2Why.Decls.Translate_External_Object *)
module Cash_register__set_pumped_info_to_cash_register__pumpunitid
 use import "ref".Ref
 use import "_gnatprove_standard".Main

 val pumpunitid #"a-textio.ads" 457 0 0#  : Main.__private__ref 

end

(* Module giving an empty axiom for the entity "cash_register__set_pumped_info_to_cash_register__pumpunitid", created in Gnat2Why.Decls.Translate_External_Object *)
module Cash_register__set_pumped_info_to_cash_register__pumpunitid__axiom
 use import "_gnatprove_standard".Main


end

(* Module declaring the external object "cash_register__payfuel__id," created in Gnat2Why.Decls.Translate_External_Object *)
module Cash_register__payfuel__id
 use import "ref".Ref
 use import "_gnatprove_standard".Main

 val id #"a-textio.ads" 457 0 0#  : Main.__private__ref 

end

(* Module giving an empty axiom for the entity "cash_register__payfuel__id", created in Gnat2Why.Decls.Translate_External_Object *)
module Cash_register__payfuel__id__axiom
 use import "_gnatprove_standard".Main


end

(* Module declaring the external object "cash_register__payfuel__topay," created in Gnat2Why.Decls.Translate_External_Object *)
module Cash_register__payfuel__topay
 use import "ref".Ref
 use import "_gnatprove_standard".Main

 val topay #"a-textio.ads" 457 0 0#  : Main.__private__ref 

end

(* Module giving an empty axiom for the entity "cash_register__payfuel__topay", created in Gnat2Why.Decls.Translate_External_Object *)
module Cash_register__payfuel__topay__axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant #"a-textio.ads" 457 0 0# "inline" 
   (temp___expr_3 : int) (temp___is_init_0 : bool) (temp___do_constant_1 : bool) (temp___do_toplevel_2 : bool)  =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_3)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___4 : int) (temp___5 : bool)  =
  true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_9 : int) (temp___is_init_6 : bool) (temp___do_constant_7 : bool) (temp___do_toplevel_8 : bool)  =
  (if (( temp___is_init_6 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_9)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___10 : int) (temp___11 : bool)  =
  true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_15 : int) (temp___is_init_12 : bool) (temp___do_constant_13 : bool) (temp___do_toplevel_14 : bool)  =
  (if (( temp___is_init_12 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_15)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___16 : int) (temp___17 : bool)  =
  true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_21 : int) (temp___is_init_18 : bool) (temp___do_constant_19 : bool) (temp___do_toplevel_20 : bool)  =
  (if (( temp___is_init_18 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_21)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___22 : int) (temp___23 : bool)  =
  true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_27 : int) (temp___is_init_24 : bool) (temp___do_constant_25 : bool) (temp___do_toplevel_26 : bool)  =
  (if (( temp___is_init_24 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_27)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___28 : int) (temp___29 : bool)  =
  true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_33 : int) (temp___is_init_30 : bool) (temp___do_constant_31 : bool) (temp___do_toplevel_32 : bool)  =
  (if (( temp___is_init_30 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_33)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___34 : int) (temp___35 : bool)  =
  true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_39 : int) (temp___is_init_36 : bool) (temp___do_constant_37 : bool) (temp___do_toplevel_38 : bool)  =
  (if (( temp___is_init_36 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_39)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___40 : int) (temp___41 : bool)  =
  true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float__axiom
 use import "_gnatprove_standard".Main
 use        Standard__short_float

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_45 : Standard__short_float.short_float) (temp___is_init_42 : bool) (temp___do_constant_43 : bool) (temp___do_toplevel_44 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___46 : Standard__short_float.short_float) (temp___47 : bool)  =
  true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float__axiom
 use import "_gnatprove_standard".Main
 use        Standard__float

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_51 : Standard__float.float) (temp___is_init_48 : bool) (temp___do_constant_49 : bool) (temp___do_toplevel_50 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___52 : Standard__float.float) (temp___53 : bool)  =
  true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float__axiom
 use import "_gnatprove_standard".Main
 use        Standard__long_float

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_57 : Standard__long_float.long_float) (temp___is_init_54 : bool) (temp___do_constant_55 : bool) (temp___do_toplevel_56 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___58 : Standard__long_float.long_float) (temp___59 : bool)  =
  true

end

(* Module giving axioms for type "long_long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_float__axiom
 use import "_gnatprove_standard".Main
 use        Standard__long_long_float

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_63 : Standard__long_long_float.long_long_float) (temp___is_init_60 : bool) (temp___do_constant_61 : bool) (temp___do_toplevel_62 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___64 : Standard__long_long_float.long_long_float) (temp___65 : bool)  =
  true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_69 : int) (temp___is_init_66 : bool) (temp___do_constant_67 : bool) (temp___do_toplevel_68 : bool)  =
  (if (( temp___is_init_66 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_69)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___70 : int) (temp___71 : bool)  =
  true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_75 : int) (temp___is_init_72 : bool) (temp___do_constant_73 : bool) (temp___do_toplevel_74 : bool)  =
  (if (( temp___is_init_72 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_75)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___76 : int) (temp___77 : bool)  =
  true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_81 : int) (temp___is_init_78 : bool) (temp___do_constant_79 : bool) (temp___do_toplevel_80 : bool)  =
  (if (( temp___is_init_78 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_81)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___82 : int) (temp___83 : bool)  =
  true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_87 : Standard__string.string) (temp___is_init_84 : bool) (temp___do_constant_85 : bool) (temp___do_toplevel_86 : bool)  =
  (if (temp___do_constant_85) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_87) (Standard__string.last temp___expr_87))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string__axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_92 : Standard__wide_string.wide_string) (temp___is_init_89 : bool) (temp___do_constant_90 : bool) (temp___do_toplevel_91 : bool)  =
  (if (temp___do_constant_90) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_92) (Standard__wide_string.last temp___expr_92))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string__axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_97 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_94 : bool) (temp___do_constant_95 : bool) (temp___do_toplevel_96 : bool)  =
  (if (temp___do_constant_95) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_97) (Standard__wide_wide_string.last temp___expr_97))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration__axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_102 : Standard__duration.duration) (temp___is_init_99 : bool) (temp___do_constant_100 : bool) (temp___do_toplevel_101 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___103 : Standard__duration.duration) (temp___104 : bool)  =
  true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_108 : int) (temp___is_init_105 : bool) (temp___do_constant_106 : bool) (temp___do_toplevel_107 : bool)  =
  (if (( temp___is_init_105 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_108)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___109 : int) (temp___110 : bool)  =
  true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_114 : int) (temp___is_init_111 : bool) (temp___do_constant_112 : bool) (temp___do_toplevel_113 : bool)  =
  (if (( temp___is_init_111 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_114)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___115 : int) (temp___116 : bool)  =
  true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_120 : int) (temp___is_init_117 : bool) (temp___do_constant_118 : bool) (temp___do_toplevel_119 : bool)  =
  (if (( temp___is_init_117 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_120)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___121 : int) (temp___122 : bool)  =
  true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_126 : int) (temp___is_init_123 : bool) (temp___do_constant_124 : bool) (temp___do_toplevel_125 : bool)  =
  (if (( temp___is_init_123 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_126)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___127 : int) (temp___128 : bool)  =
  true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_132 : int) (temp___is_init_129 : bool) (temp___do_constant_130 : bool) (temp___do_toplevel_131 : bool)  =
  (if (( temp___is_init_129 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_132)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___133 : int) (temp___134 : bool)  =
  true

end

(* Module giving axioms for type "universal_real", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_real__axiom
 use import "_gnatprove_standard".Main
 use        Standard__universal_real

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_138 : Standard__universal_real.universal_real) (temp___is_init_135 : bool) (temp___do_constant_136 : bool) (temp___do_toplevel_137 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___139 : Standard__universal_real.universal_real) (temp___140 : bool)  =
  true

end

(* Module for possibly declaring a logic function for "set_fuel_price" defined at pump.ads:33, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__set_fuel_price
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_pump_state" defined at pump.ads:34, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__set_pump_state
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_pumped" defined at pump.ads:35, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__set_pumped
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_pump_nozzle_state" defined at pump.ads:36, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__set_pump_nozzle_state
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "append_reservoir" defined at pump.ads:38, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__append_reservoir
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_reservoir_size" defined at pump.ads:40, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__set_reservoir_size
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "remove_petrol_reservoir" defined at pump.ads:42, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__remove_petrol_reservoir
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_is_using" defined at pump_unit.ads:43, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__set_is_using
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_is_paid" defined at pump_unit.ads:47, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__set_is_paid
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_to_pay" defined at pump_unit.ads:48, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__set_to_pay
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_unit_id" defined at pump_unit.ads:49, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__set_unit_id
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_pumped" defined at pump_unit.ads:50, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__set_pumped
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_pump_active_state" defined at pump_unit.ads:51, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__set_pump_active_state
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_pump_nozzle_state" defined at pump_unit.ads:52, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__set_pump_nozzle_state
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "add_pump" defined at pump_unit.ads:54, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__add_pump
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "left_nozzle" defined at pump_unit.ads:56, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__left_nozzle
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "return_nozzle" defined at pump_unit.ads:61, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__return_nozzle
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "start_pumping" defined at pump_unit.ads:70, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__start_pumping
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "stop_pumping" defined at pump_unit.ads:75, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__stop_pumping
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "payfuel" defined at cash_register.ads:32, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Cash_register__payfuel
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_pumped_info_to_cash_register" defined at cash_register.ads:33, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Cash_register__set_pumped_info_to_cash_register
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "print" defined at sprint.ads:4, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Sprint__print
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "print_float_type" defined at sprint.ads:5, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Sprint__print_float_type
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "print_state_type" defined at sprint.ads:6, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Sprint__print_state_type
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "print_nozzle_type" defined at sprint.ads:7, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Sprint__print_nozzle_type
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "print_fuel_type" defined at sprint.ads:8, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Sprint__print_fuel_type
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "read" defined at a-stream.ads:57, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__streams__read
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "write" defined at a-stream.ads:63, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__streams__write
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "min_int" defined at system.ads:51, created in Gnat2Why.Decls.Translate_Constant *)
module System__min_int
 use import "_gnatprove_standard".Main

 function min_int #"system.ads" 51 0 0# "model" "model_trace:7550" 
   : int

end

(* Module for defining the constant "max_int" defined at system.ads:52, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_int
 use import "_gnatprove_standard".Main

 function max_int #"system.ads" 52 0 0# "model" "model_trace:7561" 
   : int

end

(* Module for defining the constant "max_binary_modulus" defined at system.ads:54, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_binary_modulus
 use import "_gnatprove_standard".Main

 function max_binary_modulus #"system.ads" 54 0 0# "model" "model_trace:7572" 
   : int

end

(* Module for defining the constant "max_nonbinary_modulus" defined at system.ads:55, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_nonbinary_modulus
 use import "_gnatprove_standard".Main

 function max_nonbinary_modulus #"system.ads" 55 0 0# "model" "model_trace:7585" 
   : int

end

(* Module for defining the constant "max_base_digits" defined at system.ads:57, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_base_digits
 use import "_gnatprove_standard".Main

 function max_base_digits #"system.ads" 57 0 0# "model" "model_trace:7600" 
   : int

end

(* Module for defining the constant "max_digits" defined at system.ads:58, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_digits
 use import "_gnatprove_standard".Main

 function max_digits #"system.ads" 58 0 0# "model" "model_trace:7610" 
   : int

end

(* Module for defining the constant "max_mantissa" defined at system.ads:60, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_mantissa
 use import "_gnatprove_standard".Main

 function max_mantissa #"system.ads" 60 0 0# "model" "model_trace:7620" 
   : int

end

(* Module for defining the constant "fine_delta" defined at system.ads:61, created in Gnat2Why.Decls.Translate_Constant *)
module System__fine_delta
 use import "_gnatprove_standard".Main
 use        Standard__universal_real

 function fine_delta #"system.ads" 61 0 0# 
   : Standard__universal_real.universal_real

end

(* Module for defining the constant "tick" defined at system.ads:63, created in Gnat2Why.Decls.Translate_Constant *)
module System__tick
 use import "_gnatprove_standard".Main
 use        Standard__universal_real

 function tick #"system.ads" 63 0 0# 
   : Standard__universal_real.universal_real

end

(* Module for defining the constant "storage_unit" defined at system.ads:71, created in Gnat2Why.Decls.Translate_Constant *)
module System__storage_unit
 use import "_gnatprove_standard".Main

 function storage_unit #"system.ads" 71 0 0# "model" "model_trace:7671" 
   : int

end

(* Module for defining the constant "word_size" defined at system.ads:72, created in Gnat2Why.Decls.Translate_Constant *)
module System__word_size
 use import "_gnatprove_standard".Main

 function word_size #"system.ads" 72 0 0# "model" "model_trace:7680" 
   : int

end

(* Module for defining the constant "memory_size" defined at system.ads:73, created in Gnat2Why.Decls.Translate_Constant *)
module System__memory_size
 use import "_gnatprove_standard".Main

 function memory_size #"system.ads" 73 0 0# "model" "model_trace:7689" 
   : int

end

(* Module for defining the value of the aggregate at system.ads:166, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module System__underlying_priorities__aggregate_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer

 function system__underlying_priorities__aggregate_def #"system.ads" 166 0 0# 
   (temp___142 : int) (temp___143 : int) (temp___144 : int) (temp___145 : int) (temp___146 : int) (temp___147 : int) (temp___148 : int) (temp___149 : int) (temp___150 : int) (temp___151 : int) (temp___152 : int) (temp___153 : int) (temp___154 : int) (temp___155 : int) (temp___156 : int) (temp___157 : int) : Array__Int__Standard__integer.map
 
 axiom def_axiom :
  (forall temp___142 temp___143 temp___144 temp___145 temp___146 temp___147 temp___148 temp___149 temp___150 temp___151 temp___152 temp___153 temp___154 temp___155 temp___156 temp___157 : int.
   (let temp___141 = (system__underlying_priorities__aggregate_def temp___142 temp___143 temp___144 temp___145 temp___146 temp___147 temp___148 temp___149 temp___150 temp___151 temp___152 temp___153 temp___154 temp___155 temp___156 temp___157) in (
    (forall temp___158 : int.
     (if (( (31 <= temp___158) /\ (temp___158 <= 31) )) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___157))) else if (( (21 <= temp___158) /\ (temp___158 <= 30) )) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___156)))  else if ((temp___158 = 20)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___155)))  else if ((temp___158 = 19)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___154)))  else if ((temp___158 = 18)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___153)))  else if ((temp___158 = 17)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___152)))  else if ((temp___158 = 16)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___151)))  else if ((temp___158 = 15)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___150)))  else if ((temp___158 = 14)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___149)))  else if ((temp___158 = 13)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___148)))  else if ((temp___158 = 12)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___147)))  else if ((temp___158 = 11)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___146)))  else if ((temp___158 = 10)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___145)))  else if ((temp___158 = 9)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___144)))  else if ((temp___158 = 8)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___143)))  else if (( (0 <= temp___158) /\ (temp___158 <= 7) )) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___142))) else (
      true)))))
  )

end

(* Module for defining the constant "long_bits" defined at s-parame.ads:110, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__long_bits
 use import "_gnatprove_standard".Main

 function long_bits #"s-parame.ads" 110 0 0# "model" "model_trace:13105" 
   : int

end

(* Module for defining a value for string literal  defined at s-parame.ads:119, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___159
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___159 #"s-parame.ads" 119 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining the constant "max_attribute_count" defined at s-parame.ads:183, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__max_attribute_count
 use import "_gnatprove_standard".Main

 function max_attribute_count #"s-parame.ads" 183 0 0# "model" "model_trace:13178" 
   : int

end

(* Module for defining the constant "max_task_image_length" defined at s-parame.ads:199, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__max_task_image_length
 use import "_gnatprove_standard".Main

 function max_task_image_length #"s-parame.ads" 199 0 0# "model" "model_trace:13197" 
   : int

end

(* Module for defining the constant "default_exception_msg_max_length" defined at s-parame.ads:206, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__default_exception_msg_max_length
 use import "_gnatprove_standard".Main

 function default_exception_msg_max_length #"s-parame.ads" 206 0 0# "model" "model_trace:13206" 
   : int

end

(* Module for possibly declaring a logic function for "strncpy" defined at s-crtl.ads:88, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__strncpy
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "clearerr" defined at s-crtl.ads:98, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__clearerr
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "free" defined at s-crtl.ads:137, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__free
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "memcpy" defined at s-crtl.ads:177, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__memcpy
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "memmove" defined at s-crtl.ads:180, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__memmove
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "mktemp" defined at s-crtl.ads:183, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__mktemp
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "rewind" defined at s-crtl.ads:196, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__rewind
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "tmpnam" defined at s-crtl.ads:217, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__tmpnam
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_binary_mode" defined at i-cstrea.ads:223, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__set_binary_mode
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_text_mode" defined at i-cstrea.ads:224, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__set_text_mode
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_mode" defined at i-cstrea.ads:254, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__set_mode
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "full_name" defined at i-cstrea.ads:262, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__full_name
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of the aggregate at s-wchcon.ads:170, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module System__wch_con__wc_encoding_letters__aggregate_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 function system__wch_con__wc_encoding_letters__aggregate_def #"s-wchcon.ads" 170 0 0# 
   (temp___161 : int) (temp___162 : int) (temp___163 : int) (temp___164 : int) (temp___165 : int) (temp___166 : int) : Array__Int__Standard__character.map
 
 axiom def_axiom :
  (forall temp___161 temp___162 temp___163 temp___164 temp___165 temp___166 : int.
   (let temp___160 = (system__wch_con__wc_encoding_letters__aggregate_def temp___161 temp___162 temp___163 temp___164 temp___165 temp___166) in (
    ( ( ( ( ( ((Array__Int__Standard__character.get temp___160 1) = (Standard__character.of_rep temp___161)) /\ ((Array__Int__Standard__character.get temp___160 2) = (Standard__character.of_rep temp___162)) ) /\ ((Array__Int__Standard__character.get temp___160 3) = (Standard__character.of_rep temp___163)) ) /\ ((Array__Int__Standard__character.get temp___160 4) = (Standard__character.of_rep temp___164)) ) /\ ((Array__Int__Standard__character.get temp___160 5) = (Standard__character.of_rep temp___165)) ) /\ ((Array__Int__Standard__character.get temp___160 6) = (Standard__character.of_rep temp___166)) )))
  )

end

(* Module for defining the constant "wc_longest_sequence" defined at s-wchcon.ads:189, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__wc_longest_sequence
 use import "_gnatprove_standard".Main

 function wc_longest_sequence #"s-wchcon.ads" 189 0 0# "model" "model_trace:13370" 
   : int

end

(* Module for defining the value of the aggregate at s-wchcon.ads:194, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module System__wch_con__wc_longest_sequences__aggregate_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural

 function system__wch_con__wc_longest_sequences__aggregate_def #"s-wchcon.ads" 194 0 0# 
   (temp___169 : int) (temp___170 : int) (temp___171 : int) (temp___172 : int) (temp___173 : int) (temp___174 : int) : Array__Int__Standard__natural.map
 
 axiom def_axiom :
  (forall temp___169 temp___170 temp___171 temp___172 temp___173 temp___174 : int.
   (let temp___168 = (system__wch_con__wc_longest_sequences__aggregate_def temp___169 temp___170 temp___171 temp___172 temp___173 temp___174) in (
    ( ( ( ( ( ((Array__Int__Standard__natural.get temp___168 1) = (Standard__natural.of_rep temp___169)) /\ ((Array__Int__Standard__natural.get temp___168 2) = (Standard__natural.of_rep temp___170)) ) /\ ((Array__Int__Standard__natural.get temp___168 3) = (Standard__natural.of_rep temp___171)) ) /\ ((Array__Int__Standard__natural.get temp___168 4) = (Standard__natural.of_rep temp___172)) ) /\ ((Array__Int__Standard__natural.get temp___168 5) = (Standard__natural.of_rep temp___173)) ) /\ ((Array__Int__Standard__natural.get temp___168 6) = (Standard__natural.of_rep temp___174)) )))
  )

end

(* Module for possibly declaring a logic function for "create" defined at a-textio.ads:86, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__create
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "open" defined at a-textio.ads:92, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__open
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "close" defined at a-textio.ads:98, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__close
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "delete" defined at a-textio.ads:99, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__delete
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "reset" defined at a-textio.ads:100, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__reset
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "reset__2" defined at a-textio.ads:101, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__reset__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_input" defined at a-textio.ads:113, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__set_input
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_output" defined at a-textio.ads:114, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__set_output
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_error" defined at a-textio.ads:115, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__set_error
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "flush" defined at a-textio.ads:142, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__flush
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "flush__2" defined at a-textio.ads:143, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__flush__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_line_length" defined at a-textio.ads:149, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__set_line_length
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_line_length__2" defined at a-textio.ads:150, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__set_line_length__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_page_length" defined at a-textio.ads:152, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__set_page_length
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_page_length__2" defined at a-textio.ads:153, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__set_page_length__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "new_line" defined at a-textio.ads:165, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__new_line
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "new_line__2" defined at a-textio.ads:166, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__new_line__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "skip_line" defined at a-textio.ads:168, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__skip_line
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "skip_line__2" defined at a-textio.ads:169, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__skip_line__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "new_page" defined at a-textio.ads:174, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__new_page
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "new_page__2" defined at a-textio.ads:175, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__new_page__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "skip_page" defined at a-textio.ads:177, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__skip_page
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "skip_page__2" defined at a-textio.ads:178, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__skip_page__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_col" defined at a-textio.ads:186, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__set_col
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_col__2" defined at a-textio.ads:187, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__set_col__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_line" defined at a-textio.ads:189, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__set_line
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_line__2" defined at a-textio.ads:190, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__set_line__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get" defined at a-textio.ads:205, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get__2" defined at a-textio.ads:206, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put" defined at a-textio.ads:207, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put__2" defined at a-textio.ads:208, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "look_ahead" defined at a-textio.ads:210, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__look_ahead
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "look_ahead__2" defined at a-textio.ads:215, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__look_ahead__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_immediate" defined at a-textio.ads:219, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get_immediate
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_immediate__2" defined at a-textio.ads:223, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get_immediate__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_immediate__3" defined at a-textio.ads:226, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get_immediate__3
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_immediate__4" defined at a-textio.ads:231, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get_immediate__4
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get__3" defined at a-textio.ads:239, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get__3
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get__4" defined at a-textio.ads:240, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get__4
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put__3" defined at a-textio.ads:241, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put__3
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put__4" defined at a-textio.ads:242, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put__4
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_line" defined at a-textio.ads:244, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get_line
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_line__2" defined at a-textio.ads:249, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get_line__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put_line" defined at a-textio.ads:259, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put_line
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put_line__2" defined at a-textio.ads:263, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put_line__2
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "lm" defined at a-textio.ads:352, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__lm
 use import "_gnatprove_standard".Main

 function lm #"a-textio.ads" 352 0 0# "model" "model_trace:6722" 
   : int

end

(* Module for defining the constant "pm" defined at a-textio.ads:355, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__pm
 use import "_gnatprove_standard".Main

 function pm #"a-textio.ads" 355 0 0# "model" "model_trace:6736" 
   : int

end

(* Module for possibly declaring a logic function for "initialize_standard_files" defined at a-textio.ads:466, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__initialize_standard_files
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "main" defined at main.adb:6, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "Treservoir_numB" defined at pump.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__Treservoir_numB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "reservoir_num" defined at pump.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__reservoir_num__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__reservoir_num

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_179 : int) (temp___is_init_176 : bool) (temp___do_constant_177 : bool) (temp___do_toplevel_178 : bool)  =
  (if (( temp___is_init_176 \/ (Pump__reservoir_num.first <= Pump__reservoir_num.last) )) then (
   (Pump__reservoir_num.dynamic_property Pump__reservoir_num.first Pump__reservoir_num.last temp___expr_179)) else true)
 
 predicate default_initial_assumption #"pump.ads" 5 0 0# "inline" 
   (temp___180 : int) (temp___181 : bool)  =
  true

end

(* Module giving axioms for type "Tfloat_numberB" defined at pump.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__Tfloat_numberB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "float_number" defined at pump.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__float_number__axiom
 use import "_gnatprove_standard".Main
 use        Pump__float_number

 predicate dynamic_invariant #"pump.ads" 5 0 0# "inline" 
   (temp___expr_185 : Pump__float_number.float_number) (temp___is_init_182 : bool) (temp___do_constant_183 : bool) (temp___do_toplevel_184 : bool)  =
  true
 
 predicate default_initial_assumption #"pump.ads" 6 0 0# "inline" 
   (temp___186 : Pump__float_number.float_number) (temp___187 : bool)  =
  true

end

(* Module giving axioms for type "fuel_types" defined at pump.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__fuel_types__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__fuel_types

 predicate dynamic_invariant #"pump.ads" 6 0 0# "inline" 
   (temp___expr_191 : int) (temp___is_init_188 : bool) (temp___do_constant_189 : bool) (temp___do_toplevel_190 : bool)  =
  (if (( temp___is_init_188 \/ (Pump__fuel_types.first <= Pump__fuel_types.last) )) then (
   (Pump__fuel_types.dynamic_property Pump__fuel_types.first Pump__fuel_types.last temp___expr_191)) else true)
 
 predicate default_initial_assumption #"pump.ads" 7 0 0# "inline" 
   (temp___192 : int) (temp___193 : bool)  =
  true

end

(* Module giving axioms for type "state_type" defined at pump.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__state_type__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__state_type

 predicate dynamic_invariant #"pump.ads" 7 0 0# "inline" 
   (temp___expr_197 : int) (temp___is_init_194 : bool) (temp___do_constant_195 : bool) (temp___do_toplevel_196 : bool)  =
  (if (( temp___is_init_194 \/ (Pump__state_type.first <= Pump__state_type.last) )) then (
   (Pump__state_type.dynamic_property Pump__state_type.first Pump__state_type.last temp___expr_197)) else true)
 
 predicate default_initial_assumption #"pump.ads" 10 0 0# "inline" 
   (temp___198 : int) (temp___199 : bool)  =
  true

end

(* Module giving axioms for type "nozzle_type" defined at pump.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__nozzle_type__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__nozzle_type

 predicate dynamic_invariant #"pump.ads" 10 0 0# "inline" 
   (temp___expr_203 : int) (temp___is_init_200 : bool) (temp___do_constant_201 : bool) (temp___do_toplevel_202 : bool)  =
  (if (( temp___is_init_200 \/ (Pump__nozzle_type.first <= Pump__nozzle_type.last) )) then (
   (Pump__nozzle_type.dynamic_property Pump__nozzle_type.first Pump__nozzle_type.last temp___expr_203)) else true)
 
 predicate default_initial_assumption #"pump.ads" 11 0 0# "inline" 
   (temp___204 : int) (temp___205 : bool)  =
  true

end

(* Module giving axioms for type "reservoir" defined at pump.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__reservoir__axiom
 use import "_gnatprove_standard".Main
 use        Pump__reservoir

 predicate dynamic_invariant #"pump.ads" 11 0 0# "inline" 
   (temp___expr_209 : Pump__reservoir.reservoir) (temp___is_init_206 : bool) (temp___do_constant_207 : bool) (temp___do_toplevel_208 : bool)  =
  true
 
 predicate default_initial_assumption #"pump.ads" 13 0 0# "inline" 
   (temp___210 : Pump__reservoir.reservoir) (temp___211 : bool)  =
  true

end

(* Module giving axioms for type "pump" defined at pump.ads:20, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__pump__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use import "real".RealInfix
 use        Pump__float_number
 use        Pump__fuel_types
 use        Pump__state_type
 use        Pump__nozzle_type
 use        Pump__reservoir
 use        Pump__pump

 predicate dynamic_invariant #"pump.ads" 13 0 0# "inline" 
   (temp___expr_217 : Pump__pump.pump) (temp___is_init_214 : bool) (temp___do_constant_215 : bool) (temp___do_toplevel_216 : bool)  =
  true
 
 predicate default_initial_assumption #"pump.ads" 20 0 0# "inline" 
   (temp___218 : Pump__pump.pump) (temp___219 : bool)  =
  ( ( ( ( ( (if ((Pump__pump.reservoir_info__pred temp___218)) then (
   ((Pump__pump.rec__reservoir_info (Pump__pump.__split_fields temp___218)) = { Pump__reservoir.__split_fields = { Pump__reservoir.rec__total = (Pump__float_number.of_real (10.0)); Pump__reservoir.rec__reservoir_category = (Pump__fuel_types.of_rep 0) } })) else true) /\ (if ((Pump__pump.pump_state__pred temp___218)) then (
   ((Pump__state_type.to_rep (Pump__pump.rec__pump_state (Pump__pump.__split_fields temp___218))) = 0)) else true) ) /\ (if ((Pump__pump.pumped__pred temp___218)) then (
   ((Pump__pump.rec__pumped (Pump__pump.__split_fields temp___218)) = (Pump__float_number.of_real (0.0E-2)))) else true) ) /\ (if ((Pump__pump.nozzle_state__pred temp___218)) then (
   ((Pump__nozzle_type.to_rep (Pump__pump.rec__nozzle_state (Pump__pump.__split_fields temp___218))) = 0)) else true) ) /\ (if ((Pump__pump.unit_price__pred temp___218)) then (
   ((Pump__pump.rec__unit_price (Pump__pump.__split_fields temp___218)) = (Pump__float_number.of_real (0.0E-2)))) else true) ) /\ (if ((Pump__pump.fuel_type__pred temp___218)) then (
   ((Pump__fuel_types.to_rep (Pump__pump.rec__fuel_type (Pump__pump.__split_fields temp___218))) = 0)) else true) )

end

(* Module giving axioms for type "Tfloat_numberB" defined at pump_unit.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__Tfloat_numberB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "float_number" defined at pump_unit.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__float_number__axiom
 use import "_gnatprove_standard".Main
 use        Pump_unit__float_number

 predicate dynamic_invariant #"pump.ads" 20 0 0# "inline" 
   (temp___expr_223 : Pump_unit__float_number.float_number) (temp___is_init_220 : bool) (temp___do_constant_221 : bool) (temp___do_toplevel_222 : bool)  =
  true
 
 predicate default_initial_assumption #"pump_unit.ads" 7 0 0# "inline" 
   (temp___224 : Pump_unit__float_number.float_number) (temp___225 : bool)  =
  true

end

(* Module giving axioms for type "Tunit_id_typeP1" defined at pump_unit.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__Tunit_id_typeP1__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "unit_id_type" defined at pump_unit.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__unit_id_type__axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 predicate dynamic_invariant #"pump_unit.ads" 7 0 0# "inline" 
   (temp___expr_229 : Array__Int__Standard__character.map) (temp___is_init_226 : bool) (temp___do_constant_227 : bool) (temp___do_toplevel_228 : bool)  =
  true
 
 predicate default_initial_assumption #"pump_unit.ads" 8 0 0# "inline" 
   (temp___231 : Array__Int__Standard__character.map) (temp___232 : bool)  =
  true

end

(* Module giving axioms for type "T1s" defined at pump_unit.ads:16, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__pump_unit__T1s__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a value for string literal  defined at pump_unit.ads:16, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___242
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___242 #"pump_unit.ads" 16 0 0# 
   : Array__Int__Standard__character.map

end

(* Module giving axioms for type "pump_unit" defined at pump_unit.ads:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__pump_unit__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use import "real".RealInfix
 use        "_gnatprove_standard".Boolean
 use        Pump__float_number
 use        Pump__fuel_types
 use        Pump__state_type
 use        Pump__nozzle_type
 use        Pump__reservoir
 use        Pump__pump
 use        Pump_unit__pump_unit
 use        Array__Int__Standard__character
 use        Temp___242
 use        Array__Int__Standard__character

 predicate dynamic_invariant #"pump_unit.ads" 16 0 0# "inline" 
   (temp___expr_238 : Pump_unit__pump_unit.pump_unit) (temp___is_init_235 : bool) (temp___do_constant_236 : bool) (temp___do_toplevel_237 : bool)  =
  true
 
 predicate default_initial_assumption #"pump_unit.ads" 14 0 0# "inline" 
   (temp___240 : Pump_unit__pump_unit.pump_unit) (temp___241 : bool)  =
  ( ( ( ( ( ( ( ( ( ( (if ((Pump_unit__pump_unit.id__pred temp___240)) then (
   ((Pump_unit__pump_unit.rec__id (Pump_unit__pump_unit.__split_fields temp___240)) = Temp___242.temp___242)) else true) /\ (if ((Pump_unit__pump_unit.is_using__pred temp___240)) then (
   ((Pump_unit__pump_unit.rec__is_using (Pump_unit__pump_unit.__split_fields temp___240)) = (Boolean.of_int 0))) else true) ) /\ (if ((Pump_unit__pump_unit.is_paid__pred temp___240)) then (
   ((Pump_unit__pump_unit.rec__is_paid (Pump_unit__pump_unit.__split_fields temp___240)) = (Boolean.of_int 1))) else true) ) /\ (if ((Pump_unit__pump_unit.to_pay__pred temp___240)) then (
   ((Pump_unit__pump_unit.rec__to_pay (Pump_unit__pump_unit.__split_fields temp___240)) = (Pump__float_number.of_real (0.0E-2)))) else true) ) /\ (if ((Pump_unit__pump_unit.pumped__pred temp___240)) then (
   ((Pump_unit__pump_unit.rec__pumped (Pump_unit__pump_unit.__split_fields temp___240)) = (Pump__float_number.of_real (0.0E-2)))) else true) ) /\ (if ((Pump_unit__pump_unit.pump_active_fuel__pred temp___240)) then (
   ((Pump__fuel_types.to_rep (Pump_unit__pump_unit.rec__pump_active_fuel (Pump_unit__pump_unit.__split_fields temp___240))) = 0)) else true) ) /\ (if ((Pump_unit__pump_unit.pump_active_state__pred temp___240)) then (
   ((Pump__state_type.to_rep (Pump_unit__pump_unit.rec__pump_active_state (Pump_unit__pump_unit.__split_fields temp___240))) = 0)) else true) ) /\ (if ((Pump_unit__pump_unit.pump_nozzle_state__pred temp___240)) then (
   ((Pump__nozzle_type.to_rep (Pump_unit__pump_unit.rec__pump_nozzle_state (Pump_unit__pump_unit.__split_fields temp___240))) = 0)) else true) ) /\ (if ((Pump_unit__pump_unit.pump_91__pred temp___240)) then (
   (let temp___243 = (Pump_unit__pump_unit.rec__pump_91 (Pump_unit__pump_unit.__split_fields temp___240)) in (
    ( ( ( ( ( (if ((Pump__pump.reservoir_info__pred temp___243)) then (
     ((Pump__pump.rec__reservoir_info (Pump__pump.__split_fields temp___243)) = { Pump__reservoir.__split_fields = { Pump__reservoir.rec__total = (Pump__float_number.of_real (10.0)); Pump__reservoir.rec__reservoir_category = (Pump__fuel_types.of_rep 0) } })) else true) /\ (if ((Pump__pump.pump_state__pred temp___243)) then (
     ((Pump__state_type.to_rep (Pump__pump.rec__pump_state (Pump__pump.__split_fields temp___243))) = 0)) else true) ) /\ (if ((Pump__pump.pumped__pred temp___243)) then (
     ((Pump__pump.rec__pumped (Pump__pump.__split_fields temp___243)) = (Pump__float_number.of_real (0.0E-2)))) else true) ) /\ (if ((Pump__pump.nozzle_state__pred temp___243)) then (
     ((Pump__nozzle_type.to_rep (Pump__pump.rec__nozzle_state (Pump__pump.__split_fields temp___243))) = 0)) else true) ) /\ (if ((Pump__pump.unit_price__pred temp___243)) then (
     ((Pump__pump.rec__unit_price (Pump__pump.__split_fields temp___243)) = (Pump__float_number.of_real (0.0E-2)))) else true) ) /\ (if ((Pump__pump.fuel_type__pred temp___243)) then (
     ((Pump__fuel_types.to_rep (Pump__pump.rec__fuel_type (Pump__pump.__split_fields temp___243))) = 0)) else true) )))
  ) else true) ) /\ (if ((Pump_unit__pump_unit.pump_95__pred temp___240)) then (
   (let temp___244 = (Pump_unit__pump_unit.rec__pump_95 (Pump_unit__pump_unit.__split_fields temp___240)) in (
    ( ( ( ( ( (if ((Pump__pump.reservoir_info__pred temp___244)) then (
     ((Pump__pump.rec__reservoir_info (Pump__pump.__split_fields temp___244)) = { Pump__reservoir.__split_fields = { Pump__reservoir.rec__total = (Pump__float_number.of_real (10.0)); Pump__reservoir.rec__reservoir_category = (Pump__fuel_types.of_rep 0) } })) else true) /\ (if ((Pump__pump.pump_state__pred temp___244)) then (
     ((Pump__state_type.to_rep (Pump__pump.rec__pump_state (Pump__pump.__split_fields temp___244))) = 0)) else true) ) /\ (if ((Pump__pump.pumped__pred temp___244)) then (
     ((Pump__pump.rec__pumped (Pump__pump.__split_fields temp___244)) = (Pump__float_number.of_real (0.0E-2)))) else true) ) /\ (if ((Pump__pump.nozzle_state__pred temp___244)) then (
     ((Pump__nozzle_type.to_rep (Pump__pump.rec__nozzle_state (Pump__pump.__split_fields temp___244))) = 0)) else true) ) /\ (if ((Pump__pump.unit_price__pred temp___244)) then (
     ((Pump__pump.rec__unit_price (Pump__pump.__split_fields temp___244)) = (Pump__float_number.of_real (0.0E-2)))) else true) ) /\ (if ((Pump__pump.fuel_type__pred temp___244)) then (
     ((Pump__fuel_types.to_rep (Pump__pump.rec__fuel_type (Pump__pump.__split_fields temp___244))) = 0)) else true) )))
  ) else true) ) /\ (if ((Pump_unit__pump_unit.pump_diesel__pred temp___240)) then (
   (let temp___245 = (Pump_unit__pump_unit.rec__pump_diesel (Pump_unit__pump_unit.__split_fields temp___240)) in (
    ( ( ( ( ( (if ((Pump__pump.reservoir_info__pred temp___245)) then (
     ((Pump__pump.rec__reservoir_info (Pump__pump.__split_fields temp___245)) = { Pump__reservoir.__split_fields = { Pump__reservoir.rec__total = (Pump__float_number.of_real (10.0)); Pump__reservoir.rec__reservoir_category = (Pump__fuel_types.of_rep 0) } })) else true) /\ (if ((Pump__pump.pump_state__pred temp___245)) then (
     ((Pump__state_type.to_rep (Pump__pump.rec__pump_state (Pump__pump.__split_fields temp___245))) = 0)) else true) ) /\ (if ((Pump__pump.pumped__pred temp___245)) then (
     ((Pump__pump.rec__pumped (Pump__pump.__split_fields temp___245)) = (Pump__float_number.of_real (0.0E-2)))) else true) ) /\ (if ((Pump__pump.nozzle_state__pred temp___245)) then (
     ((Pump__nozzle_type.to_rep (Pump__pump.rec__nozzle_state (Pump__pump.__split_fields temp___245))) = 0)) else true) ) /\ (if ((Pump__pump.unit_price__pred temp___245)) then (
     ((Pump__pump.rec__unit_price (Pump__pump.__split_fields temp___245)) = (Pump__float_number.of_real (0.0E-2)))) else true) ) /\ (if ((Pump__pump.fuel_type__pred temp___245)) then (
     ((Pump__fuel_types.to_rep (Pump__pump.rec__fuel_type (Pump__pump.__split_fields temp___245))) = 0)) else true) )))
  ) else true) )

end

(* Module giving axioms for type "Tfloat_numberB" defined at cash_register.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Cash_register__Tfloat_numberB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "float_number" defined at cash_register.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Cash_register__float_number__axiom
 use import "_gnatprove_standard".Main
 use        Cash_register__float_number

 predicate dynamic_invariant #"pump.ads" 20 0 0# "inline" 
   (temp___expr_249 : Cash_register__float_number.float_number) (temp___is_init_246 : bool) (temp___do_constant_247 : bool) (temp___do_toplevel_248 : bool)  =
  true
 
 predicate default_initial_assumption #"cash_register.ads" 8 0 0# "inline" 
   (temp___250 : Cash_register__float_number.float_number) (temp___251 : bool)  =
  true

end

(* Module giving axioms for type "Tunit_id_typeP1" defined at cash_register.ads:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Cash_register__Tunit_id_typeP1__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "unit_id_type" defined at cash_register.ads:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Cash_register__unit_id_type__axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 predicate dynamic_invariant #"cash_register.ads" 8 0 0# "inline" 
   (temp___expr_255 : Array__Int__Standard__character.map) (temp___is_init_252 : bool) (temp___do_constant_253 : bool) (temp___do_toplevel_254 : bool)  =
  true
 
 predicate default_initial_assumption #"cash_register.ads" 9 0 0# "inline" 
   (temp___257 : Array__Int__Standard__character.map) (temp___258 : bool)  =
  true

end

(* Module giving axioms for type "pump_unit_id" defined at cash_register.ads:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Cash_register__pump_unit_id__axiom
 use import "_gnatprove_standard".Main
 use        Cash_register__pump_unit_id

 predicate dynamic_invariant #"cash_register.ads" 9 0 0# "inline" 
   (temp___expr_264 : Cash_register__pump_unit_id.pump_unit_id) (temp___is_init_261 : bool) (temp___do_constant_262 : bool) (temp___do_toplevel_263 : bool)  =
  true
 
 predicate default_initial_assumption #"cash_register.ads" 14 0 0# "inline" 
   (temp___266 : Cash_register__pump_unit_id.pump_unit_id) (temp___267 : bool)  =
  true

end

(* Module giving axioms for type "cash_register" defined at cash_register.ads:24, created in Gnat2Why.Types.Generate_Type_Completion *)
module Cash_register__cash_register__axiom
 use import "_gnatprove_standard".Main
 use        Cash_register__cash_register

 predicate dynamic_invariant #"cash_register.ads" 14 0 0# "inline" 
   (temp___expr_277 : Cash_register__cash_register.cash_register) (temp___is_init_274 : bool) (temp___do_constant_275 : bool) (temp___do_toplevel_276 : bool)  =
  true
 
 predicate default_initial_assumption #"cash_register.ads" 24 0 0# "inline" 
   (temp___279 : Cash_register__cash_register.cash_register) (temp___280 : bool)  =
  true

end

(* Module giving axioms for type "root_stream_type" defined at a-stream.ads:70, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__streams__root_stream_type__axiom
 use import "_gnatprove_standard".Main
 use        Ada__streams__root_stream_type

 predicate dynamic_invariant #"cash_register.ads" 24 0 0# "inline" 
   (temp___expr_291 : Ada__streams__root_stream_type.root_stream_type) (temp___is_init_288 : bool) (temp___do_constant_289 : bool) (temp___do_toplevel_290 : bool)  =
  true
 
 predicate default_initial_assumption #"a-stream.ads" 70 0 0# "inline" 
   (temp___292 : Ada__streams__root_stream_type.root_stream_type) (temp___293 : bool)  =
  ((Ada__streams__root_stream_type.attr__tag temp___292) = Ada__streams__root_stream_type.__tag)

end

(* Module giving axioms for type "stream_element" defined at a-stream.ads:42, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__streams__stream_element__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8
 use        Ada__streams__stream_element

 predicate dynamic_invariant #"a-stream.ads" 70 0 0# "inline" 
   (temp___expr_297 : BV8.t) (temp___is_init_294 : bool) (temp___do_constant_295 : bool) (temp___do_toplevel_296 : bool)  =
  (if (( temp___is_init_294 \/ (BV8.ule Ada__streams__stream_element.first Ada__streams__stream_element.last) )) then (
   (Ada__streams__stream_element.dynamic_property Ada__streams__stream_element.first Ada__streams__stream_element.last temp___expr_297)) else true)
 
 predicate default_initial_assumption #"a-stream.ads" 42 0 0# "inline" 
   (temp___298 : BV8.t) (temp___299 : bool)  =
  true

end

(* Module giving axioms for type "Tstream_element_offsetB" defined at a-stream.ads:44, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__streams__Tstream_element_offsetB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "stream_element_offset" defined at a-stream.ads:44, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__streams__stream_element_offset__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__streams__stream_element_offset

 predicate dynamic_invariant #"a-stream.ads" 42 0 0# "inline" 
   (temp___expr_303 : int) (temp___is_init_300 : bool) (temp___do_constant_301 : bool) (temp___do_toplevel_302 : bool)  =
  (if (( temp___is_init_300 \/ (Ada__streams__stream_element_offset.first <= Ada__streams__stream_element_offset.last) )) then (
   (Ada__streams__stream_element_offset.dynamic_property Ada__streams__stream_element_offset.first Ada__streams__stream_element_offset.last temp___expr_303)) else true)
 
 predicate default_initial_assumption #"a-stream.ads" 44 0 0# "inline" 
   (temp___304 : int) (temp___305 : bool)  =
  true

end

(* Module giving axioms for type "stream_element_count" defined at a-stream.ads:51, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__streams__stream_element_count__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__streams__stream_element_count

 predicate dynamic_invariant #"a-stream.ads" 44 0 0# "inline" 
   (temp___expr_309 : int) (temp___is_init_306 : bool) (temp___do_constant_307 : bool) (temp___do_toplevel_308 : bool)  =
  (if (( temp___is_init_306 \/ (Ada__streams__stream_element_count.first <= Ada__streams__stream_element_count.last) )) then (
   (Ada__streams__stream_element_count.dynamic_property Ada__streams__stream_element_count.first Ada__streams__stream_element_count.last temp___expr_309)) else true)
 
 predicate default_initial_assumption #"a-stream.ads" 51 0 0# "inline" 
   (temp___310 : int) (temp___311 : bool)  =
  true

end

(* Module giving axioms for type "stream_element_array" defined at a-stream.ads:54, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__streams__stream_element_array__axiom
 use import "_gnatprove_standard".Main
 use        Ada__streams__stream_element_offset
 use        Ada__streams__stream_element_array

 predicate dynamic_invariant #"a-stream.ads" 51 0 0# "inline" 
   (temp___expr_315 : Ada__streams__stream_element_array.stream_element_array) (temp___is_init_312 : bool) (temp___do_constant_313 : bool) (temp___do_toplevel_314 : bool)  =
  (if (temp___do_constant_313) then (
   true) else (
   (Ada__streams__stream_element_array.dynamic_property Ada__streams__stream_element_offset.first Ada__streams__stream_element_offset.last (Ada__streams__stream_element_array.first temp___expr_315) (Ada__streams__stream_element_array.last temp___expr_315))))

end

(* Module giving axioms for type "Troot_stream_typeC" defined at a-stream.ads:39, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__streams__Troot_stream_typeC__axiom
 use import "_gnatprove_standard".Main
 use        Ada__streams__root_stream_type

 predicate dynamic_invariant #"a-stream.ads" 54 0 0# "inline" 
   (temp___expr_321 : Ada__streams__root_stream_type.root_stream_type) (temp___is_init_318 : bool) (temp___do_constant_319 : bool) (temp___do_toplevel_320 : bool)  =
  true

end

(* Module giving axioms for type "name" defined at system.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__name__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__name

 predicate dynamic_invariant #"a-stream.ads" 70 0 0# "inline" 
   (temp___expr_325 : int) (temp___is_init_322 : bool) (temp___do_constant_323 : bool) (temp___do_toplevel_324 : bool)  =
  (if (( temp___is_init_322 \/ (System__name.first <= System__name.last) )) then (
   (System__name.dynamic_property System__name.first System__name.last temp___expr_325)) else true)
 
 predicate default_initial_assumption #"system.ads" 46 0 0# "inline" 
   (temp___326 : int) (temp___327 : bool)  =
  true

end

(* Module giving axioms for type "address" defined at system.ads:108, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__address__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__address

 predicate dynamic_invariant #"system.ads" 46 0 0# "inline" 
   (temp___expr_331 : BV32.t) (temp___is_init_328 : bool) (temp___do_constant_329 : bool) (temp___do_toplevel_330 : bool)  =
  (if (( temp___is_init_328 \/ (BV32.ule System__address.first System__address.last) )) then (
   (System__address.dynamic_property System__address.first System__address.last temp___expr_331)) else true)
 
 predicate default_initial_assumption #"system.ads" 108 0 0# "inline" 
   (temp___332 : BV32.t) (temp___333 : bool)  =
  true

end

(* Module giving axioms for type "bit_order" defined at system.ads:91, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__bit_order__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__bit_order

 predicate dynamic_invariant #"system.ads" 108 0 0# "inline" 
   (temp___expr_337 : int) (temp___is_init_334 : bool) (temp___do_constant_335 : bool) (temp___do_toplevel_336 : bool)  =
  (if (( temp___is_init_334 \/ (System__bit_order.first <= System__bit_order.last) )) then (
   (System__bit_order.dynamic_property System__bit_order.first System__bit_order.last temp___expr_337)) else true)
 
 predicate default_initial_assumption #"system.ads" 91 0 0# "inline" 
   (temp___338 : int) (temp___339 : bool)  =
  true

end

(* Module giving axioms for type "any_priority" defined at system.ads:100, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__any_priority__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__any_priority

 predicate dynamic_invariant #"system.ads" 91 0 0# "inline" 
   (temp___expr_343 : int) (temp___is_init_340 : bool) (temp___do_constant_341 : bool) (temp___do_toplevel_342 : bool)  =
  (if (( temp___is_init_340 \/ (System__any_priority.first <= System__any_priority.last) )) then (
   (System__any_priority.dynamic_property System__any_priority.first System__any_priority.last temp___expr_343)) else true)
 
 predicate default_initial_assumption #"system.ads" 100 0 0# "inline" 
   (temp___344 : int) (temp___345 : bool)  =
  true

end

(* Module giving axioms for type "priority" defined at system.ads:101, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__priority__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__priority

 predicate dynamic_invariant #"system.ads" 100 0 0# "inline" 
   (temp___expr_349 : int) (temp___is_init_346 : bool) (temp___do_constant_347 : bool) (temp___do_toplevel_348 : bool)  =
  (if (( temp___is_init_346 \/ (System__priority.first <= System__priority.last) )) then (
   (System__priority.dynamic_property System__priority.first System__priority.last temp___expr_349)) else true)
 
 predicate default_initial_assumption #"system.ads" 101 0 0# "inline" 
   (temp___350 : int) (temp___351 : bool)  =
  true

end

(* Module giving axioms for type "interrupt_priority" defined at system.ads:102, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__interrupt_priority__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__interrupt_priority

 predicate dynamic_invariant #"system.ads" 101 0 0# "inline" 
   (temp___expr_355 : int) (temp___is_init_352 : bool) (temp___do_constant_353 : bool) (temp___do_toplevel_354 : bool)  =
  (if (( temp___is_init_352 \/ (System__interrupt_priority.first <= System__interrupt_priority.last) )) then (
   (System__interrupt_priority.dynamic_property System__interrupt_priority.first System__interrupt_priority.last temp___expr_355)) else true)
 
 predicate default_initial_assumption #"system.ads" 102 0 0# "inline" 
   (temp___356 : int) (temp___357 : bool)  =
  true

end

(* Module giving axioms for type "Tpriorities_mappingB" defined at system.ads:161, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__Tpriorities_mappingB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "priorities_mapping" defined at system.ads:161, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__priorities_mapping__axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer

 predicate dynamic_invariant #"system.ads" 102 0 0# "inline" 
   (temp___expr_361 : Array__Int__Standard__integer.map) (temp___is_init_358 : bool) (temp___do_constant_359 : bool) (temp___do_toplevel_360 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 161 0 0# "inline" 
   (temp___363 : Array__Int__Standard__integer.map) (temp___364 : bool)  =
  true

end

(* Module giving axioms for type "T3s" defined at system.ads:166, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__T3s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T4s" defined at system.ads:166, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__T4s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "Ttask_storage_sizeB" defined at s-parame.ads:58, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__parameters__Ttask_storage_sizeB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "task_storage_size" defined at s-parame.ads:58, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__parameters__task_storage_size__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__parameters__task_storage_size

 predicate dynamic_invariant #"system.ads" 161 0 0# "inline" 
   (temp___expr_370 : int) (temp___is_init_367 : bool) (temp___do_constant_368 : bool) (temp___do_toplevel_369 : bool)  =
  (if (( temp___is_init_367 \/ (System__parameters__task_storage_size.first <= System__parameters__task_storage_size.last) )) then (
   (System__parameters__task_storage_size.dynamic_property System__parameters__task_storage_size.first System__parameters__task_storage_size.last temp___expr_370)) else true)
 
 predicate default_initial_assumption #"s-parame.ads" 58 0 0# "inline" 
   (temp___371 : int) (temp___372 : bool)  =
  true

end

(* Module giving axioms for type "Tsize_typeB" defined at s-parame.ads:61, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__parameters__Tsize_typeB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "size_type" defined at s-parame.ads:61, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__parameters__size_type__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__parameters__size_type

 predicate dynamic_invariant #"s-parame.ads" 58 0 0# "inline" 
   (temp___expr_376 : int) (temp___is_init_373 : bool) (temp___do_constant_374 : bool) (temp___do_toplevel_375 : bool)  =
  (if (( temp___is_init_373 \/ (System__parameters__size_type.first <= System__parameters__size_type.last) )) then (
   (System__parameters__size_type.dynamic_property System__parameters__size_type.first System__parameters__size_type.last temp___expr_376)) else true)
 
 predicate default_initial_assumption #"s-parame.ads" 61 0 0# "inline" 
   (temp___377 : int) (temp___378 : bool)  =
  true

end

(* Module giving axioms for type "percentage" defined at s-parame.ads:67, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__parameters__percentage__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__parameters__percentage

 predicate dynamic_invariant #"s-parame.ads" 61 0 0# "inline" 
   (temp___expr_382 : int) (temp___is_init_379 : bool) (temp___do_constant_380 : bool) (temp___do_toplevel_381 : bool)  =
  (if (( temp___is_init_379 \/ (System__parameters__percentage.first <= System__parameters__percentage.last) )) then (
   (System__parameters__percentage.dynamic_property System__parameters__percentage.first System__parameters__percentage.last temp___expr_382)) else true)
 
 predicate default_initial_assumption #"s-parame.ads" 67 0 0# "inline" 
   (temp___383 : int) (temp___384 : bool)  =
  true

end

(* Module giving axioms for type "c_address" defined at s-parame.ads:116, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__parameters__c_address__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T1s" defined at s-parame.ads:119, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__parameters__T1s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "chars" defined at s-crtl.ads:41, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__chars__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "dirs" defined at s-crtl.ads:47, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__dirs__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "files" defined at s-crtl.ads:50, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__files__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "int" defined at s-crtl.ads:53, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__int__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__crtl__int

 predicate dynamic_invariant #"s-parame.ads" 67 0 0# "inline" 
   (temp___expr_388 : int) (temp___is_init_385 : bool) (temp___do_constant_386 : bool) (temp___do_toplevel_387 : bool)  =
  (if (( temp___is_init_385 \/ (System__crtl__int.first <= System__crtl__int.last) )) then (
   (System__crtl__int.dynamic_property System__crtl__int.first System__crtl__int.last temp___expr_388)) else true)
 
 predicate default_initial_assumption #"s-crtl.ads" 53 0 0# "inline" 
   (temp___389 : int) (temp___390 : bool)  =
  true

end

(* Module giving axioms for type "TlongB" defined at s-crtl.ads:55, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__TlongB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "long" defined at s-crtl.ads:55, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__long__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__crtl__long

 predicate dynamic_invariant #"s-crtl.ads" 53 0 0# "inline" 
   (temp___expr_394 : int) (temp___is_init_391 : bool) (temp___do_constant_392 : bool) (temp___do_toplevel_393 : bool)  =
  (if (( temp___is_init_391 \/ (System__crtl__long.first <= System__crtl__long.last) )) then (
   (System__crtl__long.dynamic_property System__crtl__long.first System__crtl__long.last temp___expr_394)) else true)
 
 predicate default_initial_assumption #"s-crtl.ads" 55 0 0# "inline" 
   (temp___395 : int) (temp___396 : bool)  =
  true

end

(* Module giving axioms for type "off_t" defined at s-crtl.ads:58, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__off_t__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__crtl__off_t

 predicate dynamic_invariant #"s-crtl.ads" 55 0 0# "inline" 
   (temp___expr_400 : int) (temp___is_init_397 : bool) (temp___do_constant_398 : bool) (temp___do_toplevel_399 : bool)  =
  (if (( temp___is_init_397 \/ (System__crtl__off_t.first <= System__crtl__off_t.last) )) then (
   (System__crtl__off_t.dynamic_property System__crtl__off_t.first System__crtl__off_t.last temp___expr_400)) else true)
 
 predicate default_initial_assumption #"s-crtl.ads" 58 0 0# "inline" 
   (temp___401 : int) (temp___402 : bool)  =
  true

end

(* Module giving axioms for type "size_t" defined at s-crtl.ads:60, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__size_t__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__crtl__size_t

 predicate dynamic_invariant #"s-crtl.ads" 58 0 0# "inline" 
   (temp___expr_406 : BV32.t) (temp___is_init_403 : bool) (temp___do_constant_404 : bool) (temp___do_toplevel_405 : bool)  =
  (if (( temp___is_init_403 \/ (BV32.ule System__crtl__size_t.first System__crtl__size_t.last) )) then (
   (System__crtl__size_t.dynamic_property System__crtl__size_t.first System__crtl__size_t.last temp___expr_406)) else true)
 
 predicate default_initial_assumption #"s-crtl.ads" 60 0 0# "inline" 
   (temp___407 : BV32.t) (temp___408 : bool)  =
  true

end

(* Module giving axioms for type "Tssize_tB" defined at s-crtl.ads:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__Tssize_tB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "ssize_t" defined at s-crtl.ads:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__ssize_t__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__crtl__ssize_t

 predicate dynamic_invariant #"s-crtl.ads" 60 0 0# "inline" 
   (temp___expr_412 : int) (temp___is_init_409 : bool) (temp___do_constant_410 : bool) (temp___do_toplevel_411 : bool)  =
  (if (( temp___is_init_409 \/ (System__crtl__ssize_t.first <= System__crtl__ssize_t.last) )) then (
   (System__crtl__ssize_t.dynamic_property System__crtl__ssize_t.first System__crtl__ssize_t.last temp___expr_412)) else true)
 
 predicate default_initial_assumption #"s-crtl.ads" 62 0 0# "inline" 
   (temp___413 : int) (temp___414 : bool)  =
  true

end

(* Module giving axioms for type "Tint64B" defined at s-crtl.ads:65, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__Tint64B__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "int64" defined at s-crtl.ads:65, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__int64__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__crtl__int64

 predicate dynamic_invariant #"s-crtl.ads" 62 0 0# "inline" 
   (temp___expr_418 : int) (temp___is_init_415 : bool) (temp___do_constant_416 : bool) (temp___do_toplevel_417 : bool)  =
  (if (( temp___is_init_415 \/ (System__crtl__int64.first <= System__crtl__int64.last) )) then (
   (System__crtl__int64.dynamic_property System__crtl__int64.first System__crtl__int64.last temp___expr_418)) else true)
 
 predicate default_initial_assumption #"s-crtl.ads" 65 0 0# "inline" 
   (temp___419 : int) (temp___420 : bool)  =
  true

end

(* Module giving axioms for type "filename_encoding" defined at s-crtl.ads:72, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__filename_encoding__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__crtl__filename_encoding

 predicate dynamic_invariant #"s-crtl.ads" 65 0 0# "inline" 
   (temp___expr_424 : int) (temp___is_init_421 : bool) (temp___do_constant_422 : bool) (temp___do_toplevel_423 : bool)  =
  (if (( temp___is_init_421 \/ (System__crtl__filename_encoding.first <= System__crtl__filename_encoding.last) )) then (
   (System__crtl__filename_encoding.dynamic_property System__crtl__filename_encoding.first System__crtl__filename_encoding.last temp___expr_424)) else true)
 
 predicate default_initial_assumption #"s-crtl.ads" 72 0 0# "inline" 
   (temp___425 : int) (temp___426 : bool)  =
  true

end

(* Module giving axioms for type "Tinteger_8B" defined at interfac.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tinteger_8B__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "integer_8" defined at interfac.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__integer_8__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__integer_8

 predicate dynamic_invariant #"s-crtl.ads" 72 0 0# "inline" 
   (temp___expr_430 : int) (temp___is_init_427 : bool) (temp___do_constant_428 : bool) (temp___do_toplevel_429 : bool)  =
  (if (( temp___is_init_427 \/ (Interfaces__integer_8.first <= Interfaces__integer_8.last) )) then (
   (Interfaces__integer_8.dynamic_property Interfaces__integer_8.first Interfaces__integer_8.last temp___expr_430)) else true)
 
 predicate default_initial_assumption #"interfac.ads" 46 0 0# "inline" 
   (temp___431 : int) (temp___432 : bool)  =
  true

end

(* Module giving axioms for type "Tinteger_16B" defined at interfac.ads:49, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tinteger_16B__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "integer_16" defined at interfac.ads:49, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__integer_16__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__integer_16

 predicate dynamic_invariant #"interfac.ads" 46 0 0# "inline" 
   (temp___expr_436 : int) (temp___is_init_433 : bool) (temp___do_constant_434 : bool) (temp___do_toplevel_435 : bool)  =
  (if (( temp___is_init_433 \/ (Interfaces__integer_16.first <= Interfaces__integer_16.last) )) then (
   (Interfaces__integer_16.dynamic_property Interfaces__integer_16.first Interfaces__integer_16.last temp___expr_436)) else true)
 
 predicate default_initial_assumption #"interfac.ads" 49 0 0# "inline" 
   (temp___437 : int) (temp___438 : bool)  =
  true

end

(* Module giving axioms for type "Tinteger_32B" defined at interfac.ads:52, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tinteger_32B__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "integer_32" defined at interfac.ads:52, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__integer_32__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__integer_32

 predicate dynamic_invariant #"interfac.ads" 49 0 0# "inline" 
   (temp___expr_442 : int) (temp___is_init_439 : bool) (temp___do_constant_440 : bool) (temp___do_toplevel_441 : bool)  =
  (if (( temp___is_init_439 \/ (Interfaces__integer_32.first <= Interfaces__integer_32.last) )) then (
   (Interfaces__integer_32.dynamic_property Interfaces__integer_32.first Interfaces__integer_32.last temp___expr_442)) else true)
 
 predicate default_initial_assumption #"interfac.ads" 52 0 0# "inline" 
   (temp___443 : int) (temp___444 : bool)  =
  true

end

(* Module giving axioms for type "Tinteger_64B" defined at interfac.ads:55, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tinteger_64B__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "integer_64" defined at interfac.ads:55, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__integer_64__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__integer_64

 predicate dynamic_invariant #"interfac.ads" 52 0 0# "inline" 
   (temp___expr_448 : int) (temp___is_init_445 : bool) (temp___do_constant_446 : bool) (temp___do_toplevel_447 : bool)  =
  (if (( temp___is_init_445 \/ (Interfaces__integer_64.first <= Interfaces__integer_64.last) )) then (
   (Interfaces__integer_64.dynamic_property Interfaces__integer_64.first Interfaces__integer_64.last temp___expr_448)) else true)
 
 predicate default_initial_assumption #"interfac.ads" 55 0 0# "inline" 
   (temp___449 : int) (temp___450 : bool)  =
  true

end

(* Module giving axioms for type "unsigned_8" defined at interfac.ads:63, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__unsigned_8__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8
 use        Interfaces__unsigned_8

 predicate dynamic_invariant #"interfac.ads" 55 0 0# "inline" 
   (temp___expr_454 : BV8.t) (temp___is_init_451 : bool) (temp___do_constant_452 : bool) (temp___do_toplevel_453 : bool)  =
  (if (( temp___is_init_451 \/ (BV8.ule Interfaces__unsigned_8.first Interfaces__unsigned_8.last) )) then (
   (Interfaces__unsigned_8.dynamic_property Interfaces__unsigned_8.first Interfaces__unsigned_8.last temp___expr_454)) else true)
 
 predicate default_initial_assumption #"interfac.ads" 63 0 0# "inline" 
   (temp___455 : BV8.t) (temp___456 : bool)  =
  true

end

(* Module giving axioms for type "unsigned_16" defined at interfac.ads:66, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__unsigned_16__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16
 use        Interfaces__unsigned_16

 predicate dynamic_invariant #"interfac.ads" 63 0 0# "inline" 
   (temp___expr_460 : BV16.t) (temp___is_init_457 : bool) (temp___do_constant_458 : bool) (temp___do_toplevel_459 : bool)  =
  (if (( temp___is_init_457 \/ (BV16.ule Interfaces__unsigned_16.first Interfaces__unsigned_16.last) )) then (
   (Interfaces__unsigned_16.dynamic_property Interfaces__unsigned_16.first Interfaces__unsigned_16.last temp___expr_460)) else true)
 
 predicate default_initial_assumption #"interfac.ads" 66 0 0# "inline" 
   (temp___461 : BV16.t) (temp___462 : bool)  =
  true

end

(* Module giving axioms for type "unsigned_24" defined at interfac.ads:69, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__unsigned_24__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        Interfaces__unsigned_24

 predicate dynamic_invariant #"interfac.ads" 66 0 0# "inline" 
   (temp___expr_466 : BV32.t) (temp___is_init_463 : bool) (temp___do_constant_464 : bool) (temp___do_toplevel_465 : bool)  =
  (if (( temp___is_init_463 \/ (BV32.ule Interfaces__unsigned_24.first Interfaces__unsigned_24.last) )) then (
   (Interfaces__unsigned_24.dynamic_property Interfaces__unsigned_24.first Interfaces__unsigned_24.last temp___expr_466)) else true)
 
 predicate default_initial_assumption #"interfac.ads" 69 0 0# "inline" 
   (temp___467 : BV32.t) (temp___468 : bool)  =
  true

end

(* Module giving axioms for type "unsigned_32" defined at interfac.ads:74, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__unsigned_32__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        Interfaces__unsigned_32

 predicate dynamic_invariant #"interfac.ads" 69 0 0# "inline" 
   (temp___expr_472 : BV32.t) (temp___is_init_469 : bool) (temp___do_constant_470 : bool) (temp___do_toplevel_471 : bool)  =
  (if (( temp___is_init_469 \/ (BV32.ule Interfaces__unsigned_32.first Interfaces__unsigned_32.last) )) then (
   (Interfaces__unsigned_32.dynamic_property Interfaces__unsigned_32.first Interfaces__unsigned_32.last temp___expr_472)) else true)
 
 predicate default_initial_assumption #"interfac.ads" 74 0 0# "inline" 
   (temp___473 : BV32.t) (temp___474 : bool)  =
  true

end

(* Module giving axioms for type "unsigned_64" defined at interfac.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__unsigned_64__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Interfaces__unsigned_64

 predicate dynamic_invariant #"interfac.ads" 74 0 0# "inline" 
   (temp___expr_478 : BV64.t) (temp___is_init_475 : bool) (temp___do_constant_476 : bool) (temp___do_toplevel_477 : bool)  =
  (if (( temp___is_init_475 \/ (BV64.ule Interfaces__unsigned_64.first Interfaces__unsigned_64.last) )) then (
   (Interfaces__unsigned_64.dynamic_property Interfaces__unsigned_64.first Interfaces__unsigned_64.last temp___expr_478)) else true)
 
 predicate default_initial_assumption #"interfac.ads" 77 0 0# "inline" 
   (temp___479 : BV64.t) (temp___480 : bool)  =
  true

end

(* Module giving axioms for type "Tieee_float_32B" defined at interfac.ads:169, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tieee_float_32B__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "ieee_float_32" defined at interfac.ads:169, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__ieee_float_32__axiom
 use import "_gnatprove_standard".Main
 use        Interfaces__ieee_float_32

 predicate dynamic_invariant #"interfac.ads" 77 0 0# "inline" 
   (temp___expr_484 : Interfaces__ieee_float_32.ieee_float_32) (temp___is_init_481 : bool) (temp___do_constant_482 : bool) (temp___do_toplevel_483 : bool)  =
  true
 
 predicate default_initial_assumption #"interfac.ads" 169 0 0# "inline" 
   (temp___485 : Interfaces__ieee_float_32.ieee_float_32) (temp___486 : bool)  =
  true

end

(* Module giving axioms for type "Tieee_float_64B" defined at interfac.ads:172, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tieee_float_64B__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "ieee_float_64" defined at interfac.ads:172, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__ieee_float_64__axiom
 use import "_gnatprove_standard".Main
 use        Interfaces__ieee_float_64

 predicate dynamic_invariant #"interfac.ads" 169 0 0# "inline" 
   (temp___expr_490 : Interfaces__ieee_float_64.ieee_float_64) (temp___is_init_487 : bool) (temp___do_constant_488 : bool) (temp___do_toplevel_489 : bool)  =
  true
 
 predicate default_initial_assumption #"interfac.ads" 172 0 0# "inline" 
   (temp___491 : Interfaces__ieee_float_64.ieee_float_64) (temp___492 : bool)  =
  true

end

(* Module giving axioms for type "Tieee_extended_floatB" defined at interfac.ads:182, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tieee_extended_floatB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "ieee_extended_float" defined at interfac.ads:182, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__ieee_extended_float__axiom
 use import "_gnatprove_standard".Main
 use        Interfaces__ieee_extended_float

 predicate dynamic_invariant #"interfac.ads" 172 0 0# "inline" 
   (temp___expr_496 : Interfaces__ieee_extended_float.ieee_extended_float) (temp___is_init_493 : bool) (temp___do_constant_494 : bool) (temp___do_toplevel_495 : bool)  =
  true
 
 predicate default_initial_assumption #"interfac.ads" 182 0 0# "inline" 
   (temp___497 : Interfaces__ieee_extended_float.ieee_extended_float) (temp___498 : bool)  =
  true

end

(* Module giving axioms for type "chars" defined at i-cstrea.ads:40, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c_streams__chars__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "files" defined at i-cstrea.ads:41, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c_streams__files__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "int" defined at i-cstrea.ads:42, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c_streams__int__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__c_streams__int

 predicate dynamic_invariant #"interfac.ads" 182 0 0# "inline" 
   (temp___expr_502 : int) (temp___is_init_499 : bool) (temp___do_constant_500 : bool) (temp___do_toplevel_501 : bool)  =
  (if (( temp___is_init_499 \/ (Interfaces__c_streams__int.first <= Interfaces__c_streams__int.last) )) then (
   (Interfaces__c_streams__int.dynamic_property Interfaces__c_streams__int.first Interfaces__c_streams__int.last temp___expr_502)) else true)
 
 predicate default_initial_assumption #"i-cstrea.ads" 42 0 0# "inline" 
   (temp___503 : int) (temp___504 : bool)  =
  true

end

(* Module giving axioms for type "long" defined at i-cstrea.ads:43, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c_streams__long__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__c_streams__long

 predicate dynamic_invariant #"i-cstrea.ads" 42 0 0# "inline" 
   (temp___expr_508 : int) (temp___is_init_505 : bool) (temp___do_constant_506 : bool) (temp___do_toplevel_507 : bool)  =
  (if (( temp___is_init_505 \/ (Interfaces__c_streams__long.first <= Interfaces__c_streams__long.last) )) then (
   (Interfaces__c_streams__long.dynamic_property Interfaces__c_streams__long.first Interfaces__c_streams__long.last temp___expr_508)) else true)
 
 predicate default_initial_assumption #"i-cstrea.ads" 43 0 0# "inline" 
   (temp___509 : int) (temp___510 : bool)  =
  true

end

(* Module giving axioms for type "size_t" defined at i-cstrea.ads:44, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c_streams__size_t__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        Interfaces__c_streams__size_t

 predicate dynamic_invariant #"i-cstrea.ads" 43 0 0# "inline" 
   (temp___expr_514 : BV32.t) (temp___is_init_511 : bool) (temp___do_constant_512 : bool) (temp___do_toplevel_513 : bool)  =
  (if (( temp___is_init_511 \/ (BV32.ule Interfaces__c_streams__size_t.first Interfaces__c_streams__size_t.last) )) then (
   (Interfaces__c_streams__size_t.dynamic_property Interfaces__c_streams__size_t.first Interfaces__c_streams__size_t.last temp___expr_514)) else true)
 
 predicate default_initial_assumption #"i-cstrea.ads" 44 0 0# "inline" 
   (temp___515 : BV32.t) (temp___516 : bool)  =
  true

end

(* Module giving axioms for type "ssize_t" defined at i-cstrea.ads:45, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c_streams__ssize_t__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__c_streams__ssize_t

 predicate dynamic_invariant #"i-cstrea.ads" 44 0 0# "inline" 
   (temp___expr_520 : int) (temp___is_init_517 : bool) (temp___do_constant_518 : bool) (temp___do_toplevel_519 : bool)  =
  (if (( temp___is_init_517 \/ (Interfaces__c_streams__ssize_t.first <= Interfaces__c_streams__ssize_t.last) )) then (
   (Interfaces__c_streams__ssize_t.dynamic_property Interfaces__c_streams__ssize_t.first Interfaces__c_streams__ssize_t.last temp___expr_520)) else true)
 
 predicate default_initial_assumption #"i-cstrea.ads" 45 0 0# "inline" 
   (temp___521 : int) (temp___522 : bool)  =
  true

end

(* Module giving axioms for type "int64" defined at i-cstrea.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c_streams__int64__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__c_streams__int64

 predicate dynamic_invariant #"i-cstrea.ads" 45 0 0# "inline" 
   (temp___expr_526 : int) (temp___is_init_523 : bool) (temp___do_constant_524 : bool) (temp___do_toplevel_525 : bool)  =
  (if (( temp___is_init_523 \/ (Interfaces__c_streams__int64.first <= Interfaces__c_streams__int64.last) )) then (
   (Interfaces__c_streams__int64.dynamic_property Interfaces__c_streams__int64.first Interfaces__c_streams__int64.last temp___expr_526)) else true)
 
 predicate default_initial_assumption #"i-cstrea.ads" 46 0 0# "inline" 
   (temp___527 : int) (temp___528 : bool)  =
  true

end

(* Module giving axioms for type "voids" defined at i-cstrea.ads:47, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c_streams__voids__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "content_encoding" defined at i-cstrea.ads:230, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c_streams__content_encoding__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__c_streams__content_encoding

 predicate dynamic_invariant #"i-cstrea.ads" 46 0 0# "inline" 
   (temp___expr_532 : int) (temp___is_init_529 : bool) (temp___do_constant_530 : bool) (temp___do_toplevel_531 : bool)  =
  (if (( temp___is_init_529 \/ (Interfaces__c_streams__content_encoding.first <= Interfaces__c_streams__content_encoding.last) )) then (
   (Interfaces__c_streams__content_encoding.dynamic_property Interfaces__c_streams__content_encoding.first Interfaces__c_streams__content_encoding.last temp___expr_532)) else true)
 
 predicate default_initial_assumption #"i-cstrea.ads" 230 0 0# "inline" 
   (temp___533 : int) (temp___534 : bool)  =
  true

end

(* Module giving axioms for type "text_content_encoding" defined at i-cstrea.ads:248, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c_streams__text_content_encoding__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__c_streams__text_content_encoding

 predicate dynamic_invariant #"i-cstrea.ads" 230 0 0# "inline" 
   (temp___expr_538 : int) (temp___is_init_535 : bool) (temp___do_constant_536 : bool) (temp___do_toplevel_537 : bool)  =
  (if (( temp___is_init_535 \/ (Interfaces__c_streams__text_content_encoding.first <= Interfaces__c_streams__text_content_encoding.last) )) then (
   (Interfaces__c_streams__text_content_encoding.dynamic_property Interfaces__c_streams__text_content_encoding.first Interfaces__c_streams__text_content_encoding.last temp___expr_538)) else true)
 
 predicate default_initial_assumption #"i-cstrea.ads" 248 0 0# "inline" 
   (temp___539 : int) (temp___540 : bool)  =
  true

end

(* Module giving axioms for type "non_default_text_content_encoding" defined at i-cstrea.ads:251, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c_streams__non_default_text_content_encoding__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__c_streams__non_default_text_content_encoding

 predicate dynamic_invariant #"i-cstrea.ads" 248 0 0# "inline" 
   (temp___expr_544 : int) (temp___is_init_541 : bool) (temp___do_constant_542 : bool) (temp___do_toplevel_543 : bool)  =
  (if (( temp___is_init_541 \/ (Interfaces__c_streams__non_default_text_content_encoding.first <= Interfaces__c_streams__non_default_text_content_encoding.last) )) then (
   (Interfaces__c_streams__non_default_text_content_encoding.dynamic_property Interfaces__c_streams__non_default_text_content_encoding.first Interfaces__c_streams__non_default_text_content_encoding.last temp___expr_544)) else true)
 
 predicate default_initial_assumption #"i-cstrea.ads" 251 0 0# "inline" 
   (temp___545 : int) (temp___546 : bool)  =
  true

end

(* Module giving axioms for type "file_mode" defined at s-ficobl.ads:63, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__file_control_block__file_mode__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__file_control_block__file_mode

 predicate dynamic_invariant #"i-cstrea.ads" 251 0 0# "inline" 
   (temp___expr_550 : int) (temp___is_init_547 : bool) (temp___do_constant_548 : bool) (temp___do_toplevel_549 : bool)  =
  (if (( temp___is_init_547 \/ (System__file_control_block__file_mode.first <= System__file_control_block__file_mode.last) )) then (
   (System__file_control_block__file_mode.dynamic_property System__file_control_block__file_mode.first System__file_control_block__file_mode.last temp___expr_550)) else true)
 
 predicate default_initial_assumption #"s-ficobl.ads" 63 0 0# "inline" 
   (temp___551 : int) (temp___552 : bool)  =
  true

end

(* Module giving axioms for type "read_file_mode" defined at s-ficobl.ads:64, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__file_control_block__read_file_mode__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__file_control_block__read_file_mode

 predicate dynamic_invariant #"s-ficobl.ads" 63 0 0# "inline" 
   (temp___expr_556 : int) (temp___is_init_553 : bool) (temp___do_constant_554 : bool) (temp___do_toplevel_555 : bool)  =
  (if (( temp___is_init_553 \/ (System__file_control_block__read_file_mode.first <= System__file_control_block__read_file_mode.last) )) then (
   (System__file_control_block__read_file_mode.dynamic_property System__file_control_block__read_file_mode.first System__file_control_block__read_file_mode.last temp___expr_556)) else true)
 
 predicate default_initial_assumption #"s-ficobl.ads" 64 0 0# "inline" 
   (temp___557 : int) (temp___558 : bool)  =
  true

end

(* Module giving axioms for type "shared_status_type" defined at s-ficobl.ads:69, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__file_control_block__shared_status_type__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__file_control_block__shared_status_type

 predicate dynamic_invariant #"s-ficobl.ads" 64 0 0# "inline" 
   (temp___expr_562 : int) (temp___is_init_559 : bool) (temp___do_constant_560 : bool) (temp___do_toplevel_561 : bool)  =
  (if (( temp___is_init_559 \/ (System__file_control_block__shared_status_type.first <= System__file_control_block__shared_status_type.last) )) then (
   (System__file_control_block__shared_status_type.dynamic_property System__file_control_block__shared_status_type.first System__file_control_block__shared_status_type.last temp___expr_562)) else true)
 
 predicate default_initial_assumption #"s-ficobl.ads" 69 0 0# "inline" 
   (temp___563 : int) (temp___564 : bool)  =
  true

end

(* Module giving axioms for type "Twc_encoding_methodB" defined at s-wchcon.ads:94, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__Twc_encoding_methodB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "wc_encoding_method" defined at s-wchcon.ads:94, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__wc_encoding_method__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wc_encoding_method

 predicate dynamic_invariant #"s-ficobl.ads" 69 0 0# "inline" 
   (temp___expr_568 : int) (temp___is_init_565 : bool) (temp___do_constant_566 : bool) (temp___do_toplevel_567 : bool)  =
  (if (( temp___is_init_565 \/ (System__wch_con__wc_encoding_method.first <= System__wch_con__wc_encoding_method.last) )) then (
   (System__wch_con__wc_encoding_method.dynamic_property System__wch_con__wc_encoding_method.first System__wch_con__wc_encoding_method.last temp___expr_568)) else true)
 
 predicate default_initial_assumption #"s-wchcon.ads" 94 0 0# "inline" 
   (temp___569 : int) (temp___570 : bool)  =
  true

end

(* Module giving axioms for type "Twc_encoding_lettersB" defined at s-wchcon.ads:169, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__Twc_encoding_lettersB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "Twc_encoding_lettersT" defined at s-wchcon.ads:169, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__Twc_encoding_lettersT__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T3s" defined at s-wchcon.ads:170, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__T3s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T4s" defined at s-wchcon.ads:170, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__T4s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "wc_esc_encoding_method" defined at s-wchcon.ads:180, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__wc_esc_encoding_method__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wc_esc_encoding_method

 predicate dynamic_invariant #"s-wchcon.ads" 94 0 0# "inline" 
   (temp___expr_574 : int) (temp___is_init_571 : bool) (temp___do_constant_572 : bool) (temp___do_toplevel_573 : bool)  =
  (if (( temp___is_init_571 \/ (System__wch_con__wc_esc_encoding_method.first <= System__wch_con__wc_esc_encoding_method.last) )) then (
   (System__wch_con__wc_esc_encoding_method.dynamic_property System__wch_con__wc_esc_encoding_method.first System__wch_con__wc_esc_encoding_method.last temp___expr_574)) else true)
 
 predicate default_initial_assumption #"s-wchcon.ads" 180 0 0# "inline" 
   (temp___575 : int) (temp___576 : bool)  =
  true

end

(* Module giving axioms for type "wc_upper_half_encoding_method" defined at s-wchcon.ads:184, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__wc_upper_half_encoding_method__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wc_upper_half_encoding_method

 predicate dynamic_invariant #"s-wchcon.ads" 180 0 0# "inline" 
   (temp___expr_580 : int) (temp___is_init_577 : bool) (temp___do_constant_578 : bool) (temp___do_toplevel_579 : bool)  =
  (if (( temp___is_init_577 \/ (System__wch_con__wc_upper_half_encoding_method.first <= System__wch_con__wc_upper_half_encoding_method.last) )) then (
   (System__wch_con__wc_upper_half_encoding_method.dynamic_property System__wch_con__wc_upper_half_encoding_method.first System__wch_con__wc_upper_half_encoding_method.last temp___expr_580)) else true)
 
 predicate default_initial_assumption #"s-wchcon.ads" 184 0 0# "inline" 
   (temp___581 : int) (temp___582 : bool)  =
  true

end

(* Module giving axioms for type "Twc_longest_sequencesB" defined at s-wchcon.ads:193, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__Twc_longest_sequencesB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "Twc_longest_sequencesT" defined at s-wchcon.ads:193, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__Twc_longest_sequencesT__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T7s" defined at s-wchcon.ads:194, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__T7s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T8s" defined at s-wchcon.ads:194, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__T8s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "file_type" defined at a-textio.ads:52, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__file_type__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 predicate dynamic_invariant #"s-wchcon.ads" 184 0 0# "inline" 
   (temp___expr_586 : Ada__text_io__file_type.file_type) (temp___is_init_583 : bool) (temp___do_constant_584 : bool) (temp___do_toplevel_585 : bool)  =
  true
 
 predicate default_initial_assumption #"a-textio.ads" 52 0 0# "inline" 
   (temp___587 : Ada__text_io__file_type.file_type) (temp___588 : bool)  =
  true

end

(* Module giving axioms for type "file_mode" defined at a-textio.ads:53, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__file_mode__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__text_io__file_mode

 predicate dynamic_invariant #"a-textio.ads" 52 0 0# "inline" 
   (temp___expr_592 : int) (temp___is_init_589 : bool) (temp___do_constant_590 : bool) (temp___do_toplevel_591 : bool)  =
  (if (( temp___is_init_589 \/ (Ada__text_io__file_mode.first <= Ada__text_io__file_mode.last) )) then (
   (Ada__text_io__file_mode.dynamic_property Ada__text_io__file_mode.first Ada__text_io__file_mode.last temp___expr_592)) else true)
 
 predicate default_initial_assumption #"a-textio.ads" 53 0 0# "inline" 
   (temp___593 : int) (temp___594 : bool)  =
  true

end

(* Module giving axioms for type "TcountB" defined at a-textio.ads:64, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__TcountB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "count" defined at a-textio.ads:64, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__count__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__text_io__count

 predicate dynamic_invariant #"a-textio.ads" 53 0 0# "inline" 
   (temp___expr_598 : int) (temp___is_init_595 : bool) (temp___do_constant_596 : bool) (temp___do_toplevel_597 : bool)  =
  (if (( temp___is_init_595 \/ (Ada__text_io__count.first <= Ada__text_io__count.last) )) then (
   (Ada__text_io__count.dynamic_property Ada__text_io__count.first Ada__text_io__count.last temp___expr_598)) else true)
 
 predicate default_initial_assumption #"a-textio.ads" 64 0 0# "inline" 
   (temp___599 : int) (temp___600 : bool)  =
  true

end

(* Module giving axioms for type "positive_count" defined at a-textio.ads:68, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__positive_count__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__text_io__positive_count

 predicate dynamic_invariant #"a-textio.ads" 64 0 0# "inline" 
   (temp___expr_604 : int) (temp___is_init_601 : bool) (temp___do_constant_602 : bool) (temp___do_toplevel_603 : bool)  =
  (if (( temp___is_init_601 \/ (Ada__text_io__positive_count.first <= Ada__text_io__positive_count.last) )) then (
   (Ada__text_io__positive_count.dynamic_property Ada__text_io__positive_count.first Ada__text_io__positive_count.last temp___expr_604)) else true)
 
 predicate default_initial_assumption #"a-textio.ads" 68 0 0# "inline" 
   (temp___605 : int) (temp___606 : bool)  =
  true

end

(* Module giving axioms for type "field" defined at a-textio.ads:73, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__field__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__text_io__field

 predicate dynamic_invariant #"a-textio.ads" 68 0 0# "inline" 
   (temp___expr_610 : int) (temp___is_init_607 : bool) (temp___do_constant_608 : bool) (temp___do_toplevel_609 : bool)  =
  (if (( temp___is_init_607 \/ (Ada__text_io__field.first <= Ada__text_io__field.last) )) then (
   (Ada__text_io__field.dynamic_property Ada__text_io__field.first Ada__text_io__field.last temp___expr_610)) else true)
 
 predicate default_initial_assumption #"a-textio.ads" 73 0 0# "inline" 
   (temp___611 : int) (temp___612 : bool)  =
  true

end

(* Module giving axioms for type "number_base" defined at a-textio.ads:78, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__number_base__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__text_io__number_base

 predicate dynamic_invariant #"a-textio.ads" 73 0 0# "inline" 
   (temp___expr_616 : int) (temp___is_init_613 : bool) (temp___do_constant_614 : bool) (temp___do_toplevel_615 : bool)  =
  (if (( temp___is_init_613 \/ (Ada__text_io__number_base.first <= Ada__text_io__number_base.last) )) then (
   (Ada__text_io__number_base.dynamic_property Ada__text_io__number_base.first Ada__text_io__number_base.last temp___expr_616)) else true)
 
 predicate default_initial_assumption #"a-textio.ads" 78 0 0# "inline" 
   (temp___617 : int) (temp___618 : bool)  =
  true

end

(* Module giving axioms for type "type_set" defined at a-textio.ads:80, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__type_set__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__text_io__type_set

 predicate dynamic_invariant #"a-textio.ads" 78 0 0# "inline" 
   (temp___expr_622 : int) (temp___is_init_619 : bool) (temp___do_constant_620 : bool) (temp___do_toplevel_621 : bool)  =
  (if (( temp___is_init_619 \/ (Ada__text_io__type_set.first <= Ada__text_io__type_set.last) )) then (
   (Ada__text_io__type_set.dynamic_property Ada__text_io__type_set.first Ada__text_io__type_set.last temp___expr_622)) else true)
 
 predicate default_initial_assumption #"a-textio.ads" 80 0 0# "inline" 
   (temp___623 : int) (temp___624 : bool)  =
  true

end
(* Module for defining the value of constant "system_name" defined at system.ads:47, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__system_name__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__system_name

 axiom system_name__def_axiom :
  ((System__system_name.system_name ) = 0)

end

(* Module for defining the value of constant "min_int" defined at system.ads:51, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__min_int__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__min_int

 axiom min_int__def_axiom :
  ((System__min_int.min_int ) = ( -9223372036854775808 ))

end

(* Module for defining the value of constant "max_int" defined at system.ads:52, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_int__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_int

 axiom max_int__def_axiom :
  ((System__max_int.max_int ) = 9223372036854775807)

end

(* Module for defining the value of constant "max_binary_modulus" defined at system.ads:54, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_binary_modulus__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_binary_modulus

 axiom max_binary_modulus__def_axiom :
  ((System__max_binary_modulus.max_binary_modulus ) = 18446744073709551616)

end

(* Module for defining the value of constant "max_nonbinary_modulus" defined at system.ads:55, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_nonbinary_modulus__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_nonbinary_modulus

 axiom max_nonbinary_modulus__def_axiom :
  ((System__max_nonbinary_modulus.max_nonbinary_modulus ) = 4294967295)

end

(* Module for defining the value of constant "max_base_digits" defined at system.ads:57, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_base_digits__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_base_digits

 axiom max_base_digits__def_axiom :
  ((System__max_base_digits.max_base_digits ) = 18)

end

(* Module for defining the value of constant "max_digits" defined at system.ads:58, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_digits__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_digits

 axiom max_digits__def_axiom :
  ((System__max_digits.max_digits ) = 18)

end

(* Module for defining the value of constant "max_mantissa" defined at system.ads:60, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_mantissa__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_mantissa

 axiom max_mantissa__def_axiom :
  ((System__max_mantissa.max_mantissa ) = 63)

end

(* Module for defining the value of constant "fine_delta" defined at system.ads:61, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__fine_delta__axiom
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        Standard__universal_real
 use        System__fine_delta

 axiom fine_delta__def_axiom :
  ((System__fine_delta.fine_delta ) = (Standard__universal_real.of_real (0.000000000000000000108420217248550443400745280086994171142578125)))

end

(* Module for defining the value of constant "tick" defined at system.ads:63, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__tick__axiom
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        Standard__universal_real
 use        System__tick

 axiom tick__def_axiom :
  ((System__tick.tick ) = (Standard__universal_real.of_real (1.0E-2)))

end

(* Module for defining the value of constant "storage_unit" defined at system.ads:71, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__storage_unit__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__storage_unit

 axiom storage_unit__def_axiom :
  ((System__storage_unit.storage_unit ) = 8)

end

(* Module for defining the value of constant "word_size" defined at system.ads:72, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__word_size__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__word_size

 axiom word_size__def_axiom :
  ((System__word_size.word_size ) = 32)

end

(* Module for defining the value of constant "memory_size" defined at system.ads:73, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__memory_size__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__memory_size

 axiom memory_size__def_axiom :
  ((System__memory_size.memory_size ) = 4294967296)

end

(* Module for defining the value of constant "default_bit_order" defined at system.ads:92, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__default_bit_order__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__default_bit_order

 axiom default_bit_order__def_axiom :
  ((System__default_bit_order.default_bit_order ) = 1)

end

(* Module for defining the value of constant "max_priority" defined at system.ads:97, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_priority__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_priority

 axiom max_priority__def_axiom :
  ((System__max_priority.max_priority ) = 30)

end

(* Module for defining the value of constant "max_interrupt_priority" defined at system.ads:98, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_interrupt_priority__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_interrupt_priority

 axiom max_interrupt_priority__def_axiom :
  ((System__max_interrupt_priority.max_interrupt_priority ) = 31)

end

(* Module for defining the value of constant "default_priority" defined at system.ads:104, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__default_priority__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__default_priority

 axiom default_priority__def_axiom :
  ((System__default_priority.default_priority ) = 15)

end

(* Module for defining the value of constant "null_address" defined at system.ads:109, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__null_address__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32
 use        System__null_address

 axiom null_address__def_axiom :
  ((System__null_address.null_address ) = (BV32.of_int 0))

end

(* Module for defining the value of constant "backend_divide_checks" defined at system.ads:121, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__backend_divide_checks__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__backend_divide_checks

 axiom backend_divide_checks__def_axiom :
  ((System__backend_divide_checks.backend_divide_checks ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "backend_overflow_checks" defined at system.ads:122, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__backend_overflow_checks__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__backend_overflow_checks

 axiom backend_overflow_checks__def_axiom :
  ((System__backend_overflow_checks.backend_overflow_checks ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "command_line_args" defined at system.ads:123, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__command_line_args__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__command_line_args

 axiom command_line_args__def_axiom :
  ((System__command_line_args.command_line_args ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "configurable_run_time" defined at system.ads:124, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__configurable_run_time__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__configurable_run_time

 axiom configurable_run_time__def_axiom :
  ((System__configurable_run_time.configurable_run_time ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "denorm" defined at system.ads:125, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__denorm__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__denorm

 axiom denorm__def_axiom :
  ((System__denorm.denorm ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "duration_32_bits" defined at system.ads:126, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__duration_32_bits__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__duration_32_bits

 axiom duration_32_bits__def_axiom :
  ((System__duration_32_bits.duration_32_bits ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "exit_status_supported" defined at system.ads:127, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__exit_status_supported__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__exit_status_supported

 axiom exit_status_supported__def_axiom :
  ((System__exit_status_supported.exit_status_supported ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "fractional_fixed_ops" defined at system.ads:128, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__fractional_fixed_ops__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__fractional_fixed_ops

 axiom fractional_fixed_ops__def_axiom :
  ((System__fractional_fixed_ops.fractional_fixed_ops ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "frontend_layout" defined at system.ads:129, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__frontend_layout__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__frontend_layout

 axiom frontend_layout__def_axiom :
  ((System__frontend_layout.frontend_layout ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "machine_overflows" defined at system.ads:130, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__machine_overflows__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__machine_overflows

 axiom machine_overflows__def_axiom :
  ((System__machine_overflows.machine_overflows ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "machine_rounds" defined at system.ads:131, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__machine_rounds__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__machine_rounds

 axiom machine_rounds__def_axiom :
  ((System__machine_rounds.machine_rounds ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "preallocated_stacks" defined at system.ads:132, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__preallocated_stacks__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__preallocated_stacks

 axiom preallocated_stacks__def_axiom :
  ((System__preallocated_stacks.preallocated_stacks ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "signed_zeros" defined at system.ads:133, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__signed_zeros__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__signed_zeros

 axiom signed_zeros__def_axiom :
  ((System__signed_zeros.signed_zeros ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "stack_check_default" defined at system.ads:134, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__stack_check_default__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__stack_check_default

 axiom stack_check_default__def_axiom :
  ((System__stack_check_default.stack_check_default ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "stack_check_probes" defined at system.ads:135, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__stack_check_probes__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__stack_check_probes

 axiom stack_check_probes__def_axiom :
  ((System__stack_check_probes.stack_check_probes ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "stack_check_limits" defined at system.ads:136, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__stack_check_limits__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__stack_check_limits

 axiom stack_check_limits__def_axiom :
  ((System__stack_check_limits.stack_check_limits ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "support_aggregates" defined at system.ads:137, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_aggregates__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_aggregates

 axiom support_aggregates__def_axiom :
  ((System__support_aggregates.support_aggregates ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_atomic_primitives" defined at system.ads:138, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_atomic_primitives__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_atomic_primitives

 axiom support_atomic_primitives__def_axiom :
  ((System__support_atomic_primitives.support_atomic_primitives ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_composite_assign" defined at system.ads:139, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_composite_assign__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_composite_assign

 axiom support_composite_assign__def_axiom :
  ((System__support_composite_assign.support_composite_assign ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_composite_compare" defined at system.ads:140, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_composite_compare__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_composite_compare

 axiom support_composite_compare__def_axiom :
  ((System__support_composite_compare.support_composite_compare ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_long_shifts" defined at system.ads:141, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_long_shifts__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_long_shifts

 axiom support_long_shifts__def_axiom :
  ((System__support_long_shifts.support_long_shifts ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "always_compatible_rep" defined at system.ads:142, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__always_compatible_rep__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__always_compatible_rep

 axiom always_compatible_rep__def_axiom :
  ((System__always_compatible_rep.always_compatible_rep ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "suppress_standard_library" defined at system.ads:143, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__suppress_standard_library__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__suppress_standard_library

 axiom suppress_standard_library__def_axiom :
  ((System__suppress_standard_library.suppress_standard_library ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "use_ada_main_program_name" defined at system.ads:144, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__use_ada_main_program_name__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__use_ada_main_program_name

 axiom use_ada_main_program_name__def_axiom :
  ((System__use_ada_main_program_name.use_ada_main_program_name ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "frontend_exceptions" defined at system.ads:145, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__frontend_exceptions__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__frontend_exceptions

 axiom frontend_exceptions__def_axiom :
  ((System__frontend_exceptions.frontend_exceptions ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "zcx_by_default" defined at system.ads:146, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__zcx_by_default__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__zcx_by_default

 axiom zcx_by_default__def_axiom :
  ((System__zcx_by_default.zcx_by_default ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "underlying_priorities" defined at system.ads:165, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__underlying_priorities__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__underlying_priorities
 use        Array__Int__Standard__integer
 use        System__underlying_priorities__aggregate_def
 use        Array__Int__Standard__integer

 axiom underlying_priorities__def_axiom :
  ((System__underlying_priorities.underlying_priorities ) = (System__underlying_priorities__aggregate_def.system__underlying_priorities__aggregate_def ( -15 ) ( -7 ) ( -6 ) ( -5 ) ( -4 ) ( -3 ) ( -2 ) ( -1 ) 0 1 2 3 4 5 6 15))

end

(* Module for defining the value of constant "unspecified_size" defined at s-parame.ads:64, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__unspecified_size__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__parameters__unspecified_size

 axiom unspecified_size__def_axiom :
  ((System__parameters__unspecified_size.unspecified_size ) = ( -2147483648 ))

end

(* Module for defining the value of constant "dynamic" defined at s-parame.ads:68, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__dynamic__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__parameters__dynamic

 axiom dynamic__def_axiom :
  ((System__parameters__dynamic.dynamic ) = ( -1 ))

end

(* Module for defining the value of constant "sec_stack_percentage" defined at s-parame.ads:75, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__sec_stack_percentage__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__parameters__sec_stack_percentage

 axiom sec_stack_percentage__def_axiom :
  ((System__parameters__sec_stack_percentage.sec_stack_percentage ) = ( -1 ))

end

(* Module for defining the value of constant "sec_stack_dynamic" defined at s-parame.ads:78, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__sec_stack_dynamic__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__parameters__sec_stack_dynamic

 axiom sec_stack_dynamic__def_axiom :
  ((System__parameters__sec_stack_dynamic.sec_stack_dynamic ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "default_env_stack_size" defined at s-parame.ads:96, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__default_env_stack_size__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__parameters__default_env_stack_size

 axiom default_env_stack_size__def_axiom :
  ((System__parameters__default_env_stack_size.default_env_stack_size ) = 8192000)

end

(* Module for defining the value of constant "stack_grows_down" defined at s-parame.ads:101, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__stack_grows_down__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__parameters__stack_grows_down

 axiom stack_grows_down__def_axiom :
  ((System__parameters__stack_grows_down.stack_grows_down ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "long_bits" defined at s-parame.ads:110, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__long_bits__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__parameters__long_bits

 axiom long_bits__def_axiom :
  ((System__parameters__long_bits.long_bits ) = 32)

end

(* Module for defining the value of constant "c_malloc_linkname" defined at s-parame.ads:119, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__c_malloc_linkname__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        System__parameters__c_malloc_linkname
 use        Temp___159

 axiom c_malloc_linkname__def_axiom :
  ((System__parameters__c_malloc_linkname.c_malloc_linkname ) = (Standard__string.of_array Temp___159.temp___159 1 13))

end

(* Module for defining the value of constant "garbage_collected" defined at s-parame.ads:142, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__garbage_collected__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__parameters__garbage_collected

 axiom garbage_collected__def_axiom :
  ((System__parameters__garbage_collected.garbage_collected ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "single_lock" defined at s-parame.ads:157, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__single_lock__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__parameters__single_lock

 axiom single_lock__def_axiom :
  ((System__parameters__single_lock.single_lock ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "no_abort" defined at s-parame.ads:170, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__no_abort__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__parameters__no_abort

 axiom no_abort__def_axiom :
  ((System__parameters__no_abort.no_abort ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "max_attribute_count" defined at s-parame.ads:183, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__max_attribute_count__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__parameters__max_attribute_count

 axiom max_attribute_count__def_axiom :
  ((System__parameters__max_attribute_count.max_attribute_count ) = 32)

end

(* Module for defining the value of constant "runtime_traces" defined at s-parame.ads:190, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__runtime_traces__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__parameters__runtime_traces

 axiom runtime_traces__def_axiom :
  ((System__parameters__runtime_traces.runtime_traces ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "max_task_image_length" defined at s-parame.ads:199, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__max_task_image_length__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__parameters__max_task_image_length

 axiom max_task_image_length__def_axiom :
  ((System__parameters__max_task_image_length.max_task_image_length ) = 256)

end

(* Module for defining the value of constant "default_exception_msg_max_length" defined at s-parame.ads:206, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__default_exception_msg_max_length__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__parameters__default_exception_msg_max_length

 axiom default_exception_msg_max_length__def_axiom :
  ((System__parameters__default_exception_msg_max_length.default_exception_msg_max_length ) = 200)

end

(* Module for defining the value of constant "eof" defined at i-cstrea.ads:56, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Interfaces__c_streams__eof__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "iofbf" defined at i-cstrea.ads:59, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Interfaces__c_streams__iofbf__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "iolbf" defined at i-cstrea.ads:60, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Interfaces__c_streams__iolbf__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "ionbf" defined at i-cstrea.ads:61, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Interfaces__c_streams__ionbf__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "l_tmpnam" defined at i-cstrea.ads:64, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Interfaces__c_streams__l_tmpnam__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "seek_cur" defined at i-cstrea.ads:67, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Interfaces__c_streams__seek_cur__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "seek_end" defined at i-cstrea.ads:68, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Interfaces__c_streams__seek_end__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "seek_set" defined at i-cstrea.ads:69, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Interfaces__c_streams__seek_set__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "max_path_len" defined at i-cstrea.ads:270, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Interfaces__c_streams__max_path_len__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "null_stream" defined at i-cstrea.ads:313, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Interfaces__c_streams__null_stream__axiom
 use import "_gnatprove_standard".Main
 use        System__null_address
 use        Interfaces__c_streams__null_stream

 axiom null_stream__def_axiom :
  ((Interfaces__c_streams__null_stream.null_stream ) = System__null_address.null_address)

end

(* Module for defining the value of constant "wcem_hex" defined at s-wchcon.ads:100, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__wch_con__wcem_hex__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wcem_hex

 axiom wcem_hex__def_axiom :
  ((System__wch_con__wcem_hex.wcem_hex ) = 1)

end

(* Module for defining the value of constant "wcem_upper" defined at s-wchcon.ads:108, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__wch_con__wcem_upper__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wcem_upper

 axiom wcem_upper__def_axiom :
  ((System__wch_con__wcem_upper.wcem_upper ) = 2)

end

(* Module for defining the value of constant "wcem_shift_jis" defined at s-wchcon.ads:117, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__wch_con__wcem_shift_jis__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wcem_shift_jis

 axiom wcem_shift_jis__def_axiom :
  ((System__wch_con__wcem_shift_jis.wcem_shift_jis ) = 3)

end

(* Module for defining the value of constant "wcem_euc" defined at s-wchcon.ads:126, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__wch_con__wcem_euc__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wcem_euc

 axiom wcem_euc__def_axiom :
  ((System__wch_con__wcem_euc.wcem_euc ) = 4)

end

(* Module for defining the value of constant "wcem_utf8" defined at s-wchcon.ads:134, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__wch_con__wcem_utf8__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wcem_utf8

 axiom wcem_utf8__def_axiom :
  ((System__wch_con__wcem_utf8.wcem_utf8 ) = 5)

end

(* Module for defining the value of constant "wcem_brackets" defined at s-wchcon.ads:156, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__wch_con__wcem_brackets__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wcem_brackets

 axiom wcem_brackets__def_axiom :
  ((System__wch_con__wcem_brackets.wcem_brackets ) = 6)

end

(* Module for defining the value of constant "wc_encoding_letters" defined at s-wchcon.ads:169, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__wch_con__wc_encoding_letters__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wc_encoding_letters
 use        Array__Int__Standard__character
 use        System__wch_con__wc_encoding_letters__aggregate_def
 use        Array__Int__Standard__character

 axiom wc_encoding_letters__def_axiom :
  ((System__wch_con__wc_encoding_letters.wc_encoding_letters ) = (System__wch_con__wc_encoding_letters__aggregate_def.system__wch_con__wc_encoding_letters__aggregate_def 104 117 115 101 56 98))

end

(* Module for defining the value of constant "wc_longest_sequence" defined at s-wchcon.ads:189, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__wch_con__wc_longest_sequence__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wc_longest_sequence

 axiom wc_longest_sequence__def_axiom :
  ((System__wch_con__wc_longest_sequence.wc_longest_sequence ) = 12)

end

(* Module for defining the value of constant "wc_longest_sequences" defined at s-wchcon.ads:193, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__wch_con__wc_longest_sequences__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wc_longest_sequences
 use        Array__Int__Standard__natural
 use        System__wch_con__wc_longest_sequences__aggregate_def
 use        Array__Int__Standard__natural

 axiom wc_longest_sequences__def_axiom :
  ((System__wch_con__wc_longest_sequences.wc_longest_sequences ) = (System__wch_con__wc_longest_sequences__aggregate_def.system__wch_con__wc_longest_sequences__aggregate_def 5 2 2 2 6 12))

end

(* Module for defining the value of constant "unbounded" defined at a-textio.ads:70, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__text_io__unbounded__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__text_io__unbounded

 axiom unbounded__def_axiom :
  ((Ada__text_io__unbounded.unbounded ) = 0)

end

(* Module for defining the value of constant "lm" defined at a-textio.ads:352, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__text_io__lm__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__text_io__lm

 axiom lm__def_axiom :
  ((Ada__text_io__lm.lm ) = 10)

end

(* Module for defining the value of constant "pm" defined at a-textio.ads:355, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__text_io__pm__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__text_io__pm

 axiom pm__def_axiom :
  ((Ada__text_io__pm.pm ) = 12)

end

(* Module for declaring a program function (and possibly an axiom) for "set_fuel_price" defined at pump.ads:33, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__set_fuel_price__axiom
 use import "_gnatprove_standard".Main
 use        Pump__pump
 use        Pump__pump__axiom

 val set_fuel_price #"pump.ads" 33 0 0# 
   (pump_r__split_fields : Pump__pump.__split_fields__ref) (price : real) : unit
  requires { true }
  ensures { (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content } True True True) }
  writes {pump_r__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "set_pump_state" defined at pump.ads:34, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__set_pump_state__axiom
 use import "_gnatprove_standard".Main
 use        Pump__pump
 use        Pump__pump__axiom

 val set_pump_state #"pump.ads" 34 0 0# 
   (pump_r__split_fields : Pump__pump.__split_fields__ref) (statetype : int) : unit
  requires { true }
  ensures { (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content } True True True) }
  writes {pump_r__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "set_pumped" defined at pump.ads:35, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__set_pumped__axiom
 use import "_gnatprove_standard".Main
 use        Pump__pump
 use        Pump__pump__axiom

 val set_pumped #"pump.ads" 35 0 0# 
   (pump_r__split_fields : Pump__pump.__split_fields__ref) (amount : real) : unit
  requires { true }
  ensures { (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content } True True True) }
  writes {pump_r__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "set_pump_nozzle_state" defined at pump.ads:36, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__set_pump_nozzle_state__axiom
 use import "_gnatprove_standard".Main
 use        Pump__pump
 use        Pump__pump__axiom

 val set_pump_nozzle_state #"pump.ads" 36 0 0# 
   (pump_r__split_fields : Pump__pump.__split_fields__ref) (nozzletype : int) : unit
  requires { true }
  ensures { (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content } True True True) }
  writes {pump_r__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "append_reservoir" defined at pump.ads:38, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__append_reservoir__axiom
 use import "_gnatprove_standard".Main
 use        Pump__pump
 use        Pump__pump__axiom

 val append_reservoir #"pump.ads" 38 0 0# 
   (pump_r__split_fields : Pump__pump.__split_fields__ref) (fueltype : int) : unit
  requires { true }
  ensures { (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content } True True True) }
  writes {pump_r__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "set_reservoir_size" defined at pump.ads:40, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__set_reservoir_size__axiom
 use import "_gnatprove_standard".Main
 use        Pump__pump
 use        Pump__pump__axiom

 val set_reservoir_size #"pump.ads" 40 0 0# 
   (pump_r__split_fields : Pump__pump.__split_fields__ref) (size : real) : unit
  requires { true }
  ensures { (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content } True True True) }
  writes {pump_r__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "remove_petrol_reservoir" defined at pump.ads:42, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__remove_petrol_reservoir__axiom
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        Pump__Tfloat_numberB
 use        Pump__float_number
 use        Pump__reservoir
 use        Pump__pump
 use        Pump__pump__axiom

 val remove_petrol_reservoir #"pump.ads" 42 0 0# 
   (pump_r__split_fields : Pump__pump.__split_fields__ref) (amount : real) : unit
  requires { ((Pump__Tfloat_numberB.round_real ((Pump__float_number.to_real (Pump__reservoir.rec__total (Pump__reservoir.__split_fields (Pump__pump.rec__reservoir_info (Pump__pump.__split_fields { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content }))))) -. amount)) >=. (0.0E-2)) }
  ensures { ( ((Pump__float_number.to_real (Pump__reservoir.rec__total (Pump__reservoir.__split_fields (Pump__pump.rec__reservoir_info (Pump__pump.__split_fields { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content }))))) >=. (0.0E-2)) /\ (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content } True True True) ) }
  writes {pump_r__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "get_state" defined at pump.ads:48, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__get_state__axiom
 use import "_gnatprove_standard".Main
 use        Pump__state_type__axiom
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__get_state

 val get_state #"pump.ads" 48 0 0# 
   (pump_r : Pump__pump.pump) : int
  requires { true }
  ensures { ( (result = (Pump__get_state.get_state pump_r)) /\ (Pump__state_type__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_state__post_axiom :
  (forall pump_r : Pump__pump.pump [(Pump__get_state.get_state pump_r)].
   ( (Pump__pump__axiom.dynamic_invariant pump_r True True True) -> (let result = (Pump__get_state.get_state pump_r) in (
    (Pump__state_type__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "get_current_nozzle_state" defined at pump.ads:49, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__get_current_nozzle_state__axiom
 use import "_gnatprove_standard".Main
 use        Pump__nozzle_type__axiom
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__get_current_nozzle_state

 val get_current_nozzle_state #"pump.ads" 49 0 0# 
   (pump_r : Pump__pump.pump) : int
  requires { true }
  ensures { ( (result = (Pump__get_current_nozzle_state.get_current_nozzle_state pump_r)) /\ (Pump__nozzle_type__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_current_nozzle_state__post_axiom :
  (forall pump_r : Pump__pump.pump [(Pump__get_current_nozzle_state.get_current_nozzle_state pump_r)].
   ( (Pump__pump__axiom.dynamic_invariant pump_r True True True) -> (let result = (Pump__get_current_nozzle_state.get_current_nozzle_state pump_r) in (
    (Pump__nozzle_type__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "get_unit_price" defined at pump.ads:50, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__get_unit_price__axiom
 use import "_gnatprove_standard".Main
 use        Pump__float_number
 use        Pump__float_number__axiom
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__get_unit_price

 val get_unit_price #"pump.ads" 50 0 0# 
   (pump_r : Pump__pump.pump) : Pump__float_number.float_number
  requires { true }
  ensures { ( (result = (Pump__get_unit_price.get_unit_price pump_r)) /\ (Pump__float_number__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_unit_price__post_axiom :
  (forall pump_r : Pump__pump.pump [(Pump__get_unit_price.get_unit_price pump_r)].
   ( (Pump__pump__axiom.dynamic_invariant pump_r True True True) -> (let result = (Pump__get_unit_price.get_unit_price pump_r) in (
    (Pump__float_number__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "get_tanks_size" defined at pump.ads:51, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__get_tanks_size__axiom
 use import "_gnatprove_standard".Main
 use        Pump__float_number
 use        Pump__float_number__axiom
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__get_tanks_size

 val get_tanks_size #"pump.ads" 51 0 0# 
   (pump_r : Pump__pump.pump) : Pump__float_number.float_number
  requires { true }
  ensures { ( (result = (Pump__get_tanks_size.get_tanks_size pump_r)) /\ (Pump__float_number__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_tanks_size__post_axiom :
  (forall pump_r : Pump__pump.pump [(Pump__get_tanks_size.get_tanks_size pump_r)].
   ( (Pump__pump__axiom.dynamic_invariant pump_r True True True) -> (let result = (Pump__get_tanks_size.get_tanks_size pump_r) in (
    (Pump__float_number__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "get_resevoir_category" defined at pump.ads:52, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__get_resevoir_category__axiom
 use import "_gnatprove_standard".Main
 use        Pump__fuel_types__axiom
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__get_resevoir_category

 val get_resevoir_category #"pump.ads" 52 0 0# 
   (pump_r : Pump__pump.pump) : int
  requires { true }
  ensures { ( (result = (Pump__get_resevoir_category.get_resevoir_category pump_r)) /\ (Pump__fuel_types__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_resevoir_category__post_axiom :
  (forall pump_r : Pump__pump.pump [(Pump__get_resevoir_category.get_resevoir_category pump_r)].
   ( (Pump__pump__axiom.dynamic_invariant pump_r True True True) -> (let result = (Pump__get_resevoir_category.get_resevoir_category pump_r) in (
    (Pump__fuel_types__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "get_pump" defined at pump_unit.ads:30, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__get_pump__axiom
 use import "_gnatprove_standard".Main
 use        Pump__fuel_types
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__get_pump

 val get_pump #"pump_unit.ads" 30 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) (fueltype : int) : Pump__pump.pump
  requires { true }
  ensures { ( (result = (Pump_unit__get_pump.get_pump pumpunit fueltype)) /\ (Pump__pump__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_pump__post_axiom :
  (forall pumpunit : Pump_unit__pump_unit.pump_unit.
  (forall fueltype : int [(Pump_unit__get_pump.get_pump pumpunit fueltype)].
   ( ( (Pump_unit__pump_unit__axiom.dynamic_invariant pumpunit True True True) /\ (Pump__fuel_types.in_range fueltype) ) -> (let result = (Pump_unit__get_pump.get_pump pumpunit fueltype) in (
    (Pump__pump__axiom.dynamic_invariant result True False True)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "get_tanks_size" defined at pump_unit.ads:31, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__get_tanks_size__axiom
 use import "_gnatprove_standard".Main
 use        Pump__float_number
 use        Pump__float_number__axiom
 use        Pump__fuel_types
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__get_tanks_size

 val get_tanks_size #"pump_unit.ads" 31 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) (fueltype : int) : Pump__float_number.float_number
  requires { true }
  ensures { ( (result = (Pump_unit__get_tanks_size.get_tanks_size pumpunit fueltype)) /\ (Pump__float_number__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_tanks_size__post_axiom :
  (forall pumpunit : Pump_unit__pump_unit.pump_unit.
  (forall fueltype : int [(Pump_unit__get_tanks_size.get_tanks_size pumpunit fueltype)].
   ( ( (Pump_unit__pump_unit__axiom.dynamic_invariant pumpunit True True True) /\ (Pump__fuel_types.in_range fueltype) ) -> (let result = (Pump_unit__get_tanks_size.get_tanks_size pumpunit fueltype) in (
    (Pump__float_number__axiom.dynamic_invariant result True False True)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "get_id" defined at pump_unit.ads:32, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__get_id__axiom
 use import "_gnatprove_standard".Main
 use        Pump_unit__unit_id_type__axiom
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__get_id
 use        Array__Int__Standard__character

 val get_id #"pump_unit.ads" 32 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) : Array__Int__Standard__character.map
  requires { true }
  ensures { ( (result = (Pump_unit__get_id.get_id pumpunit)) /\ (Pump_unit__unit_id_type__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_id__post_axiom :
  (forall pumpunit : Pump_unit__pump_unit.pump_unit [(Pump_unit__get_id.get_id pumpunit)].
   ( (Pump_unit__pump_unit__axiom.dynamic_invariant pumpunit True True True) -> (let result = (Pump_unit__get_id.get_id pumpunit) in (
    (Pump_unit__unit_id_type__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "get_to_pay" defined at pump_unit.ads:33, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__get_to_pay__axiom
 use import "_gnatprove_standard".Main
 use        Pump__float_number
 use        Pump__float_number__axiom
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__get_to_pay

 val get_to_pay #"pump_unit.ads" 33 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) : Pump__float_number.float_number
  requires { true }
  ensures { ( (result = (Pump_unit__get_to_pay.get_to_pay pumpunit)) /\ (Pump__float_number__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_to_pay__post_axiom :
  (forall pumpunit : Pump_unit__pump_unit.pump_unit [(Pump_unit__get_to_pay.get_to_pay pumpunit)].
   ( (Pump_unit__pump_unit__axiom.dynamic_invariant pumpunit True True True) -> (let result = (Pump_unit__get_to_pay.get_to_pay pumpunit) in (
    (Pump__float_number__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "get_pumped" defined at pump_unit.ads:34, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__get_pumped__axiom
 use import "_gnatprove_standard".Main
 use        Pump__float_number
 use        Pump__float_number__axiom
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__get_pumped

 val get_pumped #"pump_unit.ads" 34 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) : Pump__float_number.float_number
  requires { true }
  ensures { ( (result = (Pump_unit__get_pumped.get_pumped pumpunit)) /\ (Pump__float_number__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_pumped__post_axiom :
  (forall pumpunit : Pump_unit__pump_unit.pump_unit [(Pump_unit__get_pumped.get_pumped pumpunit)].
   ( (Pump_unit__pump_unit__axiom.dynamic_invariant pumpunit True True True) -> (let result = (Pump_unit__get_pumped.get_pumped pumpunit) in (
    (Pump__float_number__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "get_fuel" defined at pump_unit.ads:35, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__get_fuel__axiom
 use import "_gnatprove_standard".Main
 use        Pump__fuel_types__axiom
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__get_fuel

 val get_fuel #"pump_unit.ads" 35 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) : int
  requires { true }
  ensures { ( (result = (Pump_unit__get_fuel.get_fuel pumpunit)) /\ (Pump__fuel_types__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_fuel__post_axiom :
  (forall pumpunit : Pump_unit__pump_unit.pump_unit [(Pump_unit__get_fuel.get_fuel pumpunit)].
   ( (Pump_unit__pump_unit__axiom.dynamic_invariant pumpunit True True True) -> (let result = (Pump_unit__get_fuel.get_fuel pumpunit) in (
    (Pump__fuel_types__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "unit_is_using" defined at pump_unit.ads:36, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__unit_is_using__axiom
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit
 use        Pump_unit__unit_is_using

 val unit_is_using #"pump_unit.ads" 36 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) : bool
  requires { true }
  ensures { (result = (Pump_unit__unit_is_using.unit_is_using pumpunit)) }

end

(* Module for declaring a program function (and possibly an axiom) for "unit_is_paid" defined at pump_unit.ads:37, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__unit_is_paid__axiom
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit
 use        Pump_unit__unit_is_paid

 val unit_is_paid #"pump_unit.ads" 37 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) : bool
  requires { true }
  ensures { (result = (Pump_unit__unit_is_paid.unit_is_paid pumpunit)) }

end

(* Module for declaring a program function (and possibly an axiom) for "get_pump_unit_state" defined at pump_unit.ads:38, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__get_pump_unit_state__axiom
 use import "_gnatprove_standard".Main
 use        Pump__state_type__axiom
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__get_pump_unit_state

 val get_pump_unit_state #"pump_unit.ads" 38 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) : int
  requires { true }
  ensures { ( (result = (Pump_unit__get_pump_unit_state.get_pump_unit_state pumpunit)) /\ (Pump__state_type__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_pump_unit_state__post_axiom :
  (forall pumpunit : Pump_unit__pump_unit.pump_unit [(Pump_unit__get_pump_unit_state.get_pump_unit_state pumpunit)].
   ( (Pump_unit__pump_unit__axiom.dynamic_invariant pumpunit True True True) -> (let result = (Pump_unit__get_pump_unit_state.get_pump_unit_state pumpunit) in (
    (Pump__state_type__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "get_pump_nozzle_state" defined at pump_unit.ads:39, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__get_pump_nozzle_state__axiom
 use import "_gnatprove_standard".Main
 use        Pump__nozzle_type__axiom
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__get_pump_nozzle_state

 val get_pump_nozzle_state #"pump_unit.ads" 39 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) : int
  requires { true }
  ensures { ( (result = (Pump_unit__get_pump_nozzle_state.get_pump_nozzle_state pumpunit)) /\ (Pump__nozzle_type__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_pump_nozzle_state__post_axiom :
  (forall pumpunit : Pump_unit__pump_unit.pump_unit [(Pump_unit__get_pump_nozzle_state.get_pump_nozzle_state pumpunit)].
   ( (Pump_unit__pump_unit__axiom.dynamic_invariant pumpunit True True True) -> (let result = (Pump_unit__get_pump_nozzle_state.get_pump_nozzle_state pumpunit) in (
    (Pump__nozzle_type__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "set_is_using" defined at pump_unit.ads:43, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__set_is_using__axiom
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom

 val set_is_using #"pump_unit.ads" 43 0 0# 
   (pumpunit__split_fields : Pump_unit__pump_unit.__split_fields__ref) : unit
  requires { ( ( ((Pump_unit__pump_unit.rec__is_using (Pump_unit__pump_unit.__split_fields { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })) = True) <-> true ) \/ ( ((Pump_unit__pump_unit.rec__is_using (Pump_unit__pump_unit.__split_fields { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })) = True) <-> false ) ) }
  ensures { ( ( ( ((Pump_unit__pump_unit.rec__is_using (Pump_unit__pump_unit.__split_fields { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })) = True) <-> false ) \/ ( ((Pump_unit__pump_unit.rec__is_using (Pump_unit__pump_unit.__split_fields { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })) = True) <-> true ) ) /\ (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True True True) ) }
  writes {pumpunit__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "set_is_paid" defined at pump_unit.ads:47, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__set_is_paid__axiom
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom

 val set_is_paid #"pump_unit.ads" 47 0 0# 
   (pumpunit__split_fields : Pump_unit__pump_unit.__split_fields__ref) : unit
  requires { true }
  ensures { (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True True True) }
  writes {pumpunit__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "set_to_pay" defined at pump_unit.ads:48, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__set_to_pay__axiom
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom

 val set_to_pay #"pump_unit.ads" 48 0 0# 
   (pumpunit__split_fields : Pump_unit__pump_unit.__split_fields__ref) (amount : real) : unit
  requires { true }
  ensures { (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True True True) }
  writes {pumpunit__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "set_unit_id" defined at pump_unit.ads:49, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__set_unit_id__axiom
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Array__Int__Standard__character

 val set_unit_id #"pump_unit.ads" 49 0 0# 
   (pumpunit__split_fields : Pump_unit__pump_unit.__split_fields__ref) (id : Array__Int__Standard__character.map) : unit
  requires { true }
  ensures { (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True True True) }
  writes {pumpunit__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "set_pumped" defined at pump_unit.ads:50, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__set_pumped__axiom
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom

 val set_pumped #"pump_unit.ads" 50 0 0# 
   (pumpunit__split_fields : Pump_unit__pump_unit.__split_fields__ref) (amount : real) : unit
  requires { true }
  ensures { (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True True True) }
  writes {pumpunit__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "set_pump_active_state" defined at pump_unit.ads:51, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__set_pump_active_state__axiom
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom

 val set_pump_active_state #"pump_unit.ads" 51 0 0# 
   (pumpunit__split_fields : Pump_unit__pump_unit.__split_fields__ref) (fueltype : int) (statetype : int) : unit
  requires { true }
  ensures { (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True True True) }
  writes {pumpunit__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "set_pump_nozzle_state" defined at pump_unit.ads:52, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__set_pump_nozzle_state__axiom
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom

 val set_pump_nozzle_state #"pump_unit.ads" 52 0 0# 
   (pumpunit__split_fields : Pump_unit__pump_unit.__split_fields__ref) (fueltype : int) (nozzletype : int) : unit
  requires { true }
  ensures { (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True True True) }
  writes {pumpunit__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "add_pump" defined at pump_unit.ads:54, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__add_pump__axiom
 use import "_gnatprove_standard".Main
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom

 val add_pump #"pump_unit.ads" 54 0 0# 
   (pumpunit__split_fields : Pump_unit__pump_unit.__split_fields__ref) (pump_r__split_fields : Pump__pump.__split_fields__ref) (fueltype : int) : unit
  requires { true }
  ensures { ( (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True True True) /\ (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content } True True True) ) }
  writes {pumpunit__split_fields, pump_r__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "left_nozzle" defined at pump_unit.ads:56, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__left_nozzle__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__state_type
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__get_state
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom

 val left_nozzle #"pump_unit.ads" 56 0 0# 
   (pumpunit__split_fields : Pump_unit__pump_unit.__split_fields__ref) (pump_r__split_fields : Pump__pump.__split_fields__ref) (fueltype : int) : unit
  requires { ( ((Pump__get_state.get_state { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content }) = 0) \/ ((Pump__get_state.get_state { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content }) = 3) ) }
  ensures { ( ((Pump__state_type.to_rep (Pump_unit__pump_unit.rec__pump_active_state (Pump_unit__pump_unit.__split_fields { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content }))) = 1) /\ ( (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True True True) /\ (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content } True True True) ) ) }
  writes {pumpunit__split_fields, pump_r__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "return_nozzle" defined at pump_unit.ads:61, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__return_nozzle__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__state_type
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__get_state
 use        Pump__get_current_nozzle_state
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom

 val return_nozzle #"pump_unit.ads" 61 0 0# 
   (pumpunit__split_fields : Pump_unit__pump_unit.__split_fields__ref) (pump_r__split_fields : Pump__pump.__split_fields__ref) : unit
  requires { ( ( ((Pump__get_state.get_state { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content }) = 1) \/ ((Pump__get_state.get_state { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content }) = 3) ) /\ ((Pump__get_current_nozzle_state.get_current_nozzle_state { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content }) = 5) ) }
  ensures { ( ( ((Pump__state_type.to_rep (Pump_unit__pump_unit.rec__pump_active_state (Pump_unit__pump_unit.__split_fields { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content }))) = 3) \/ ((Pump__state_type.to_rep (Pump_unit__pump_unit.rec__pump_active_state (Pump_unit__pump_unit.__split_fields { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content }))) = 0) ) /\ ( (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True True True) /\ (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content } True True True) ) ) }
  writes {pumpunit__split_fields, pump_r__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "start_pumping" defined at pump_unit.ads:70, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__start_pumping__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__float_number
 use        Pump__float_number__axiom
 use        Pump__state_type
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__get_state
 use        Pump__get_current_nozzle_state
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom

 val start_pumping #"pump_unit.ads" 70 0 0# 
   (pumpunit__split_fields : Pump_unit__pump_unit.__split_fields__ref) (pump_r__split_fields : Pump__pump.__split_fields__ref) (amount : real) (car_tank_space : Pump__float_number.float_number__ref) : unit
  requires { ( ((Pump__get_state.get_state { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content }) = 1) /\ ((Pump__get_current_nozzle_state.get_current_nozzle_state { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content }) = 1) ) }
  ensures { ( ((Pump__state_type.to_rep (Pump_unit__pump_unit.rec__pump_active_state (Pump_unit__pump_unit.__split_fields { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content }))) = 1) /\ ( ( (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True True True) /\ (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content } True True True) ) /\ (Pump__float_number__axiom.dynamic_invariant car_tank_space.Pump__float_number.float_number__content True True True) ) ) }
  writes {pumpunit__split_fields, pump_r__split_fields, car_tank_space}

end

(* Module for declaring a program function (and possibly an axiom) for "stop_pumping" defined at pump_unit.ads:75, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__stop_pumping__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__state_type
 use        Pump__nozzle_type
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom

 val stop_pumping #"pump_unit.ads" 75 0 0# 
   (pumpunit__split_fields : Pump_unit__pump_unit.__split_fields__ref) (pump_r__split_fields : Pump__pump.__split_fields__ref) : unit
  requires { ((Pump__state_type.to_rep (Pump_unit__pump_unit.rec__pump_active_state (Pump_unit__pump_unit.__split_fields { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content }))) = 2) }
  ensures { ( ( ((Pump__nozzle_type.to_rep (Pump_unit__pump_unit.rec__pump_nozzle_state (Pump_unit__pump_unit.__split_fields { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content }))) = 4) /\ ((Pump__state_type.to_rep (Pump_unit__pump_unit.rec__pump_active_state (Pump_unit__pump_unit.__split_fields { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content }))) = 1) ) /\ ( (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True True True) /\ (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content } True True True) ) ) }
  writes {pumpunit__split_fields, pump_r__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "payfuel" defined at cash_register.ads:32, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Cash_register__payfuel__axiom
 use        Cash_register__cashregister
 use        Cash_register__cashregister
 use import "_gnatprove_standard".Main
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Cash_register__cash_register
 use        Cash_register__cash_register__axiom
 use        Cash_register__cashregister

 val payfuel #"cash_register.ads" 32 0 0# 
   (pumpunit__split_fields : Pump_unit__pump_unit.__split_fields__ref) (pump_r__split_fields : Pump__pump.__split_fields__ref) (amount : real) : unit
  requires { true }
  ensures { ( ( (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True True True) /\ (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content } True True True) ) /\ (Cash_register__cash_register__axiom.dynamic_invariant { Cash_register__cash_register.__split_fields = Cash_register__cashregister.cashregister__split_fields.Cash_register__cash_register.__split_fields__content } True True True) ) }
  reads {Cash_register__cashregister.cashregister__split_fields}
  writes {Cash_register__cashregister.cashregister__split_fields, pumpunit__split_fields, pump_r__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "set_pumped_info_to_cash_register" defined at cash_register.ads:33, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Cash_register__set_pumped_info_to_cash_register__axiom
 use        Cash_register__cashregister
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit
 use        Cash_register__cash_register
 use        Cash_register__cash_register__axiom
 use        Cash_register__cashregister

 val set_pumped_info_to_cash_register #"cash_register.ads" 33 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) : unit
  requires { true }
  ensures { (Cash_register__cash_register__axiom.dynamic_invariant { Cash_register__cash_register.__split_fields = Cash_register__cashregister.cashregister__split_fields.Cash_register__cash_register.__split_fields__content } True True True) }
  writes {Cash_register__cashregister.cashregister__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "print" defined at sprint.ads:4, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Sprint__print__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string

 val print #"sprint.ads" 4 0 0# 
   (s : Standard__string.string) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "print_float_type" defined at sprint.ads:5, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Sprint__print_float_type__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string

 val print_float_type #"sprint.ads" 5 0 0# 
   (s1 : Standard__string.string) (s2 : real) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "print_state_type" defined at sprint.ads:6, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Sprint__print_state_type__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string

 val print_state_type #"sprint.ads" 6 0 0# 
   (s1 : Standard__string.string) (s2 : int) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "print_nozzle_type" defined at sprint.ads:7, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Sprint__print_nozzle_type__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string

 val print_nozzle_type #"sprint.ads" 7 0 0# 
   (s1 : Standard__string.string) (s2 : int) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "print_fuel_type" defined at sprint.ads:8, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Sprint__print_fuel_type__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string

 val print_fuel_type #"sprint.ads" 8 0 0# 
   (s1 : Standard__string.string) (s2 : int) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "read" defined at a-stream.ads:57, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__streams__read__axiom
 use import "_gnatprove_standard".Main
 use        Ada__streams__root_stream_type
 use        Ada__streams__root_stream_type__axiom
 use        Ada__streams__stream_element_offset
 use        Ada__streams__stream_element_offset__axiom
 use        Ada__streams__stream_element_array
 use        Array__Int__Ada__streams__stream_element

 val read #"a-stream.ads" 57 0 0# 
   (stream__split_fields : Ada__streams__root_stream_type.__split_fields__ref) (stream__attr__tag : int) (item : Array__Int__Ada__streams__stream_element.map__ref) (item__first : int) (item__last : int) (last : int__ref) : unit
  requires { true }
  ensures { ( ( (Ada__streams__root_stream_type__axiom.dynamic_invariant { Ada__streams__root_stream_type.__split_fields = stream__split_fields.Ada__streams__root_stream_type.__split_fields__content; Ada__streams__root_stream_type.attr__tag = stream__attr__tag } True True True) /\ (if (True) then (
   true) else (
   (Ada__streams__stream_element_array.dynamic_property Ada__streams__stream_element_offset.first Ada__streams__stream_element_offset.last item__first item__last))) ) /\ (Ada__streams__stream_element_offset__axiom.dynamic_invariant last.int__content True True True) ) }
  writes {stream__split_fields, item, last}
 
 namespace Dispatch
  val read #"a-stream.ads" 57 0 0# 
    (stream__split_fields : Ada__streams__root_stream_type.__split_fields__ref) (stream__attr__tag : int) (item : Array__Int__Ada__streams__stream_element.map__ref) (item__first : int) (item__last : int) (last : int__ref) : unit
   requires { true }
   ensures { ( ( (Ada__streams__root_stream_type__axiom.dynamic_invariant { Ada__streams__root_stream_type.__split_fields = stream__split_fields.Ada__streams__root_stream_type.__split_fields__content; Ada__streams__root_stream_type.attr__tag = stream__attr__tag } True True True) /\ (if (True) then (
    true) else (
    (Ada__streams__stream_element_array.dynamic_property Ada__streams__stream_element_offset.first Ada__streams__stream_element_offset.last item__first item__last))) ) /\ (Ada__streams__stream_element_offset__axiom.dynamic_invariant last.int__content True True True) ) }
   writes {stream__split_fields, item, last}

 end

end

(* Module for declaring a program function (and possibly an axiom) for "write" defined at a-stream.ads:63, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__streams__write__axiom
 use import "_gnatprove_standard".Main
 use        Ada__streams__root_stream_type
 use        Ada__streams__root_stream_type__axiom
 use        Ada__streams__stream_element_array

 val write #"a-stream.ads" 63 0 0# 
   (stream__split_fields : Ada__streams__root_stream_type.__split_fields__ref) (stream__attr__tag : int) (item : Ada__streams__stream_element_array.stream_element_array) : unit
  requires { true }
  ensures { (Ada__streams__root_stream_type__axiom.dynamic_invariant { Ada__streams__root_stream_type.__split_fields = stream__split_fields.Ada__streams__root_stream_type.__split_fields__content; Ada__streams__root_stream_type.attr__tag = stream__attr__tag } True True True) }
  writes {stream__split_fields}
 
 namespace Dispatch
  val write #"a-stream.ads" 63 0 0# 
    (stream__split_fields : Ada__streams__root_stream_type.__split_fields__ref) (stream__attr__tag : int) (item : Ada__streams__stream_element_array.stream_element_array) : unit
   requires { true }
   ensures { (Ada__streams__root_stream_type__axiom.dynamic_invariant { Ada__streams__root_stream_type.__split_fields = stream__split_fields.Ada__streams__root_stream_type.__split_fields__content; Ada__streams__root_stream_type.attr__tag = stream__attr__tag } True True True) }
   writes {stream__split_fields}

 end

end

(* Module for declaring a program function (and possibly an axiom) for "Olt" defined at system.ads:77, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Olt__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__Olt

 val olt #"system.ads" 77 0 0# 
   (left : BV32.t) (right : BV32.t) : bool
  requires { true }
  ensures { (result = (System__Olt.olt left right)) }

end

(* Module for declaring a program function (and possibly an axiom) for "Ole" defined at system.ads:78, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Ole__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__Ole

 val ole #"system.ads" 78 0 0# 
   (left : BV32.t) (right : BV32.t) : bool
  requires { true }
  ensures { (result = (System__Ole.ole left right)) }

end

(* Module for declaring a program function (and possibly an axiom) for "Ogt" defined at system.ads:79, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Ogt__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__Ogt

 val ogt #"system.ads" 79 0 0# 
   (left : BV32.t) (right : BV32.t) : bool
  requires { true }
  ensures { (result = (System__Ogt.ogt left right)) }

end

(* Module for declaring a program function (and possibly an axiom) for "Oge" defined at system.ads:80, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Oge__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__Oge

 val oge #"system.ads" 80 0 0# 
   (left : BV32.t) (right : BV32.t) : bool
  requires { true }
  ensures { (result = (System__Oge.oge left right)) }

end

(* Module for declaring a program function (and possibly an axiom) for "Oeq" defined at system.ads:81, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Oeq__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__Oeq

 val oeq #"system.ads" 81 0 0# 
   (left : BV32.t) (right : BV32.t) : bool
  requires { true }
  ensures { (result = (System__Oeq.oeq left right)) }

end

(* Module for declaring a program function (and possibly an axiom) for "default_stack_size" defined at s-parame.ads:81, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__parameters__default_stack_size__axiom
 use import "_gnatprove_standard".Main
 use        System__parameters__size_type__axiom
 use        System__parameters__default_stack_size

 val default_stack_size #"s-parame.ads" 81 0 0# 
   (__void_param : unit) : int
  requires { true }
  ensures { ( (result = (System__parameters__default_stack_size.default_stack_size ())) /\ (System__parameters__size_type__axiom.dynamic_invariant result True False True) ) }
 
 axiom default_stack_size__post_axiom :
  (forall __void_param : unit [(System__parameters__default_stack_size.default_stack_size __void_param)].
   ( true -> (let result = (System__parameters__default_stack_size.default_stack_size __void_param) in (
    (System__parameters__size_type__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "minimum_stack_size" defined at s-parame.ads:84, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__parameters__minimum_stack_size__axiom
 use import "_gnatprove_standard".Main
 use        System__parameters__size_type__axiom
 use        System__parameters__minimum_stack_size

 val minimum_stack_size #"s-parame.ads" 84 0 0# 
   (__void_param : unit) : int
  requires { true }
  ensures { ( (result = (System__parameters__minimum_stack_size.minimum_stack_size ())) /\ (System__parameters__size_type__axiom.dynamic_invariant result True False True) ) }
 
 axiom minimum_stack_size__post_axiom :
  (forall __void_param : unit [(System__parameters__minimum_stack_size.minimum_stack_size __void_param)].
   ( true -> (let result = (System__parameters__minimum_stack_size.minimum_stack_size __void_param) in (
    (System__parameters__size_type__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "adjust_storage_size" defined at s-parame.ads:87, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__parameters__adjust_storage_size__axiom
 use import "_gnatprove_standard".Main
 use        System__parameters__size_type
 use        System__parameters__size_type__axiom
 use        System__parameters__adjust_storage_size

 val adjust_storage_size #"s-parame.ads" 87 0 0# 
   (size : int) : int
  requires { true }
  ensures { ( (result = (System__parameters__adjust_storage_size.adjust_storage_size size)) /\ (System__parameters__size_type__axiom.dynamic_invariant result True False True) ) }
 
 axiom adjust_storage_size__post_axiom :
  (forall size : int [(System__parameters__adjust_storage_size.adjust_storage_size size)].
   ( (System__parameters__size_type.in_range size) -> (let result = (System__parameters__adjust_storage_size.adjust_storage_size size) in (
    (System__parameters__size_type__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "strlen" defined at s-crtl.ads:85, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__strlen__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__address__axiom
 use        System__crtl__size_t__axiom
 use        System__crtl__strlen

 val strlen #"s-crtl.ads" 85 0 0# 
   (a : BV32.t) : BV32.t
  requires { true }
  ensures { ( (result = (System__crtl__strlen.strlen a)) /\ (System__crtl__size_t__axiom.dynamic_invariant result True False True) ) }
 
 axiom strlen__post_axiom :
  (forall a : BV32.t [(System__crtl__strlen.strlen a)].
   ( (System__address__axiom.dynamic_invariant a True True True) -> (let result = (System__crtl__strlen.strlen a) in (
    (System__crtl__size_t__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "strncpy" defined at s-crtl.ads:88, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__strncpy__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 val strncpy #"s-crtl.ads" 88 0 0# 
   (dest : BV32.t) (src : BV32.t) (n : BV32.t) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "atoi" defined at s-crtl.ads:95, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__atoi__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        Standard__integer__axiom
 use        System__address__axiom
 use        System__crtl__atoi

 val atoi #"s-crtl.ads" 95 0 0# 
   (a : BV32.t) : int
  requires { true }
  ensures { ( (result = (System__crtl__atoi.atoi a)) /\ (Standard__integer__axiom.dynamic_invariant result True False True) ) }
 
 axiom atoi__post_axiom :
  (forall a : BV32.t [(System__crtl__atoi.atoi a)].
   ( (System__address__axiom.dynamic_invariant a True True True) -> (let result = (System__crtl__atoi.atoi a) in (
    (Standard__integer__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "clearerr" defined at s-crtl.ads:98, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__clearerr__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 val clearerr #"s-crtl.ads" 98 0 0# 
   (stream : BV32.t) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "dup" defined at s-crtl.ads:101, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__dup__axiom
 use import "_gnatprove_standard".Main
 use        System__crtl__int
 use        System__crtl__int__axiom
 use        System__crtl__dup

 val dup #"s-crtl.ads" 101 0 0# 
   (handle : int) : int
  requires { true }
  ensures { ( (result = (System__crtl__dup.dup handle)) /\ (System__crtl__int__axiom.dynamic_invariant result True False True) ) }
 
 axiom dup__post_axiom :
  (forall handle : int [(System__crtl__dup.dup handle)].
   ( (System__crtl__int.in_range handle) -> (let result = (System__crtl__dup.dup handle) in (
    (System__crtl__int__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "dup2" defined at s-crtl.ads:104, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__dup2__axiom
 use import "_gnatprove_standard".Main
 use        System__crtl__int
 use        System__crtl__int__axiom
 use        System__crtl__dup2

 val dup2 #"s-crtl.ads" 104 0 0# 
   (from : int) (to__ : int) : int
  requires { true }
  ensures { ( (result = (System__crtl__dup2.dup2 from to__)) /\ (System__crtl__int__axiom.dynamic_invariant result True False True) ) }
 
 axiom dup2__post_axiom :
  (forall from to__ : int [(System__crtl__dup2.dup2 from to__)].
   ( ( (System__crtl__int.in_range from) /\ (System__crtl__int.in_range to__) ) -> (let result = (System__crtl__dup2.dup2 from to__) in (
    (System__crtl__int__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "fclose" defined at s-crtl.ads:107, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__fclose__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__crtl__files
 use        System__crtl__int__axiom
 use        System__crtl__fclose

 val fclose #"s-crtl.ads" 107 0 0# 
   (stream : BV32.t) : int
  requires { true }
  ensures { ( (result = (System__crtl__fclose.fclose stream)) /\ (System__crtl__int__axiom.dynamic_invariant result True False True) ) }
 
 axiom fclose__post_axiom :
  (forall stream : BV32.t [(System__crtl__fclose.fclose stream)].
   ( (if (( True \/ (BV32.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) -> (let result = (System__crtl__fclose.fclose stream) in (
    (System__crtl__int__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "fdopen" defined at s-crtl.ads:110, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__fdopen__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__crtl__chars
 use        System__crtl__files
 use        System__crtl__int
 use        System__crtl__fdopen

 val fdopen #"s-crtl.ads" 110 0 0# 
   (handle : int) (mode : BV32.t) : BV32.t
  requires { true }
  ensures { ( (result = (System__crtl__fdopen.fdopen handle mode)) /\ (if (( True \/ (BV32.ule System__crtl__files.first System__crtl__files.last) )) then (
   (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last result)) else true) ) }
 
 axiom fdopen__post_axiom :
  (forall handle : int.
  (forall mode : BV32.t [(System__crtl__fdopen.fdopen handle mode)].
   ( ( (System__crtl__int.in_range handle) /\ (if (( True \/ (BV32.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last mode)) else true) ) -> (let result = (System__crtl__fdopen.fdopen handle mode) in (
    (if (( True \/ (BV32.ule System__crtl__files.first System__crtl__files.last) )) then (
     (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last result)) else true)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "fflush" defined at s-crtl.ads:113, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__fflush__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__crtl__files
 use        System__crtl__int__axiom
 use        System__crtl__fflush

 val fflush #"s-crtl.ads" 113 0 0# 
   (stream : BV32.t) : int
  requires { true }
  ensures { ( (result = (System__crtl__fflush.fflush stream)) /\ (System__crtl__int__axiom.dynamic_invariant result True False True) ) }
 
 axiom fflush__post_axiom :
  (forall stream : BV32.t [(System__crtl__fflush.fflush stream)].
   ( (if (( True \/ (BV32.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) -> (let result = (System__crtl__fflush.fflush stream) in (
    (System__crtl__int__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "fgetc" defined at s-crtl.ads:116, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__fgetc__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__crtl__files
 use        System__crtl__int__axiom
 use        System__crtl__fgetc

 val fgetc #"s-crtl.ads" 116 0 0# 
   (stream : BV32.t) : int
  requires { true }
  ensures { ( (result = (System__crtl__fgetc.fgetc stream)) /\ (System__crtl__int__axiom.dynamic_invariant result True False True) ) }
 
 axiom fgetc__post_axiom :
  (forall stream : BV32.t [(System__crtl__fgetc.fgetc stream)].
   ( (if (( True \/ (BV32.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) -> (let result = (System__crtl__fgetc.fgetc stream) in (
    (System__crtl__int__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "fgets" defined at s-crtl.ads:119, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__fgets__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__crtl__chars
 use        System__crtl__files
 use        System__crtl__int
 use        System__crtl__fgets

 val fgets #"s-crtl.ads" 119 0 0# 
   (strng : BV32.t) (n : int) (stream : BV32.t) : BV32.t
  requires { true }
  ensures { ( (result = (System__crtl__fgets.fgets strng n stream)) /\ (if (( True \/ (BV32.ule System__crtl__chars.first System__crtl__chars.last) )) then (
   (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last result)) else true) ) }
 
 axiom fgets__post_axiom :
  (forall strng stream : BV32.t.
  (forall n : int [(System__crtl__fgets.fgets strng n stream)].
   ( ( ( (if (( True \/ (BV32.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last strng)) else true) /\ (System__crtl__int.in_range n) ) /\ (if (( True \/ (BV32.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) ) -> (let result = (System__crtl__fgets.fgets strng n stream) in (
    (if (( True \/ (BV32.ule System__crtl__chars.first System__crtl__chars.last) )) then (
     (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last result)) else true)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "fopen" defined at s-crtl.ads:122, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__fopen__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__crtl__chars
 use        System__crtl__files
 use        System__crtl__filename_encoding
 use        System__crtl__fopen

 val fopen #"s-crtl.ads" 122 0 0# 
   (filename : BV32.t) (mode : BV32.t) (encoding : int) : BV32.t
  requires { true }
  ensures { ( (result = (System__crtl__fopen.fopen filename mode encoding)) /\ (if (( True \/ (BV32.ule System__crtl__files.first System__crtl__files.last) )) then (
   (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last result)) else true) ) }
 
 axiom fopen__post_axiom :
  (forall filename mode : BV32.t.
  (forall encoding : int [(System__crtl__fopen.fopen filename mode encoding)].
   ( ( ( (if (( True \/ (BV32.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last filename)) else true) /\ (if (( True \/ (BV32.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last mode)) else true) ) /\ (System__crtl__filename_encoding.in_range encoding) ) -> (let result = (System__crtl__fopen.fopen filename mode encoding) in (
    (if (( True \/ (BV32.ule System__crtl__files.first System__crtl__files.last) )) then (
     (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last result)) else true)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "fputc" defined at s-crtl.ads:128, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__fputc__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__crtl__files
 use        System__crtl__int
 use        System__crtl__int__axiom
 use        System__crtl__fputc

 val fputc #"s-crtl.ads" 128 0 0# 
   (c : int) (stream : BV32.t) : int
  requires { true }
  ensures { ( (result = (System__crtl__fputc.fputc c stream)) /\ (System__crtl__int__axiom.dynamic_invariant result True False True) ) }
 
 axiom fputc__post_axiom :
  (forall c : int.
  (forall stream : BV32.t [(System__crtl__fputc.fputc c stream)].
   ( ( (System__crtl__int.in_range c) /\ (if (( True \/ (BV32.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) ) -> (let result = (System__crtl__fputc.fputc c stream) in (
    (System__crtl__int__axiom.dynamic_invariant result True False True)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "fputwc" defined at s-crtl.ads:131, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__fputwc__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__crtl__files
 use        System__crtl__int
 use        System__crtl__int__axiom
 use        System__crtl__fputwc

 val fputwc #"s-crtl.ads" 131 0 0# 
   (c : int) (stream : BV32.t) : int
  requires { true }
  ensures { ( (result = (System__crtl__fputwc.fputwc c stream)) /\ (System__crtl__int__axiom.dynamic_invariant result True False True) ) }
 
 axiom fputwc__post_axiom :
  (forall c : int.
  (forall stream : BV32.t [(System__crtl__fputwc.fputwc c stream)].
   ( ( (System__crtl__int.in_range c) /\ (if (( True \/ (BV32.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) ) -> (let result = (System__crtl__fputwc.fputwc c stream) in (
    (System__crtl__int__axiom.dynamic_invariant result True False True)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "fputs" defined at s-crtl.ads:134, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__fputs__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__crtl__chars
 use        System__crtl__files
 use        System__crtl__int__axiom
 use        System__crtl__fputs

 val fputs #"s-crtl.ads" 134 0 0# 
   (strng : BV32.t) (stream : BV32.t) : int
  requires { true }
  ensures { ( (result = (System__crtl__fputs.fputs strng stream)) /\ (System__crtl__int__axiom.dynamic_invariant result True False True) ) }
 
 axiom fputs__post_axiom :
  (forall strng stream : BV32.t [(System__crtl__fputs.fputs strng stream)].
   ( ( (if (( True \/ (BV32.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last strng)) else true) /\ (if (( True \/ (BV32.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) ) -> (let result = (System__crtl__fputs.fputs strng stream) in (
    (System__crtl__int__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "free" defined at s-crtl.ads:137, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__free__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 val free #"s-crtl.ads" 137 0 0# 
   (ptr : BV32.t) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "freopen" defined at s-crtl.ads:140, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__freopen__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__crtl__chars
 use        System__crtl__files
 use        System__crtl__filename_encoding
 use        System__crtl__freopen

 val freopen #"s-crtl.ads" 140 0 0# 
   (filename : BV32.t) (mode : BV32.t) (stream : BV32.t) (encoding : int) : BV32.t
  requires { true }
  ensures { ( (result = (System__crtl__freopen.freopen filename mode stream encoding)) /\ (if (( True \/ (BV32.ule System__crtl__files.first System__crtl__files.last) )) then (
   (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last result)) else true) ) }
 
 axiom freopen__post_axiom :
  (forall filename mode stream : BV32.t.
  (forall encoding : int [(System__crtl__freopen.freopen filename mode stream encoding)].
   ( ( ( ( (if (( True \/ (BV32.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last filename)) else true) /\ (if (( True \/ (BV32.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last mode)) else true) ) /\ (if (( True \/ (BV32.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) ) /\ (System__crtl__filename_encoding.in_range encoding) ) -> (let result = (System__crtl__freopen.freopen filename mode stream encoding) in (
    (if (( True \/ (BV32.ule System__crtl__files.first System__crtl__files.last) )) then (
     (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last result)) else true)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "fseek" defined at s-crtl.ads:147, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__fseek__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__crtl__files
 use        System__crtl__int
 use        System__crtl__int__axiom
 use        System__crtl__long
 use        System__crtl__fseek

 val fseek #"s-crtl.ads" 147 0 0# 
   (stream : BV32.t) (offset : int) (origin : int) : int
  requires { true }
  ensures { ( (result = (System__crtl__fseek.fseek stream offset origin)) /\ (System__crtl__int__axiom.dynamic_invariant result True False True) ) }
 
 axiom fseek__post_axiom :
  (forall stream : BV32.t.
  (forall offset origin : int [(System__crtl__fseek.fseek stream offset origin)].
   ( ( ( (if (( True \/ (BV32.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) /\ (System__crtl__long.in_range offset) ) /\ (System__crtl__int.in_range origin) ) -> (let result = (System__crtl__fseek.fseek stream offset origin) in (
    (System__crtl__int__axiom.dynamic_invariant result True False True)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "fseek64" defined at s-crtl.ads:153, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__fseek64__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__crtl__files
 use        System__crtl__int
 use        System__crtl__int__axiom
 use        System__crtl__int64
 use        System__crtl__fseek64

 val fseek64 #"s-crtl.ads" 153 0 0# 
   (stream : BV32.t) (offset : int) (origin : int) : int
  requires { true }
  ensures { ( (result = (System__crtl__fseek64.fseek64 stream offset origin)) /\ (System__crtl__int__axiom.dynamic_invariant result True False True) ) }
 
 axiom fseek64__post_axiom :
  (forall stream : BV32.t.
  (forall offset origin : int [(System__crtl__fseek64.fseek64 stream offset origin)].
   ( ( ( (if (( True \/ (BV32.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) /\ (System__crtl__int64.in_range offset) ) /\ (System__crtl__int.in_range origin) ) -> (let result = (System__crtl__fseek64.fseek64 stream offset origin) in (
    (System__crtl__int__axiom.dynamic_invariant result True False True)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "ftell" defined at s-crtl.ads:159, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__ftell__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__crtl__files
 use        System__crtl__long__axiom
 use        System__crtl__ftell

 val ftell #"s-crtl.ads" 159 0 0# 
   (stream : BV32.t) : int
  requires { true }
  ensures { ( (result = (System__crtl__ftell.ftell stream)) /\ (System__crtl__long__axiom.dynamic_invariant result True False True) ) }
 
 axiom ftell__post_axiom :
  (forall stream : BV32.t [(System__crtl__ftell.ftell stream)].
   ( (if (( True \/ (BV32.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) -> (let result = (System__crtl__ftell.ftell stream) in (
    (System__crtl__long__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "ftell64" defined at s-crtl.ads:162, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__ftell64__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__crtl__files
 use        System__crtl__int64__axiom
 use        System__crtl__ftell64

 val ftell64 #"s-crtl.ads" 162 0 0# 
   (stream : BV32.t) : int
  requires { true }
  ensures { ( (result = (System__crtl__ftell64.ftell64 stream)) /\ (System__crtl__int64__axiom.dynamic_invariant result True False True) ) }
 
 axiom ftell64__post_axiom :
  (forall stream : BV32.t [(System__crtl__ftell64.ftell64 stream)].
   ( (if (( True \/ (BV32.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) -> (let result = (System__crtl__ftell64.ftell64 stream) in (
    (System__crtl__int64__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "getenv" defined at s-crtl.ads:165, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__getenv__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        Standard__string
 use        Standard__string__axiom
 use        System__address__axiom
 use        System__crtl__getenv

 val getenv #"s-crtl.ads" 165 0 0# 
   (s : Standard__string.string) : BV32.t
  requires { true }
  ensures { ( (result = (System__crtl__getenv.getenv s)) /\ (System__address__axiom.dynamic_invariant result True False True) ) }
 
 axiom getenv__post_axiom :
  (forall s : Standard__string.string [(System__crtl__getenv.getenv s)].
   ( (Standard__string__axiom.dynamic_invariant s True True True) -> (let result = (System__crtl__getenv.getenv s) in (
    (System__address__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "isatty" defined at s-crtl.ads:168, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__isatty__axiom
 use import "_gnatprove_standard".Main
 use        System__crtl__int
 use        System__crtl__int__axiom
 use        System__crtl__isatty

 val isatty #"s-crtl.ads" 168 0 0# 
   (handle : int) : int
  requires { true }
  ensures { ( (result = (System__crtl__isatty.isatty handle)) /\ (System__crtl__int__axiom.dynamic_invariant result True False True) ) }
 
 axiom isatty__post_axiom :
  (forall handle : int [(System__crtl__isatty.isatty handle)].
   ( (System__crtl__int.in_range handle) -> (let result = (System__crtl__isatty.isatty handle) in (
    (System__crtl__int__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "lseek" defined at s-crtl.ads:171, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__lseek__axiom
 use import "_gnatprove_standard".Main
 use        System__crtl__int
 use        System__crtl__off_t
 use        System__crtl__off_t__axiom
 use        System__crtl__lseek

 val lseek #"s-crtl.ads" 171 0 0# 
   (fd : int) (offset : int) (direction : int) : int
  requires { true }
  ensures { ( (result = (System__crtl__lseek.lseek fd offset direction)) /\ (System__crtl__off_t__axiom.dynamic_invariant result True False True) ) }
 
 axiom lseek__post_axiom :
  (forall fd offset direction : int [(System__crtl__lseek.lseek fd offset direction)].
   ( ( ( (System__crtl__int.in_range fd) /\ (System__crtl__off_t.in_range offset) ) /\ (System__crtl__int.in_range direction) ) -> (let result = (System__crtl__lseek.lseek fd offset direction) in (
    (System__crtl__off_t__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "malloc" defined at s-crtl.ads:174, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__malloc__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__address__axiom
 use        System__crtl__size_t
 use        System__crtl__malloc

 val malloc #"s-crtl.ads" 174 0 0# 
   (size : BV32.t) : BV32.t
  requires { true }
  ensures { ( (result = (System__crtl__malloc.malloc size)) /\ (System__address__axiom.dynamic_invariant result True False True) ) }
 
 axiom malloc__post_axiom :
  (forall size : BV32.t [(System__crtl__malloc.malloc size)].
   ( (System__crtl__size_t.in_range size) -> (let result = (System__crtl__malloc.malloc size) in (
    (System__address__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "memcpy" defined at s-crtl.ads:177, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__memcpy__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 val memcpy #"s-crtl.ads" 177 0 0# 
   (s1 : BV32.t) (s2 : BV32.t) (n : BV32.t) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "memmove" defined at s-crtl.ads:180, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__memmove__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 val memmove #"s-crtl.ads" 180 0 0# 
   (s1 : BV32.t) (s2 : BV32.t) (n : BV32.t) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "mktemp" defined at s-crtl.ads:183, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__mktemp__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 val mktemp #"s-crtl.ads" 183 0 0# 
   (template : BV32.t) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "pclose" defined at s-crtl.ads:186, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__pclose__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__address__axiom
 use        System__crtl__int__axiom
 use        System__crtl__pclose

 val pclose #"s-crtl.ads" 186 0 0# 
   (stream : BV32.t) : int
  requires { true }
  ensures { ( (result = (System__crtl__pclose.pclose stream)) /\ (System__crtl__int__axiom.dynamic_invariant result True False True) ) }
 
 axiom pclose__post_axiom :
  (forall stream : BV32.t [(System__crtl__pclose.pclose stream)].
   ( (System__address__axiom.dynamic_invariant stream True True True) -> (let result = (System__crtl__pclose.pclose stream) in (
    (System__crtl__int__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "popen" defined at s-crtl.ads:189, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__popen__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__address__axiom
 use        System__crtl__popen

 val popen #"s-crtl.ads" 189 0 0# 
   (command : BV32.t) (mode : BV32.t) : BV32.t
  requires { true }
  ensures { ( (result = (System__crtl__popen.popen command mode)) /\ (System__address__axiom.dynamic_invariant result True False True) ) }
 
 axiom popen__post_axiom :
  (forall command mode : BV32.t [(System__crtl__popen.popen command mode)].
   ( ( (System__address__axiom.dynamic_invariant command True True True) /\ (System__address__axiom.dynamic_invariant mode True True True) ) -> (let result = (System__crtl__popen.popen command mode) in (
    (System__address__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "realloc" defined at s-crtl.ads:192, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__realloc__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__address__axiom
 use        System__crtl__size_t
 use        System__crtl__realloc

 val realloc #"s-crtl.ads" 192 0 0# 
   (ptr : BV32.t) (size : BV32.t) : BV32.t
  requires { true }
  ensures { ( (result = (System__crtl__realloc.realloc ptr size)) /\ (System__address__axiom.dynamic_invariant result True False True) ) }
 
 axiom realloc__post_axiom :
  (forall ptr size : BV32.t [(System__crtl__realloc.realloc ptr size)].
   ( ( (System__address__axiom.dynamic_invariant ptr True True True) /\ (System__crtl__size_t.in_range size) ) -> (let result = (System__crtl__realloc.realloc ptr size) in (
    (System__address__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "rewind" defined at s-crtl.ads:196, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__rewind__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 val rewind #"s-crtl.ads" 196 0 0# 
   (stream : BV32.t) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "rmdir" defined at s-crtl.ads:199, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__rmdir__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string__axiom
 use        System__crtl__int__axiom
 use        System__crtl__rmdir

 val rmdir #"s-crtl.ads" 199 0 0# 
   (dir_name : Standard__string.string) : int
  requires { true }
  ensures { ( (result = (System__crtl__rmdir.rmdir dir_name)) /\ (System__crtl__int__axiom.dynamic_invariant result True False True) ) }
 
 axiom rmdir__post_axiom :
  (forall dir_name : Standard__string.string [(System__crtl__rmdir.rmdir dir_name)].
   ( (Standard__string__axiom.dynamic_invariant dir_name True True True) -> (let result = (System__crtl__rmdir.rmdir dir_name) in (
    (System__crtl__int__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "chdir" defined at s-crtl.ads:202, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__chdir__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string__axiom
 use        System__crtl__int__axiom
 use        System__crtl__chdir

 val chdir #"s-crtl.ads" 202 0 0# 
   (dir_name : Standard__string.string) : int
  requires { true }
  ensures { ( (result = (System__crtl__chdir.chdir dir_name)) /\ (System__crtl__int__axiom.dynamic_invariant result True False True) ) }
 
 axiom chdir__post_axiom :
  (forall dir_name : Standard__string.string [(System__crtl__chdir.chdir dir_name)].
   ( (Standard__string__axiom.dynamic_invariant dir_name True True True) -> (let result = (System__crtl__chdir.chdir dir_name) in (
    (System__crtl__int__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "mkdir" defined at s-crtl.ads:205, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__mkdir__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string__axiom
 use        System__crtl__int__axiom
 use        System__crtl__filename_encoding
 use        System__crtl__mkdir

 val mkdir #"s-crtl.ads" 205 0 0# 
   (dir_name : Standard__string.string) (encoding : int) : int
  requires { true }
  ensures { ( (result = (System__crtl__mkdir.mkdir dir_name encoding)) /\ (System__crtl__int__axiom.dynamic_invariant result True False True) ) }
 
 axiom mkdir__post_axiom :
  (forall dir_name : Standard__string.string.
  (forall encoding : int [(System__crtl__mkdir.mkdir dir_name encoding)].
   ( ( (Standard__string__axiom.dynamic_invariant dir_name True True True) /\ (System__crtl__filename_encoding.in_range encoding) ) -> (let result = (System__crtl__mkdir.mkdir dir_name encoding) in (
    (System__crtl__int__axiom.dynamic_invariant result True False True)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "setvbuf" defined at s-crtl.ads:210, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__setvbuf__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__crtl__chars
 use        System__crtl__files
 use        System__crtl__int
 use        System__crtl__int__axiom
 use        System__crtl__size_t
 use        System__crtl__setvbuf

 val setvbuf #"s-crtl.ads" 210 0 0# 
   (stream : BV32.t) (buffer : BV32.t) (mode : int) (size : BV32.t) : int
  requires { true }
  ensures { ( (result = (System__crtl__setvbuf.setvbuf stream buffer mode size)) /\ (System__crtl__int__axiom.dynamic_invariant result True False True) ) }
 
 axiom setvbuf__post_axiom :
  (forall stream buffer size : BV32.t.
  (forall mode : int [(System__crtl__setvbuf.setvbuf stream buffer mode size)].
   ( ( ( ( (if (( True \/ (BV32.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) /\ (if (( True \/ (BV32.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last buffer)) else true) ) /\ (System__crtl__int.in_range mode) ) /\ (System__crtl__size_t.in_range size) ) -> (let result = (System__crtl__setvbuf.setvbuf stream buffer mode size) in (
    (System__crtl__int__axiom.dynamic_invariant result True False True)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "tmpnam" defined at s-crtl.ads:217, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__tmpnam__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 val tmpnam #"s-crtl.ads" 217 0 0# 
   (str : BV32.t) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "tmpfile" defined at s-crtl.ads:220, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__tmpfile__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__crtl__files
 use        System__crtl__tmpfile

 val tmpfile #"s-crtl.ads" 220 0 0# 
   (__void_param : unit) : BV32.t
  requires { true }
  ensures { ( (result = (System__crtl__tmpfile.tmpfile ())) /\ (if (( True \/ (BV32.ule System__crtl__files.first System__crtl__files.last) )) then (
   (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last result)) else true) ) }
 
 axiom tmpfile__post_axiom :
  (forall __void_param : unit [(System__crtl__tmpfile.tmpfile __void_param)].
   ( true -> (let result = (System__crtl__tmpfile.tmpfile __void_param) in (
    (if (( True \/ (BV32.ule System__crtl__files.first System__crtl__files.last) )) then (
     (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last result)) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "ungetc" defined at s-crtl.ads:223, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__ungetc__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__crtl__files
 use        System__crtl__int
 use        System__crtl__int__axiom
 use        System__crtl__ungetc

 val ungetc #"s-crtl.ads" 223 0 0# 
   (c : int) (stream : BV32.t) : int
  requires { true }
  ensures { ( (result = (System__crtl__ungetc.ungetc c stream)) /\ (System__crtl__int__axiom.dynamic_invariant result True False True) ) }
 
 axiom ungetc__post_axiom :
  (forall c : int.
  (forall stream : BV32.t [(System__crtl__ungetc.ungetc c stream)].
   ( ( (System__crtl__int.in_range c) /\ (if (( True \/ (BV32.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) ) -> (let result = (System__crtl__ungetc.ungetc c stream) in (
    (System__crtl__int__axiom.dynamic_invariant result True False True)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "unlink" defined at s-crtl.ads:226, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__unlink__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__crtl__chars
 use        System__crtl__int__axiom
 use        System__crtl__unlink

 val unlink #"s-crtl.ads" 226 0 0# 
   (filename : BV32.t) : int
  requires { true }
  ensures { ( (result = (System__crtl__unlink.unlink filename)) /\ (System__crtl__int__axiom.dynamic_invariant result True False True) ) }
 
 axiom unlink__post_axiom :
  (forall filename : BV32.t [(System__crtl__unlink.unlink filename)].
   ( (if (( True \/ (BV32.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last filename)) else true) -> (let result = (System__crtl__unlink.unlink filename) in (
    (System__crtl__int__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "open" defined at s-crtl.ads:229, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__open__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__crtl__chars
 use        System__crtl__int
 use        System__crtl__int__axiom
 use        System__crtl__open

 val open #"s-crtl.ads" 229 0 0# 
   (filename : BV32.t) (oflag : int) : int
  requires { true }
  ensures { ( (result = (System__crtl__open.open filename oflag)) /\ (System__crtl__int__axiom.dynamic_invariant result True False True) ) }
 
 axiom open__post_axiom :
  (forall filename : BV32.t.
  (forall oflag : int [(System__crtl__open.open filename oflag)].
   ( ( (if (( True \/ (BV32.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last filename)) else true) /\ (System__crtl__int.in_range oflag) ) -> (let result = (System__crtl__open.open filename oflag) in (
    (System__crtl__int__axiom.dynamic_invariant result True False True)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "close" defined at s-crtl.ads:232, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__close__axiom
 use import "_gnatprove_standard".Main
 use        System__crtl__int
 use        System__crtl__int__axiom
 use        System__crtl__close

 val close #"s-crtl.ads" 232 0 0# 
   (fd : int) : int
  requires { true }
  ensures { ( (result = (System__crtl__close.close fd)) /\ (System__crtl__int__axiom.dynamic_invariant result True False True) ) }
 
 axiom close__post_axiom :
  (forall fd : int [(System__crtl__close.close fd)].
   ( (System__crtl__int.in_range fd) -> (let result = (System__crtl__close.close fd) in (
    (System__crtl__int__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "read" defined at s-crtl.ads:235, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__read__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__crtl__chars
 use        System__crtl__int
 use        System__crtl__size_t
 use        System__crtl__ssize_t__axiom
 use        System__crtl__read

 val read #"s-crtl.ads" 235 0 0# 
   (fd : int) (buffer : BV32.t) (count : BV32.t) : int
  requires { true }
  ensures { ( (result = (System__crtl__read.read fd buffer count)) /\ (System__crtl__ssize_t__axiom.dynamic_invariant result True False True) ) }
 
 axiom read__post_axiom :
  (forall fd : int.
  (forall buffer count : BV32.t [(System__crtl__read.read fd buffer count)].
   ( ( ( (System__crtl__int.in_range fd) /\ (if (( True \/ (BV32.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last buffer)) else true) ) /\ (System__crtl__size_t.in_range count) ) -> (let result = (System__crtl__read.read fd buffer count) in (
    (System__crtl__ssize_t__axiom.dynamic_invariant result True False True)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "write" defined at s-crtl.ads:238, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__write__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__crtl__chars
 use        System__crtl__int
 use        System__crtl__size_t
 use        System__crtl__ssize_t__axiom
 use        System__crtl__write

 val write #"s-crtl.ads" 238 0 0# 
   (fd : int) (buffer : BV32.t) (count : BV32.t) : int
  requires { true }
  ensures { ( (result = (System__crtl__write.write fd buffer count)) /\ (System__crtl__ssize_t__axiom.dynamic_invariant result True False True) ) }
 
 axiom write__post_axiom :
  (forall fd : int.
  (forall buffer count : BV32.t [(System__crtl__write.write fd buffer count)].
   ( ( ( (System__crtl__int.in_range fd) /\ (if (( True \/ (BV32.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last buffer)) else true) ) /\ (System__crtl__size_t.in_range count) ) -> (let result = (System__crtl__write.write fd buffer count) in (
    (System__crtl__ssize_t__axiom.dynamic_invariant result True False True)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "stdin" defined at i-cstrea.ads:72, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__stdin__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        Interfaces__c_streams__files
 use        Interfaces__c_streams__stdin

 val stdin #"i-cstrea.ads" 72 0 0# 
   (__void_param : unit) : BV32.t
  requires { true }
  ensures { ( (result = (Interfaces__c_streams__stdin.stdin ())) /\ (if (( True \/ (BV32.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
   (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last result)) else true) ) }
 
 axiom stdin__post_axiom :
  (forall __void_param : unit [(Interfaces__c_streams__stdin.stdin __void_param)].
   ( true -> (let result = (Interfaces__c_streams__stdin.stdin __void_param) in (
    (if (( True \/ (BV32.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
     (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last result)) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "stdout" defined at i-cstrea.ads:73, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__stdout__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        Interfaces__c_streams__files
 use        Interfaces__c_streams__stdout

 val stdout #"i-cstrea.ads" 73 0 0# 
   (__void_param : unit) : BV32.t
  requires { true }
  ensures { ( (result = (Interfaces__c_streams__stdout.stdout ())) /\ (if (( True \/ (BV32.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
   (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last result)) else true) ) }
 
 axiom stdout__post_axiom :
  (forall __void_param : unit [(Interfaces__c_streams__stdout.stdout __void_param)].
   ( true -> (let result = (Interfaces__c_streams__stdout.stdout __void_param) in (
    (if (( True \/ (BV32.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
     (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last result)) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "stderr" defined at i-cstrea.ads:74, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__stderr__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        Interfaces__c_streams__files
 use        Interfaces__c_streams__stderr

 val stderr #"i-cstrea.ads" 74 0 0# 
   (__void_param : unit) : BV32.t
  requires { true }
  ensures { ( (result = (Interfaces__c_streams__stderr.stderr ())) /\ (if (( True \/ (BV32.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
   (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last result)) else true) ) }
 
 axiom stderr__post_axiom :
  (forall __void_param : unit [(Interfaces__c_streams__stderr.stderr __void_param)].
   ( true -> (let result = (Interfaces__c_streams__stderr.stderr __void_param) in (
    (if (( True \/ (BV32.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
     (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last result)) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "feof" defined at i-cstrea.ads:95, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__feof__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        Interfaces__c_streams__files
 use        Interfaces__c_streams__int__axiom
 use        Interfaces__c_streams__feof

 val feof #"i-cstrea.ads" 95 0 0# 
   (stream : BV32.t) : int
  requires { true }
  ensures { ( (result = (Interfaces__c_streams__feof.feof stream)) /\ (Interfaces__c_streams__int__axiom.dynamic_invariant result True False True) ) }
 
 axiom feof__post_axiom :
  (forall stream : BV32.t [(Interfaces__c_streams__feof.feof stream)].
   ( (if (( True \/ (BV32.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
    (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last stream)) else true) -> (let result = (Interfaces__c_streams__feof.feof stream) in (
    (Interfaces__c_streams__int__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "ferror" defined at i-cstrea.ads:97, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__ferror__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        Interfaces__c_streams__files
 use        Interfaces__c_streams__int__axiom
 use        Interfaces__c_streams__ferror

 val ferror #"i-cstrea.ads" 97 0 0# 
   (stream : BV32.t) : int
  requires { true }
  ensures { ( (result = (Interfaces__c_streams__ferror.ferror stream)) /\ (Interfaces__c_streams__int__axiom.dynamic_invariant result True False True) ) }
 
 axiom ferror__post_axiom :
  (forall stream : BV32.t [(Interfaces__c_streams__ferror.ferror stream)].
   ( (if (( True \/ (BV32.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
    (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last stream)) else true) -> (let result = (Interfaces__c_streams__ferror.ferror stream) in (
    (Interfaces__c_streams__int__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "fileno" defined at i-cstrea.ads:106, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__fileno__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        Interfaces__c_streams__files
 use        Interfaces__c_streams__int__axiom
 use        Interfaces__c_streams__fileno

 val fileno #"i-cstrea.ads" 106 0 0# 
   (stream : BV32.t) : int
  requires { true }
  ensures { ( (result = (Interfaces__c_streams__fileno.fileno stream)) /\ (Interfaces__c_streams__int__axiom.dynamic_invariant result True False True) ) }
 
 axiom fileno__post_axiom :
  (forall stream : BV32.t [(Interfaces__c_streams__fileno.fileno stream)].
   ( (if (( True \/ (BV32.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
    (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last stream)) else true) -> (let result = (Interfaces__c_streams__fileno.fileno stream) in (
    (Interfaces__c_streams__int__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "fread" defined at i-cstrea.ads:128, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__fread__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        Interfaces__c_streams__files
 use        Interfaces__c_streams__size_t
 use        Interfaces__c_streams__size_t__axiom
 use        Interfaces__c_streams__voids
 use        Interfaces__c_streams__fread

 val fread #"i-cstrea.ads" 128 0 0# 
   (buffer : BV32.t) (size : BV32.t) (count : BV32.t) (stream : BV32.t) : BV32.t
  requires { true }
  ensures { ( (result = (Interfaces__c_streams__fread.fread buffer size count stream)) /\ (Interfaces__c_streams__size_t__axiom.dynamic_invariant result True False True) ) }
 
 axiom fread__post_axiom :
  (forall buffer size count stream : BV32.t [(Interfaces__c_streams__fread.fread buffer size count stream)].
   ( ( ( ( (if (( True \/ (BV32.ule Interfaces__c_streams__voids.first Interfaces__c_streams__voids.last) )) then (
    (Interfaces__c_streams__voids.dynamic_property Interfaces__c_streams__voids.first Interfaces__c_streams__voids.last buffer)) else true) /\ (Interfaces__c_streams__size_t.in_range size) ) /\ (Interfaces__c_streams__size_t.in_range count) ) /\ (if (( True \/ (BV32.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
    (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last stream)) else true) ) -> (let result = (Interfaces__c_streams__fread.fread buffer size count stream) in (
    (Interfaces__c_streams__size_t__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "fread__2" defined at i-cstrea.ads:134, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__fread__2__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        Interfaces__c_streams__files
 use        Interfaces__c_streams__size_t
 use        Interfaces__c_streams__size_t__axiom
 use        Interfaces__c_streams__voids
 use        Interfaces__c_streams__fread__2

 val fread__2 #"i-cstrea.ads" 134 0 0# 
   (buffer : BV32.t) (index : BV32.t) (size : BV32.t) (count : BV32.t) (stream : BV32.t) : BV32.t
  requires { true }
  ensures { ( (result = (Interfaces__c_streams__fread__2.fread__2 buffer index size count stream)) /\ (Interfaces__c_streams__size_t__axiom.dynamic_invariant result True False True) ) }
 
 axiom fread__2__post_axiom :
  (forall buffer index size count stream : BV32.t [(Interfaces__c_streams__fread__2.fread__2 buffer index size count stream)].
   ( ( ( ( ( (if (( True \/ (BV32.ule Interfaces__c_streams__voids.first Interfaces__c_streams__voids.last) )) then (
    (Interfaces__c_streams__voids.dynamic_property Interfaces__c_streams__voids.first Interfaces__c_streams__voids.last buffer)) else true) /\ (Interfaces__c_streams__size_t.in_range index) ) /\ (Interfaces__c_streams__size_t.in_range size) ) /\ (Interfaces__c_streams__size_t.in_range count) ) /\ (if (( True \/ (BV32.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
    (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last stream)) else true) ) -> (let result = (Interfaces__c_streams__fread__2.fread__2 buffer index size count stream) in (
    (Interfaces__c_streams__size_t__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "fwrite" defined at i-cstrea.ads:171, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__fwrite__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        Interfaces__c_streams__files
 use        Interfaces__c_streams__size_t
 use        Interfaces__c_streams__size_t__axiom
 use        Interfaces__c_streams__voids
 use        Interfaces__c_streams__fwrite

 val fwrite #"i-cstrea.ads" 171 0 0# 
   (buffer : BV32.t) (size : BV32.t) (count : BV32.t) (stream : BV32.t) : BV32.t
  requires { true }
  ensures { ( (result = (Interfaces__c_streams__fwrite.fwrite buffer size count stream)) /\ (Interfaces__c_streams__size_t__axiom.dynamic_invariant result True False True) ) }
 
 axiom fwrite__post_axiom :
  (forall buffer size count stream : BV32.t [(Interfaces__c_streams__fwrite.fwrite buffer size count stream)].
   ( ( ( ( (if (( True \/ (BV32.ule Interfaces__c_streams__voids.first Interfaces__c_streams__voids.last) )) then (
    (Interfaces__c_streams__voids.dynamic_property Interfaces__c_streams__voids.first Interfaces__c_streams__voids.last buffer)) else true) /\ (Interfaces__c_streams__size_t.in_range size) ) /\ (Interfaces__c_streams__size_t.in_range count) ) /\ (if (( True \/ (BV32.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
    (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last stream)) else true) ) -> (let result = (Interfaces__c_streams__fwrite.fwrite buffer size count stream) in (
    (Interfaces__c_streams__size_t__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "setvbuf" defined at i-cstrea.ads:184, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__setvbuf__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        Interfaces__c_streams__chars
 use        Interfaces__c_streams__files
 use        Interfaces__c_streams__int
 use        Interfaces__c_streams__int__axiom
 use        Interfaces__c_streams__size_t
 use        Interfaces__c_streams__setvbuf

 val setvbuf #"i-cstrea.ads" 184 0 0# 
   (stream : BV32.t) (buffer : BV32.t) (mode : int) (size : BV32.t) : int
  requires { true }
  ensures { ( (result = (Interfaces__c_streams__setvbuf.setvbuf stream buffer mode size)) /\ (Interfaces__c_streams__int__axiom.dynamic_invariant result True False True) ) }
 
 axiom setvbuf__post_axiom :
  (forall stream buffer size : BV32.t.
  (forall mode : int [(Interfaces__c_streams__setvbuf.setvbuf stream buffer mode size)].
   ( ( ( ( (if (( True \/ (BV32.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
    (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last stream)) else true) /\ (if (( True \/ (BV32.ule Interfaces__c_streams__chars.first Interfaces__c_streams__chars.last) )) then (
    (Interfaces__c_streams__chars.dynamic_property Interfaces__c_streams__chars.first Interfaces__c_streams__chars.last buffer)) else true) ) /\ (Interfaces__c_streams__int.in_range mode) ) /\ (Interfaces__c_streams__size_t.in_range size) ) -> (let result = (Interfaces__c_streams__setvbuf.setvbuf stream buffer mode size) in (
    (Interfaces__c_streams__int__axiom.dynamic_invariant result True False True)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "file_exists" defined at i-cstrea.ads:212, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__file_exists__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        Interfaces__c_streams__chars
 use        Interfaces__c_streams__int__axiom
 use        Interfaces__c_streams__file_exists

 val file_exists #"i-cstrea.ads" 212 0 0# 
   (name : BV32.t) : int
  requires { true }
  ensures { ( (result = (Interfaces__c_streams__file_exists.file_exists name)) /\ (Interfaces__c_streams__int__axiom.dynamic_invariant result True False True) ) }
 
 axiom file_exists__post_axiom :
  (forall name : BV32.t [(Interfaces__c_streams__file_exists.file_exists name)].
   ( (if (( True \/ (BV32.ule Interfaces__c_streams__chars.first Interfaces__c_streams__chars.last) )) then (
    (Interfaces__c_streams__chars.dynamic_property Interfaces__c_streams__chars.first Interfaces__c_streams__chars.last name)) else true) -> (let result = (Interfaces__c_streams__file_exists.file_exists name) in (
    (Interfaces__c_streams__int__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "is_regular_file" defined at i-cstrea.ads:215, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__is_regular_file__axiom
 use import "_gnatprove_standard".Main
 use        Interfaces__c_streams__int
 use        Interfaces__c_streams__int__axiom
 use        Interfaces__c_streams__is_regular_file

 val is_regular_file #"i-cstrea.ads" 215 0 0# 
   (handle : int) : int
  requires { true }
  ensures { ( (result = (Interfaces__c_streams__is_regular_file.is_regular_file handle)) /\ (Interfaces__c_streams__int__axiom.dynamic_invariant result True False True) ) }
 
 axiom is_regular_file__post_axiom :
  (forall handle : int [(Interfaces__c_streams__is_regular_file.is_regular_file handle)].
   ( (Interfaces__c_streams__int.in_range handle) -> (let result = (Interfaces__c_streams__is_regular_file.is_regular_file handle) in (
    (Interfaces__c_streams__int__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "set_binary_mode" defined at i-cstrea.ads:223, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__set_binary_mode__axiom
 use import "_gnatprove_standard".Main

 val set_binary_mode #"i-cstrea.ads" 223 0 0# 
   (handle : int) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "set_text_mode" defined at i-cstrea.ads:224, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__set_text_mode__axiom
 use import "_gnatprove_standard".Main

 val set_text_mode #"i-cstrea.ads" 224 0 0# 
   (handle : int) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "set_mode" defined at i-cstrea.ads:254, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__set_mode__axiom
 use import "_gnatprove_standard".Main

 val set_mode #"i-cstrea.ads" 254 0 0# 
   (handle : int) (mode : int) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "full_name" defined at i-cstrea.ads:262, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__full_name__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 val full_name #"i-cstrea.ads" 262 0 0# 
   (nam : BV32.t) (buffer : BV32.t) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "get_wc_encoding_method" defined at s-wchcon.ads:203, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__wch_con__get_wc_encoding_method__axiom
 use import "_gnatprove_standard".Main
 use        Standard__character
 use        System__wch_con__wc_encoding_method__axiom
 use        System__wch_con__get_wc_encoding_method

 val get_wc_encoding_method #"s-wchcon.ads" 203 0 0# 
   (c : int) : int
  requires { true }
  ensures { ( (result = (System__wch_con__get_wc_encoding_method.get_wc_encoding_method c)) /\ (System__wch_con__wc_encoding_method__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_wc_encoding_method__post_axiom :
  (forall c : int [(System__wch_con__get_wc_encoding_method.get_wc_encoding_method c)].
   ( (Standard__character.in_range c) -> (let result = (System__wch_con__get_wc_encoding_method.get_wc_encoding_method c) in (
    (System__wch_con__wc_encoding_method__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "get_wc_encoding_method__2" defined at s-wchcon.ads:207, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__wch_con__get_wc_encoding_method__2__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string__axiom
 use        System__wch_con__wc_encoding_method__axiom
 use        System__wch_con__get_wc_encoding_method__2

 val get_wc_encoding_method__2 #"s-wchcon.ads" 207 0 0# 
   (s : Standard__string.string) : int
  requires { true }
  ensures { ( (result = (System__wch_con__get_wc_encoding_method__2.get_wc_encoding_method__2 s)) /\ (System__wch_con__wc_encoding_method__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_wc_encoding_method__2__post_axiom :
  (forall s : Standard__string.string [(System__wch_con__get_wc_encoding_method__2.get_wc_encoding_method__2 s)].
   ( (Standard__string__axiom.dynamic_invariant s True True True) -> (let result = (System__wch_con__get_wc_encoding_method__2.get_wc_encoding_method__2 s) in (
    (System__wch_con__wc_encoding_method__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "is_start_of_encoding" defined at s-wchcon.ads:212, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__wch_con__is_start_of_encoding__axiom
 use import "_gnatprove_standard".Main
 use        System__wch_con__is_start_of_encoding

 val is_start_of_encoding #"s-wchcon.ads" 212 0 0# 
   (c : int) (em : int) : bool
  requires { true }
  ensures { (result = (System__wch_con__is_start_of_encoding.is_start_of_encoding c em)) }

end

(* Module for declaring a program function (and possibly an axiom) for "create" defined at a-textio.ads:86, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__create__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type__axiom

 val create #"a-textio.ads" 86 0 0# 
   (file : Ada__text_io__file_type.file_type__ref) (mode : int) (name : Standard__string.string) (form : Standard__string.string) : unit
  requires { true }
  ensures { (Ada__text_io__file_type__axiom.dynamic_invariant file.Ada__text_io__file_type.file_type__content True True True) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "open" defined at a-textio.ads:92, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__open__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type__axiom

 val open #"a-textio.ads" 92 0 0# 
   (file : Ada__text_io__file_type.file_type__ref) (mode : int) (name : Standard__string.string) (form : Standard__string.string) : unit
  requires { true }
  ensures { (Ada__text_io__file_type__axiom.dynamic_invariant file.Ada__text_io__file_type.file_type__content True True True) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "close" defined at a-textio.ads:98, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__close__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type__axiom

 val close #"a-textio.ads" 98 0 0# 
   (file : Ada__text_io__file_type.file_type__ref) : unit
  requires { true }
  ensures { (Ada__text_io__file_type__axiom.dynamic_invariant file.Ada__text_io__file_type.file_type__content True True True) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "delete" defined at a-textio.ads:99, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__delete__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type__axiom

 val delete #"a-textio.ads" 99 0 0# 
   (file : Ada__text_io__file_type.file_type__ref) : unit
  requires { true }
  ensures { (Ada__text_io__file_type__axiom.dynamic_invariant file.Ada__text_io__file_type.file_type__content True True True) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "reset" defined at a-textio.ads:100, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__reset__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type__axiom

 val reset #"a-textio.ads" 100 0 0# 
   (file : Ada__text_io__file_type.file_type__ref) (mode : int) : unit
  requires { true }
  ensures { (Ada__text_io__file_type__axiom.dynamic_invariant file.Ada__text_io__file_type.file_type__content True True True) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "reset__2" defined at a-textio.ads:101, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__reset__2__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type__axiom

 val reset__2 #"a-textio.ads" 101 0 0# 
   (file : Ada__text_io__file_type.file_type__ref) : unit
  requires { true }
  ensures { (Ada__text_io__file_type__axiom.dynamic_invariant file.Ada__text_io__file_type.file_type__content True True True) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "mode" defined at a-textio.ads:103, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__mode__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type__axiom
 use        Ada__text_io__file_mode__axiom
 use        Ada__text_io__mode

 val mode #"a-textio.ads" 103 0 0# 
   (file : Ada__text_io__file_type.file_type) : int
  requires { true }
  ensures { ( (result = (Ada__text_io__mode.mode file)) /\ (Ada__text_io__file_mode__axiom.dynamic_invariant result True False True) ) }
 
 axiom mode__post_axiom :
  (forall file : Ada__text_io__file_type.file_type [(Ada__text_io__mode.mode file)].
   ( (Ada__text_io__file_type__axiom.dynamic_invariant file True True True) -> (let result = (Ada__text_io__mode.mode file) in (
    (Ada__text_io__file_mode__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "name" defined at a-textio.ads:104, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__name__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string__axiom
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type__axiom
 use        Ada__text_io__name

 val name #"a-textio.ads" 104 0 0# 
   (file : Ada__text_io__file_type.file_type) : Standard__string.string
  requires { true }
  ensures { ( (result = (Ada__text_io__name.name file)) /\ (Standard__string__axiom.dynamic_invariant result True False True) ) }
 
 axiom name__post_axiom :
  (forall file : Ada__text_io__file_type.file_type [(Ada__text_io__name.name file)].
   ( (Ada__text_io__file_type__axiom.dynamic_invariant file True True True) -> (let result = (Ada__text_io__name.name file) in (
    (Standard__string__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "form" defined at a-textio.ads:105, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__form__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string__axiom
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type__axiom
 use        Ada__text_io__form

 val form #"a-textio.ads" 105 0 0# 
   (file : Ada__text_io__file_type.file_type) : Standard__string.string
  requires { true }
  ensures { ( (result = (Ada__text_io__form.form file)) /\ (Standard__string__axiom.dynamic_invariant result True False True) ) }
 
 axiom form__post_axiom :
  (forall file : Ada__text_io__file_type.file_type [(Ada__text_io__form.form file)].
   ( (Ada__text_io__file_type__axiom.dynamic_invariant file True True True) -> (let result = (Ada__text_io__form.form file) in (
    (Standard__string__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "is_open" defined at a-textio.ads:107, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__is_open__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__is_open

 val is_open #"a-textio.ads" 107 0 0# 
   (file : Ada__text_io__file_type.file_type) : bool
  requires { true }
  ensures { (result = (Ada__text_io__is_open.is_open file)) }

end

(* Module for declaring a program function (and possibly an axiom) for "set_input" defined at a-textio.ads:113, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__set_input__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val set_input #"a-textio.ads" 113 0 0# 
   (file : Ada__text_io__file_type.file_type) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "set_output" defined at a-textio.ads:114, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__set_output__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val set_output #"a-textio.ads" 114 0 0# 
   (file : Ada__text_io__file_type.file_type) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "set_error" defined at a-textio.ads:115, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__set_error__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val set_error #"a-textio.ads" 115 0 0# 
   (file : Ada__text_io__file_type.file_type) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "standard_input" defined at a-textio.ads:117, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__standard_input__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type__axiom
 use        Ada__text_io__standard_input

 val standard_input #"a-textio.ads" 117 0 0# 
   (__void_param : unit) : Ada__text_io__file_type.file_type
  requires { true }
  ensures { ( (result = (Ada__text_io__standard_input.standard_input ())) /\ (Ada__text_io__file_type__axiom.dynamic_invariant result True False True) ) }
 
 axiom standard_input__post_axiom :
  (forall __void_param : unit [(Ada__text_io__standard_input.standard_input __void_param)].
   ( true -> (let result = (Ada__text_io__standard_input.standard_input __void_param) in (
    (Ada__text_io__file_type__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "standard_output" defined at a-textio.ads:118, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__standard_output__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type__axiom
 use        Ada__text_io__standard_output

 val standard_output #"a-textio.ads" 118 0 0# 
   (__void_param : unit) : Ada__text_io__file_type.file_type
  requires { true }
  ensures { ( (result = (Ada__text_io__standard_output.standard_output ())) /\ (Ada__text_io__file_type__axiom.dynamic_invariant result True False True) ) }
 
 axiom standard_output__post_axiom :
  (forall __void_param : unit [(Ada__text_io__standard_output.standard_output __void_param)].
   ( true -> (let result = (Ada__text_io__standard_output.standard_output __void_param) in (
    (Ada__text_io__file_type__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "standard_error" defined at a-textio.ads:119, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__standard_error__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type__axiom
 use        Ada__text_io__standard_error

 val standard_error #"a-textio.ads" 119 0 0# 
   (__void_param : unit) : Ada__text_io__file_type.file_type
  requires { true }
  ensures { ( (result = (Ada__text_io__standard_error.standard_error ())) /\ (Ada__text_io__file_type__axiom.dynamic_invariant result True False True) ) }
 
 axiom standard_error__post_axiom :
  (forall __void_param : unit [(Ada__text_io__standard_error.standard_error __void_param)].
   ( true -> (let result = (Ada__text_io__standard_error.standard_error __void_param) in (
    (Ada__text_io__file_type__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "current_input" defined at a-textio.ads:121, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__current_input__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type__axiom
 use        Ada__text_io__current_input

 val current_input #"a-textio.ads" 121 0 0# 
   (__void_param : unit) : Ada__text_io__file_type.file_type
  requires { true }
  ensures { ( (result = (Ada__text_io__current_input.current_input ())) /\ (Ada__text_io__file_type__axiom.dynamic_invariant result True False True) ) }
 
 axiom current_input__post_axiom :
  (forall __void_param : unit [(Ada__text_io__current_input.current_input __void_param)].
   ( true -> (let result = (Ada__text_io__current_input.current_input __void_param) in (
    (Ada__text_io__file_type__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "current_output" defined at a-textio.ads:122, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__current_output__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type__axiom
 use        Ada__text_io__current_output

 val current_output #"a-textio.ads" 122 0 0# 
   (__void_param : unit) : Ada__text_io__file_type.file_type
  requires { true }
  ensures { ( (result = (Ada__text_io__current_output.current_output ())) /\ (Ada__text_io__file_type__axiom.dynamic_invariant result True False True) ) }
 
 axiom current_output__post_axiom :
  (forall __void_param : unit [(Ada__text_io__current_output.current_output __void_param)].
   ( true -> (let result = (Ada__text_io__current_output.current_output __void_param) in (
    (Ada__text_io__file_type__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "current_error" defined at a-textio.ads:123, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__current_error__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type__axiom
 use        Ada__text_io__current_error

 val current_error #"a-textio.ads" 123 0 0# 
   (__void_param : unit) : Ada__text_io__file_type.file_type
  requires { true }
  ensures { ( (result = (Ada__text_io__current_error.current_error ())) /\ (Ada__text_io__file_type__axiom.dynamic_invariant result True False True) ) }
 
 axiom current_error__post_axiom :
  (forall __void_param : unit [(Ada__text_io__current_error.current_error __void_param)].
   ( true -> (let result = (Ada__text_io__current_error.current_error __void_param) in (
    (Ada__text_io__file_type__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "flush" defined at a-textio.ads:142, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__flush__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val flush #"a-textio.ads" 142 0 0# 
   (file : Ada__text_io__file_type.file_type) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "flush__2" defined at a-textio.ads:143, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__flush__2__axiom
 use import "_gnatprove_standard".Main

 val flush__2 #"a-textio.ads" 143 0 0# 
   (__void_param : unit) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "set_line_length" defined at a-textio.ads:149, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__set_line_length__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val set_line_length #"a-textio.ads" 149 0 0# 
   (file : Ada__text_io__file_type.file_type) (to__ : int) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "set_line_length__2" defined at a-textio.ads:150, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__set_line_length__2__axiom
 use import "_gnatprove_standard".Main

 val set_line_length__2 #"a-textio.ads" 150 0 0# 
   (to__ : int) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "set_page_length" defined at a-textio.ads:152, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__set_page_length__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val set_page_length #"a-textio.ads" 152 0 0# 
   (file : Ada__text_io__file_type.file_type) (to__ : int) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "set_page_length__2" defined at a-textio.ads:153, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__set_page_length__2__axiom
 use import "_gnatprove_standard".Main

 val set_page_length__2 #"a-textio.ads" 153 0 0# 
   (to__ : int) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "line_length" defined at a-textio.ads:155, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line_length__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type__axiom
 use        Ada__text_io__count__axiom
 use        Ada__text_io__line_length

 val line_length #"a-textio.ads" 155 0 0# 
   (file : Ada__text_io__file_type.file_type) : int
  requires { true }
  ensures { ( (result = (Ada__text_io__line_length.line_length file)) /\ (Ada__text_io__count__axiom.dynamic_invariant result True False True) ) }
 
 axiom line_length__post_axiom :
  (forall file : Ada__text_io__file_type.file_type [(Ada__text_io__line_length.line_length file)].
   ( (Ada__text_io__file_type__axiom.dynamic_invariant file True True True) -> (let result = (Ada__text_io__line_length.line_length file) in (
    (Ada__text_io__count__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "line_length__2" defined at a-textio.ads:156, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line_length__2__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__count__axiom
 use        Ada__text_io__line_length__2

 val line_length__2 #"a-textio.ads" 156 0 0# 
   (__void_param : unit) : int
  requires { true }
  ensures { ( (result = (Ada__text_io__line_length__2.line_length__2 ())) /\ (Ada__text_io__count__axiom.dynamic_invariant result True False True) ) }
 
 axiom line_length__2__post_axiom :
  (forall __void_param : unit [(Ada__text_io__line_length__2.line_length__2 __void_param)].
   ( true -> (let result = (Ada__text_io__line_length__2.line_length__2 __void_param) in (
    (Ada__text_io__count__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page_length" defined at a-textio.ads:158, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page_length__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type__axiom
 use        Ada__text_io__count__axiom
 use        Ada__text_io__page_length

 val page_length #"a-textio.ads" 158 0 0# 
   (file : Ada__text_io__file_type.file_type) : int
  requires { true }
  ensures { ( (result = (Ada__text_io__page_length.page_length file)) /\ (Ada__text_io__count__axiom.dynamic_invariant result True False True) ) }
 
 axiom page_length__post_axiom :
  (forall file : Ada__text_io__file_type.file_type [(Ada__text_io__page_length.page_length file)].
   ( (Ada__text_io__file_type__axiom.dynamic_invariant file True True True) -> (let result = (Ada__text_io__page_length.page_length file) in (
    (Ada__text_io__count__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page_length__2" defined at a-textio.ads:159, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page_length__2__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__count__axiom
 use        Ada__text_io__page_length__2

 val page_length__2 #"a-textio.ads" 159 0 0# 
   (__void_param : unit) : int
  requires { true }
  ensures { ( (result = (Ada__text_io__page_length__2.page_length__2 ())) /\ (Ada__text_io__count__axiom.dynamic_invariant result True False True) ) }
 
 axiom page_length__2__post_axiom :
  (forall __void_param : unit [(Ada__text_io__page_length__2.page_length__2 __void_param)].
   ( true -> (let result = (Ada__text_io__page_length__2.page_length__2 __void_param) in (
    (Ada__text_io__count__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "new_line" defined at a-textio.ads:165, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__new_line__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val new_line #"a-textio.ads" 165 0 0# 
   (file : Ada__text_io__file_type.file_type) (spacing : int) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "new_line__2" defined at a-textio.ads:166, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__new_line__2__axiom
 use import "_gnatprove_standard".Main

 val new_line__2 #"a-textio.ads" 166 0 0# 
   (spacing : int) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "skip_line" defined at a-textio.ads:168, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__skip_line__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val skip_line #"a-textio.ads" 168 0 0# 
   (file : Ada__text_io__file_type.file_type) (spacing : int) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "skip_line__2" defined at a-textio.ads:169, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__skip_line__2__axiom
 use import "_gnatprove_standard".Main

 val skip_line__2 #"a-textio.ads" 169 0 0# 
   (spacing : int) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "end_of_line" defined at a-textio.ads:171, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__end_of_line__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__end_of_line

 val end_of_line #"a-textio.ads" 171 0 0# 
   (file : Ada__text_io__file_type.file_type) : bool
  requires { true }
  ensures { (result = (Ada__text_io__end_of_line.end_of_line file)) }

end

(* Module for declaring a program function (and possibly an axiom) for "end_of_line__2" defined at a-textio.ads:172, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__end_of_line__2__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__end_of_line__2

 val end_of_line__2 #"a-textio.ads" 172 0 0# 
   (__void_param : unit) : bool
  requires { true }
  ensures { (result = (Ada__text_io__end_of_line__2.end_of_line__2 ())) }

end

(* Module for declaring a program function (and possibly an axiom) for "new_page" defined at a-textio.ads:174, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__new_page__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val new_page #"a-textio.ads" 174 0 0# 
   (file : Ada__text_io__file_type.file_type) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "new_page__2" defined at a-textio.ads:175, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__new_page__2__axiom
 use import "_gnatprove_standard".Main

 val new_page__2 #"a-textio.ads" 175 0 0# 
   (__void_param : unit) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "skip_page" defined at a-textio.ads:177, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__skip_page__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val skip_page #"a-textio.ads" 177 0 0# 
   (file : Ada__text_io__file_type.file_type) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "skip_page__2" defined at a-textio.ads:178, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__skip_page__2__axiom
 use import "_gnatprove_standard".Main

 val skip_page__2 #"a-textio.ads" 178 0 0# 
   (__void_param : unit) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "end_of_page" defined at a-textio.ads:180, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__end_of_page__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__end_of_page

 val end_of_page #"a-textio.ads" 180 0 0# 
   (file : Ada__text_io__file_type.file_type) : bool
  requires { true }
  ensures { (result = (Ada__text_io__end_of_page.end_of_page file)) }

end

(* Module for declaring a program function (and possibly an axiom) for "end_of_page__2" defined at a-textio.ads:181, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__end_of_page__2__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__end_of_page__2

 val end_of_page__2 #"a-textio.ads" 181 0 0# 
   (__void_param : unit) : bool
  requires { true }
  ensures { (result = (Ada__text_io__end_of_page__2.end_of_page__2 ())) }

end

(* Module for declaring a program function (and possibly an axiom) for "end_of_file" defined at a-textio.ads:183, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__end_of_file__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__end_of_file

 val end_of_file #"a-textio.ads" 183 0 0# 
   (file : Ada__text_io__file_type.file_type) : bool
  requires { true }
  ensures { (result = (Ada__text_io__end_of_file.end_of_file file)) }

end

(* Module for declaring a program function (and possibly an axiom) for "end_of_file__2" defined at a-textio.ads:184, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__end_of_file__2__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__end_of_file__2

 val end_of_file__2 #"a-textio.ads" 184 0 0# 
   (__void_param : unit) : bool
  requires { true }
  ensures { (result = (Ada__text_io__end_of_file__2.end_of_file__2 ())) }

end

(* Module for declaring a program function (and possibly an axiom) for "set_col" defined at a-textio.ads:186, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__set_col__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val set_col #"a-textio.ads" 186 0 0# 
   (file : Ada__text_io__file_type.file_type) (to__ : int) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "set_col__2" defined at a-textio.ads:187, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__set_col__2__axiom
 use import "_gnatprove_standard".Main

 val set_col__2 #"a-textio.ads" 187 0 0# 
   (to__ : int) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "set_line" defined at a-textio.ads:189, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__set_line__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val set_line #"a-textio.ads" 189 0 0# 
   (file : Ada__text_io__file_type.file_type) (to__ : int) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "set_line__2" defined at a-textio.ads:190, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__set_line__2__axiom
 use import "_gnatprove_standard".Main

 val set_line__2 #"a-textio.ads" 190 0 0# 
   (to__ : int) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "col" defined at a-textio.ads:192, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__col__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type__axiom
 use        Ada__text_io__positive_count__axiom
 use        Ada__text_io__col

 val col #"a-textio.ads" 192 0 0# 
   (file : Ada__text_io__file_type.file_type) : int
  requires { true }
  ensures { ( (result = (Ada__text_io__col.col file)) /\ (Ada__text_io__positive_count__axiom.dynamic_invariant result True False True) ) }
 
 axiom col__post_axiom :
  (forall file : Ada__text_io__file_type.file_type [(Ada__text_io__col.col file)].
   ( (Ada__text_io__file_type__axiom.dynamic_invariant file True True True) -> (let result = (Ada__text_io__col.col file) in (
    (Ada__text_io__positive_count__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "col__2" defined at a-textio.ads:193, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__col__2__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__positive_count__axiom
 use        Ada__text_io__col__2

 val col__2 #"a-textio.ads" 193 0 0# 
   (__void_param : unit) : int
  requires { true }
  ensures { ( (result = (Ada__text_io__col__2.col__2 ())) /\ (Ada__text_io__positive_count__axiom.dynamic_invariant result True False True) ) }
 
 axiom col__2__post_axiom :
  (forall __void_param : unit [(Ada__text_io__col__2.col__2 __void_param)].
   ( true -> (let result = (Ada__text_io__col__2.col__2 __void_param) in (
    (Ada__text_io__positive_count__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "line" defined at a-textio.ads:195, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type__axiom
 use        Ada__text_io__positive_count__axiom
 use        Ada__text_io__line

 val line #"a-textio.ads" 195 0 0# 
   (file : Ada__text_io__file_type.file_type) : int
  requires { true }
  ensures { ( (result = (Ada__text_io__line.line file)) /\ (Ada__text_io__positive_count__axiom.dynamic_invariant result True False True) ) }
 
 axiom line__post_axiom :
  (forall file : Ada__text_io__file_type.file_type [(Ada__text_io__line.line file)].
   ( (Ada__text_io__file_type__axiom.dynamic_invariant file True True True) -> (let result = (Ada__text_io__line.line file) in (
    (Ada__text_io__positive_count__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "line__2" defined at a-textio.ads:196, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line__2__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__positive_count__axiom
 use        Ada__text_io__line__2

 val line__2 #"a-textio.ads" 196 0 0# 
   (__void_param : unit) : int
  requires { true }
  ensures { ( (result = (Ada__text_io__line__2.line__2 ())) /\ (Ada__text_io__positive_count__axiom.dynamic_invariant result True False True) ) }
 
 axiom line__2__post_axiom :
  (forall __void_param : unit [(Ada__text_io__line__2.line__2 __void_param)].
   ( true -> (let result = (Ada__text_io__line__2.line__2 __void_param) in (
    (Ada__text_io__positive_count__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page" defined at a-textio.ads:198, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type__axiom
 use        Ada__text_io__positive_count__axiom
 use        Ada__text_io__page

 val page #"a-textio.ads" 198 0 0# 
   (file : Ada__text_io__file_type.file_type) : int
  requires { true }
  ensures { ( (result = (Ada__text_io__page.page file)) /\ (Ada__text_io__positive_count__axiom.dynamic_invariant result True False True) ) }
 
 axiom page__post_axiom :
  (forall file : Ada__text_io__file_type.file_type [(Ada__text_io__page.page file)].
   ( (Ada__text_io__file_type__axiom.dynamic_invariant file True True True) -> (let result = (Ada__text_io__page.page file) in (
    (Ada__text_io__positive_count__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page__2" defined at a-textio.ads:199, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page__2__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__positive_count__axiom
 use        Ada__text_io__page__2

 val page__2 #"a-textio.ads" 199 0 0# 
   (__void_param : unit) : int
  requires { true }
  ensures { ( (result = (Ada__text_io__page__2.page__2 ())) /\ (Ada__text_io__positive_count__axiom.dynamic_invariant result True False True) ) }
 
 axiom page__2__post_axiom :
  (forall __void_param : unit [(Ada__text_io__page__2.page__2 __void_param)].
   ( true -> (let result = (Ada__text_io__page__2.page__2 __void_param) in (
    (Ada__text_io__positive_count__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "get" defined at a-textio.ads:205, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get__axiom
 use import "_gnatprove_standard".Main
 use        Standard__character__axiom
 use        Ada__text_io__file_type

 val get #"a-textio.ads" 205 0 0# 
   (file : Ada__text_io__file_type.file_type) (item : int__ref) : unit
  requires { true }
  ensures { (Standard__character__axiom.dynamic_invariant item.int__content True True True) }
  writes {item}

end

(* Module for declaring a program function (and possibly an axiom) for "get__2" defined at a-textio.ads:206, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get__2__axiom
 use import "_gnatprove_standard".Main
 use        Standard__character__axiom

 val get__2 #"a-textio.ads" 206 0 0# 
   (item : int__ref) : unit
  requires { true }
  ensures { (Standard__character__axiom.dynamic_invariant item.int__content True True True) }
  writes {item}

end

(* Module for declaring a program function (and possibly an axiom) for "put" defined at a-textio.ads:207, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put__axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val put #"a-textio.ads" 207 0 0# 
   (file : Ada__text_io__file_type.file_type) (item : int) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "put__2" defined at a-textio.ads:208, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put__2__axiom
 use import "_gnatprove_standard".Main

 val put__2 #"a-textio.ads" 208 0 0# 
   (item : int) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "look_ahead" defined at a-textio.ads:210, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__look_ahead__axiom
 use import "_gnatprove_standard".Main
 use        Standard__character__axiom
 use        Ada__text_io__file_type

 val look_ahead #"a-textio.ads" 210 0 0# 
   (file : Ada__text_io__file_type.file_type) (item : int__ref) (end_of_line : bool__ref) : unit
  requires { true }
  ensures { (Standard__character__axiom.dynamic_invariant item.int__content True True True) }
  writes {item, end_of_line}

end

(* Module for declaring a program function (and possibly an axiom) for "look_ahead__2" defined at a-textio.ads:215, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__look_ahead__2__axiom
 use import "_gnatprove_standard".Main
 use        Standard__character__axiom

 val look_ahead__2 #"a-textio.ads" 215 0 0# 
   (item : int__ref) (end_of_line : bool__ref) : unit
  requires { true }
  ensures { (Standard__character__axiom.dynamic_invariant item.int__content True True True) }
  writes {item, end_of_line}

end

(* Module for declaring a program function (and possibly an axiom) for "get_immediate" defined at a-textio.ads:219, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get_immediate__axiom
 use import "_gnatprove_standard".Main
 use        Standard__character__axiom
 use        Ada__text_io__file_type

 val get_immediate #"a-textio.ads" 219 0 0# 
   (file : Ada__text_io__file_type.file_type) (item : int__ref) : unit
  requires { true }
  ensures { (Standard__character__axiom.dynamic_invariant item.int__content True True True) }
  writes {item}

end

(* Module for declaring a program function (and possibly an axiom) for "get_immediate__2" defined at a-textio.ads:223, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get_immediate__2__axiom
 use import "_gnatprove_standard".Main
 use        Standard__character__axiom

 val get_immediate__2 #"a-textio.ads" 223 0 0# 
   (item : int__ref) : unit
  requires { true }
  ensures { (Standard__character__axiom.dynamic_invariant item.int__content True True True) }
  writes {item}

end

(* Module for declaring a program function (and possibly an axiom) for "get_immediate__3" defined at a-textio.ads:226, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get_immediate__3__axiom
 use import "_gnatprove_standard".Main
 use        Standard__character__axiom
 use        Ada__text_io__file_type

 val get_immediate__3 #"a-textio.ads" 226 0 0# 
   (file : Ada__text_io__file_type.file_type) (item : int__ref) (available : bool__ref) : unit
  requires { true }
  ensures { (Standard__character__axiom.dynamic_invariant item.int__content True True True) }
  writes {item, available}

end

(* Module for declaring a program function (and possibly an axiom) for "get_immediate__4" defined at a-textio.ads:231, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get_immediate__4__axiom
 use import "_gnatprove_standard".Main
 use        Standard__character__axiom

 val get_immediate__4 #"a-textio.ads" 231 0 0# 
   (item : int__ref) (available : bool__ref) : unit
  requires { true }
  ensures { (Standard__character__axiom.dynamic_invariant item.int__content True True True) }
  writes {item, available}

end

(* Module for declaring a program function (and possibly an axiom) for "get__3" defined at a-textio.ads:239, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get__3__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive
 use        Ada__text_io__file_type
 use        Array__Int__Standard__character

 val get__3 #"a-textio.ads" 239 0 0# 
   (file : Ada__text_io__file_type.file_type) (item : Array__Int__Standard__character.map__ref) (item__first : int) (item__last : int) : unit
  requires { true }
  ensures { (if (True) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last item__first item__last))) }
  writes {item}

end

(* Module for declaring a program function (and possibly an axiom) for "get__4" defined at a-textio.ads:240, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get__4__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive
 use        Array__Int__Standard__character

 val get__4 #"a-textio.ads" 240 0 0# 
   (item : Array__Int__Standard__character.map__ref) (item__first : int) (item__last : int) : unit
  requires { true }
  ensures { (if (True) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last item__first item__last))) }
  writes {item}

end

(* Module for declaring a program function (and possibly an axiom) for "put__3" defined at a-textio.ads:241, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put__3__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Ada__text_io__file_type

 val put__3 #"a-textio.ads" 241 0 0# 
   (file : Ada__text_io__file_type.file_type) (item : Standard__string.string) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "put__4" defined at a-textio.ads:242, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put__4__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string

 val put__4 #"a-textio.ads" 242 0 0# 
   (item : Standard__string.string) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "get_line" defined at a-textio.ads:244, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get_line__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__natural__axiom
 use        Standard__positive
 use        Ada__text_io__file_type
 use        Array__Int__Standard__character

 val get_line #"a-textio.ads" 244 0 0# 
   (file : Ada__text_io__file_type.file_type) (item : Array__Int__Standard__character.map__ref) (item__first : int) (item__last : int) (last : int__ref) : unit
  requires { true }
  ensures { ( (if (True) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last item__first item__last))) /\ (Standard__natural__axiom.dynamic_invariant last.int__content True True True) ) }
  writes {item, last}

end

(* Module for declaring a program function (and possibly an axiom) for "get_line__2" defined at a-textio.ads:249, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get_line__2__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__natural__axiom
 use        Standard__positive
 use        Array__Int__Standard__character

 val get_line__2 #"a-textio.ads" 249 0 0# 
   (item : Array__Int__Standard__character.map__ref) (item__first : int) (item__last : int) (last : int__ref) : unit
  requires { true }
  ensures { ( (if (True) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last item__first item__last))) /\ (Standard__natural__axiom.dynamic_invariant last.int__content True True True) ) }
  writes {item, last}

end

(* Module for declaring a program function (and possibly an axiom) for "get_line__3" defined at a-textio.ads:253, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get_line__3__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string__axiom
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type__axiom
 use        Ada__text_io__get_line__3

 val get_line__3 #"a-textio.ads" 253 0 0# 
   (file : Ada__text_io__file_type.file_type) : Standard__string.string
  requires { true }
  ensures { ( (result = (Ada__text_io__get_line__3.get_line__3 file)) /\ (Standard__string__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_line__3__post_axiom :
  (forall file : Ada__text_io__file_type.file_type [(Ada__text_io__get_line__3.get_line__3 file)].
   ( (Ada__text_io__file_type__axiom.dynamic_invariant file True True True) -> (let result = (Ada__text_io__get_line__3.get_line__3 file) in (
    (Standard__string__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "get_line__4" defined at a-textio.ads:256, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get_line__4__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string__axiom
 use        Ada__text_io__get_line__4

 val get_line__4 #"a-textio.ads" 256 0 0# 
   (__void_param : unit) : Standard__string.string
  requires { true }
  ensures { ( (result = (Ada__text_io__get_line__4.get_line__4 ())) /\ (Standard__string__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_line__4__post_axiom :
  (forall __void_param : unit [(Ada__text_io__get_line__4.get_line__4 __void_param)].
   ( true -> (let result = (Ada__text_io__get_line__4.get_line__4 __void_param) in (
    (Standard__string__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "put_line" defined at a-textio.ads:259, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put_line__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Ada__text_io__file_type

 val put_line #"a-textio.ads" 259 0 0# 
   (file : Ada__text_io__file_type.file_type) (item : Standard__string.string) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "put_line__2" defined at a-textio.ads:263, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put_line__2__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string

 val put_line__2 #"a-textio.ads" 263 0 0# 
   (item : Standard__string.string) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "eof_char" defined at a-textio.ads:460, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__eof_char__axiom
 use import "_gnatprove_standard".Main
 use        Standard__integer__axiom
 use        Ada__text_io__eof_char

 val eof_char #"a-textio.ads" 460 0 0# 
   (__void_param : unit) : int
  requires { true }
  ensures { ( (result = (Ada__text_io__eof_char.eof_char ())) /\ (Standard__integer__axiom.dynamic_invariant result True False True) ) }
 
 axiom eof_char__post_axiom :
  (forall __void_param : unit [(Ada__text_io__eof_char.eof_char __void_param)].
   ( true -> (let result = (Ada__text_io__eof_char.eof_char __void_param) in (
    (Standard__integer__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "initialize_standard_files" defined at a-textio.ads:466, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__initialize_standard_files__axiom
 use import "_gnatprove_standard".Main

 val initialize_standard_files #"a-textio.ads" 466 0 0# 
   (__void_param : unit) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "main" defined at main.adb:6, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__axiom
 use        Cash_register__cashregister
 use        Cash_register__cashregister
 use import "_gnatprove_standard".Main
 use        Cash_register__cash_register
 use        Cash_register__cash_register__axiom
 use        Cash_register__cashregister

 val main #"main.adb" 6 0 0# 
   (__void_param : unit) : unit
  requires { true }
  ensures { (Cash_register__cash_register__axiom.dynamic_invariant { Cash_register__cash_register.__split_fields = Cash_register__cashregister.cashregister__split_fields.Cash_register__cash_register.__split_fields__content } True True True) }
  reads {Cash_register__cashregister.cashregister__split_fields}
  writes {Cash_register__cashregister.cashregister__split_fields}

end
