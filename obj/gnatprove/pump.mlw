(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -128 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  127
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type short_short_integer__ref #"system.ads" 1 0 0# =
  { mutable short_short_integer__content "model_trace:" : short_short_integer }
 
 function short_short_integer__ref___projection #"system.ads" 1 0 0# 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc #"system.ads" 1 0 0# 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -32768 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  32767
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type short_integer__ref #"system.ads" 1 0 0# =
  { mutable short_integer__content "model_trace:" : short_integer }
 
 function short_integer__ref___projection #"system.ads" 1 0 0# 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc #"system.ads" 1 0 0# 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type integer__ref #"system.ads" 1 0 0# =
  { mutable integer__content "model_trace:" : integer }
 
 function integer__ref___projection #"system.ads" 1 0 0# 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc #"system.ads" 1 0 0# 
   (x : integer__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type long_integer__ref #"system.ads" 1 0 0# =
  { mutable long_integer__content "model_trace:" : long_integer }
 
 function long_integer__ref___projection #"system.ads" 1 0 0# 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc #"system.ads" 1 0 0# 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type long_long_integer__ref #"system.ads" 1 0 0# =
  { mutable long_long_integer__content "model_trace:" : long_long_integer }
 
 function long_long_integer__ref___projection #"system.ads" 1 0 0# 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc #"system.ads" 1 0 0# 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type natural__ref #"system.ads" 1 0 0# =
  { mutable natural__content "model_trace:" : natural }
 
 function natural__ref___projection #"system.ads" 1 0 0# 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc #"system.ads" 1 0 0# 
   (x : natural__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type positive__ref #"system.ads" 1 0 0# =
  { mutable positive__content "model_trace:" : positive }
 
 function positive__ref___projection #"system.ads" 1 0 0# 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc #"system.ads" 1 0 0# 
   (x : positive__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type short_float #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : real =
  (-.340282346638528859811704183484516925440.0)
 
 function last #"system.ads" 1 0 0# 
   : real =
  (340282346638528859811704183484516925440.0)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = short_float, 
 function round_real_tmp = Floating.round_single, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type short_float__ref #"system.ads" 1 0 0# =
  { mutable short_float__content "model_trace:" : short_float }
 
 function short_float__ref___projection #"system.ads" 1 0 0# 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc #"system.ads" 1 0 0# 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type float #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : real =
  (-.340282346638528859811704183484516925440.0)
 
 function last #"system.ads" 1 0 0# 
   : real =
  (340282346638528859811704183484516925440.0)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = float, 
 function round_real_tmp = Floating.round_single, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type float__ref #"system.ads" 1 0 0# =
  { mutable float__content "model_trace:" : float }
 
 function float__ref___projection #"system.ads" 1 0 0# 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc #"system.ads" 1 0 0# 
   (x : float__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type long_float #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : real =
  (-.179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0)
 
 function last #"system.ads" 1 0 0# 
   : real =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = long_float, 
 function round_real_tmp = Floating.round_double, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type long_float__ref #"system.ads" 1 0 0# =
  { mutable long_float__content "model_trace:" : long_float }
 
 function long_float__ref___projection #"system.ads" 1 0 0# 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc #"system.ads" 1 0 0# 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "long_long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_float
 use import "_gnatprove_standard".Main
 use import "real".RealInfix

 type long_long_float #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : real =
  (-.1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 function last #"system.ads" 1 0 0# 
   : real =
  (1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = long_long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type long_long_float__ref #"system.ads" 1 0 0# =
  { mutable long_long_float__content "model_trace:" : long_long_float }
 
 function long_long_float__ref___projection #"system.ads" 1 0 0# 
   (a : long_long_float__ref) : long_long_float =
  a.long_long_float__content
 
 meta "model_projection" function long_long_float__ref___projection
 
 meta "inline : no" function long_long_float__ref___projection
 
 val long_long_float__havoc #"system.ads" 1 0 0# 
   (x : long_long_float__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  255
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type character__ref #"system.ads" 1 0 0# =
  { mutable character__content "model_trace:" : character }
 
 function character__ref___projection #"system.ads" 1 0 0# 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc #"system.ads" 1 0 0# 
   (x : character__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  65535
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type wide_character__ref #"system.ads" 1 0 0# =
  { mutable wide_character__content "model_trace:" : wide_character }
 
 function wide_character__ref___projection #"system.ads" 1 0 0# 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc #"system.ads" 1 0 0# 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type wide_wide_character__ref #"system.ads" 1 0 0# =
  { mutable wide_wide_character__content "model_trace:" : wide_wide_character }
 
 function wide_wide_character__ref___projection #"system.ads" 1 0 0# 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc #"system.ads" 1 0 0# 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 function index_I1_one #"system.ads" 1 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__character.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string #"system.ads" 1 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string #"system.ads" 1 0 0# 
   (x : Main.__image) : string
 
 function from_string #"system.ads" 1 0 0# 
   (x : string) : Main.__image
 
 type string__ref #"system.ads" 1 0 0# =
  { mutable string__content "model_trace:" : string }
 
 function string__ref___projection #"system.ads" 1 0 0# 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc #"system.ads" 1 0 0# 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 function index_I1_one #"system.ads" 1 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 1 0 0# =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__wide_character.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Array__Int__Standard__wide_character

 type component_type #"system.ads" 1 0 0# =
  Standard__wide_character.wide_character
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string #"system.ads" 1 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref #"system.ads" 1 0 0# =
  { mutable wide_string__content "model_trace:" : wide_string }
 
 function wide_string__ref___projection #"system.ads" 1 0 0# 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc #"system.ads" 1 0 0# 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 function index_I1_one #"system.ads" 1 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 1 0 0# =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__wide_wide_character.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Array__Int__Standard__wide_wide_character

 type component_type #"system.ads" 1 0 0# =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string #"system.ads" 1 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref #"system.ads" 1 0 0# =
  { mutable wide_wide_string__content "model_trace:" : wide_wide_string }
 
 function wide_wide_string__ref___projection #"system.ads" 1 0 0# 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc #"system.ads" 1 0 0# 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration #"system.ads" 1 0 0# 
 
 function inv_small #"system.ads" 1 0 0# 
   : Main.__fixed =
  1000000000
 
 function first #"system.ads" 1 0 0# 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function inv_small = inv_small
 
 type duration__ref #"system.ads" 1 0 0# =
  { mutable duration__content "model_trace:" : duration }
 
 function duration__ref___projection #"system.ads" 1 0 0# 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc #"system.ads" 1 0 0# 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -128 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  127
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type integer_8__ref #"system.ads" 1 0 0# =
  { mutable integer_8__content "model_trace:" : integer_8 }
 
 function integer_8__ref___projection #"system.ads" 1 0 0# 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc #"system.ads" 1 0 0# 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -32768 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  32767
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type integer_16__ref #"system.ads" 1 0 0# =
  { mutable integer_16__content "model_trace:" : integer_16 }
 
 function integer_16__ref___projection #"system.ads" 1 0 0# 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc #"system.ads" 1 0 0# 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type integer_32__ref #"system.ads" 1 0 0# =
  { mutable integer_32__content "model_trace:" : integer_32 }
 
 function integer_32__ref___projection #"system.ads" 1 0 0# 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc #"system.ads" 1 0 0# 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type integer_64__ref #"system.ads" 1 0 0# =
  { mutable integer_64__content "model_trace:" : integer_64 }
 
 function integer_64__ref___projection #"system.ads" 1 0 0# 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc #"system.ads" 1 0 0# 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type universal_integer__ref #"system.ads" 1 0 0# =
  { mutable universal_integer__content "model_trace:" : universal_integer }
 
 function universal_integer__ref___projection #"system.ads" 1 0 0# 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc #"system.ads" 1 0 0# 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "universal_real", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_real
 use import "_gnatprove_standard".Main
 use import "real".RealInfix

 type universal_real #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : real =
  (-.1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 function last #"system.ads" 1 0 0# 
   : real =
  (1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = universal_real, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type universal_real__ref #"system.ads" 1 0 0# =
  { mutable universal_real__content "model_trace:" : universal_real }
 
 function universal_real__ref___projection #"system.ads" 1 0 0# 
   (a : universal_real__ref) : universal_real =
  a.universal_real__content
 
 meta "model_projection" function universal_real__ref___projection
 
 meta "inline : no" function universal_real__ref___projection
 
 val universal_real__havoc #"system.ads" 1 0 0# 
   (x : universal_real__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Treservoir_numB" defined at pump.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Pump__Treservoir_numB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type treservoir_numB #"pump.ads" 5 0 0# 
 
 function first #"pump.ads" 5 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"pump.ads" 5 0 0# 
   : int =
  2147483647
 
 predicate in_range #"pump.ads" 5 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = treservoir_numB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type treservoir_numB__ref #"pump.ads" 5 0 0# =
  { mutable treservoir_numB__content "model_trace:" : treservoir_numB }
 
 function treservoir_numB__ref___projection #"pump.ads" 5 0 0# 
   (a : treservoir_numB__ref) : treservoir_numB =
  a.treservoir_numB__content
 
 meta "model_projection" function treservoir_numB__ref___projection
 
 meta "inline : no" function treservoir_numB__ref___projection
 
 val treservoir_numB__havoc #"pump.ads" 5 0 0# 
   (x : treservoir_numB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "reservoir_num" defined at pump.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Pump__reservoir_num
 use import "_gnatprove_standard".Main
 use import "int".Int

 type reservoir_num #"pump.ads" 5 0 0# 
 
 function first #"pump.ads" 5 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"pump.ads" 5 0 0# 
   : int =
  2147483647
 
 predicate in_range #"pump.ads" 5 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = reservoir_num, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type reservoir_num__ref #"pump.ads" 5 0 0# =
  { mutable reservoir_num__content "model_trace:" : reservoir_num }
 
 function reservoir_num__ref___projection #"pump.ads" 5 0 0# 
   (a : reservoir_num__ref) : reservoir_num =
  a.reservoir_num__content
 
 meta "model_projection" function reservoir_num__ref___projection
 
 meta "inline : no" function reservoir_num__ref___projection
 
 val reservoir_num__havoc #"pump.ads" 5 0 0# 
   (x : reservoir_num__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Tfloat_numberB" defined at pump.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Pump__Tfloat_numberB
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type tfloat_numberB #"pump.ads" 6 0 0# 
 
 function first #"pump.ads" 6 0 0# 
   : real =
  (-.340282346638528859811704183484516925440.0)
 
 function last #"pump.ads" 6 0 0# 
   : real =
  (340282346638528859811704183484516925440.0)
 
 predicate in_range #"pump.ads" 6 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = tfloat_numberB, 
 function round_real_tmp = Floating.round_single, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type tfloat_numberB__ref #"pump.ads" 6 0 0# =
  { mutable tfloat_numberB__content "model_trace:" : tfloat_numberB }
 
 function tfloat_numberB__ref___projection #"pump.ads" 6 0 0# 
   (a : tfloat_numberB__ref) : tfloat_numberB =
  a.tfloat_numberB__content
 
 meta "model_projection" function tfloat_numberB__ref___projection
 
 meta "inline : no" function tfloat_numberB__ref___projection
 
 val tfloat_numberB__havoc #"pump.ads" 6 0 0# 
   (x : tfloat_numberB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "float_number" defined at pump.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Pump__float_number
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type float_number #"pump.ads" 6 0 0# 
 
 function first #"pump.ads" 6 0 0# 
   : real =
  (0.0)
 
 function last #"pump.ads" 6 0 0# 
   : real =
  (100000004091847875962975319375216640.0)
 
 predicate in_range #"pump.ads" 6 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = float_number, 
 function round_real_tmp = Floating.round_single, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type float_number__ref #"pump.ads" 6 0 0# =
  { mutable float_number__content "model_trace:" : float_number }
 
 function float_number__ref___projection #"pump.ads" 6 0 0# 
   (a : float_number__ref) : float_number =
  a.float_number__content
 
 meta "model_projection" function float_number__ref___projection
 
 meta "inline : no" function float_number__ref___projection
 
 val float_number__havoc #"pump.ads" 6 0 0# 
   (x : float_number__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "fuel_types" defined at pump.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Pump__fuel_types
 use import "_gnatprove_standard".Main
 use import "int".Int

 type fuel_types #"pump.ads" 7 0 0# 
 
 function first #"pump.ads" 7 0 0# 
   : int =
  0
 
 function last #"pump.ads" 7 0 0# 
   : int =
  3
 
 predicate in_range #"pump.ads" 7 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = fuel_types, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type fuel_types__ref #"pump.ads" 7 0 0# =
  { mutable fuel_types__content "model_trace:" : fuel_types }
 
 function fuel_types__ref___projection #"pump.ads" 7 0 0# 
   (a : fuel_types__ref) : fuel_types =
  a.fuel_types__content
 
 meta "model_projection" function fuel_types__ref___projection
 
 meta "inline : no" function fuel_types__ref___projection
 
 val fuel_types__havoc #"pump.ads" 7 0 0# 
   (x : fuel_types__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "reservoir" defined at pump.ads:37, created in Gnat2Why.Types.Translate_Type *)
module Pump__reservoir
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__float_number
 use        Pump__fuel_types

 type __split_fields #"pump.ads" 7 0 0# =
  { rec__total : Pump__float_number.float_number; rec__reservoir_category "model_trace:.3247" : Pump__fuel_types.fuel_types }
 
 function __split_fields_RESERVOIR_CATEGORY__projection #"pump.ads" 7 0 0# "model_trace:.3247" 
   (a : __split_fields) : Pump__fuel_types.fuel_types =
  a.rec__reservoir_category
 
 meta "model_projection" function __split_fields_RESERVOIR_CATEGORY__projection
 
 meta "inline : no" function __split_fields_RESERVOIR_CATEGORY__projection
 
 type __split_fields__ref #"pump.ads" 37 0 0# =
  { mutable __split_fields__content "model_trace:" : __split_fields }
 
 function __split_fields__ref___projection #"pump.ads" 37 0 0# 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___projection
 
 meta "inline : no" function __split_fields__ref___projection
 
 val __split_fields__havoc #"pump.ads" 37 0 0# 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type reservoir #"pump.ads" 37 0 0# =
  { __split_fields "model_trace:" : __split_fields }
 
 function reservoir___projection #"pump.ads" 37 0 0# 
   (a : reservoir) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function reservoir___projection
 
 meta "inline : no" function reservoir___projection
 
 predicate total__pred #"pump.ads" 37 0 0# 
   (a : reservoir)  =
  true
 
 val rec__total_ #"pump.ads" 37 0 0# 
   (a : reservoir) : Pump__float_number.float_number
  requires { (total__pred a) }
  ensures { (result = a.__split_fields.rec__total) }
 
 predicate reservoir_category__pred #"pump.ads" 37 0 0# 
   (a : reservoir)  =
  true
 
 val rec__reservoir_category_ #"pump.ads" 37 0 0# 
   (a : reservoir) : Pump__fuel_types.fuel_types
  requires { (reservoir_category__pred a) }
  ensures { (result = a.__split_fields.rec__reservoir_category) }
 
 function bool_eq #"pump.ads" 37 0 0# 
   (a : reservoir) (b : reservoir) : bool =
  (if (( ((Pump__float_number.to_real a.__split_fields.rec__total) = (Pump__float_number.to_real b.__split_fields.rec__total)) /\ ((Pump__fuel_types.to_rep a.__split_fields.rec__reservoir_category) = (Pump__fuel_types.to_rep b.__split_fields.rec__reservoir_category)) )) then (
   True) else (
   False))
 
 function user_eq #"pump.ads" 37 0 0# 
   (a : reservoir) (b : reservoir) : bool
 
 function value__size #"pump.ads" 37 0 0# 
   : int
 
 function object__size #"pump.ads" 37 0 0# 
   (a : reservoir) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a : reservoir.
   ((object__size a) >= 0))
 
 function dummy #"pump.ads" 37 0 0# 
   : reservoir
 
 type reservoir__ref #"pump.ads" 37 0 0# =
  { mutable reservoir__content "model_trace:" : reservoir }
 
 function reservoir__ref___projection #"pump.ads" 37 0 0# 
   (a : reservoir__ref) : reservoir =
  a.reservoir__content
 
 meta "model_projection" function reservoir__ref___projection
 
 meta "inline : no" function reservoir__ref___projection
 
 val reservoir__havoc #"pump.ads" 37 0 0# 
   (x : reservoir__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "state_type" defined at pump.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Pump__state_type
 use import "_gnatprove_standard".Main
 use import "int".Int

 type state_type #"pump.ads" 10 0 0# 
 
 function first #"pump.ads" 10 0 0# 
   : int =
  0
 
 function last #"pump.ads" 10 0 0# 
   : int =
  3
 
 predicate in_range #"pump.ads" 10 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = state_type, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type state_type__ref #"pump.ads" 10 0 0# =
  { mutable state_type__content "model_trace:" : state_type }
 
 function state_type__ref___projection #"pump.ads" 10 0 0# 
   (a : state_type__ref) : state_type =
  a.state_type__content
 
 meta "model_projection" function state_type__ref___projection
 
 meta "inline : no" function state_type__ref___projection
 
 val state_type__havoc #"pump.ads" 10 0 0# 
   (x : state_type__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "nozzle_type" defined at pump.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pump__nozzle_type
 use import "_gnatprove_standard".Main
 use import "int".Int

 type nozzle_type #"pump.ads" 11 0 0# 
 
 function first #"pump.ads" 11 0 0# 
   : int =
  0
 
 function last #"pump.ads" 11 0 0# 
   : int =
  5
 
 predicate in_range #"pump.ads" 11 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = nozzle_type, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type nozzle_type__ref #"pump.ads" 11 0 0# =
  { mutable nozzle_type__content "model_trace:" : nozzle_type }
 
 function nozzle_type__ref___projection #"pump.ads" 11 0 0# 
   (a : nozzle_type__ref) : nozzle_type =
  a.nozzle_type__content
 
 meta "model_projection" function nozzle_type__ref___projection
 
 meta "inline : no" function nozzle_type__ref___projection
 
 val nozzle_type__havoc #"pump.ads" 11 0 0# 
   (x : nozzle_type__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "pump" defined at pump.ads:44, created in Gnat2Why.Types.Translate_Type *)
module Pump__pump
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__float_number
 use        Pump__fuel_types
 use        Pump__reservoir
 use        Pump__state_type
 use        Pump__nozzle_type

 type __split_fields #"pump.ads" 11 0 0# =
  { rec__reservoir_info "model_trace:.3269" : Pump__reservoir.reservoir; rec__pump_state "model_trace:.3289" : Pump__state_type.state_type; rec__pumped : Pump__float_number.float_number; rec__nozzle_state "model_trace:.3314" : Pump__nozzle_type.nozzle_type; rec__unit_price : Pump__float_number.float_number; rec__fuel_type "model_trace:.3339" : Pump__fuel_types.fuel_types }
 
 function __split_fields_RESERVOIR_INFO__projection #"pump.ads" 7 0 0# "model_trace:.3269" 
   (a : __split_fields) : Pump__reservoir.reservoir =
  a.rec__reservoir_info
 
 meta "model_projection" function __split_fields_RESERVOIR_INFO__projection
 
 meta "inline : no" function __split_fields_RESERVOIR_INFO__projection
 
 function __split_fields_PUMP_STATE__projection #"pump.ads" 44 0 0# "model_trace:.3289" 
   (a : __split_fields) : Pump__state_type.state_type =
  a.rec__pump_state
 
 meta "model_projection" function __split_fields_PUMP_STATE__projection
 
 meta "inline : no" function __split_fields_PUMP_STATE__projection
 
 function __split_fields_NOZZLE_STATE__projection #"pump.ads" 44 0 0# "model_trace:.3314" 
   (a : __split_fields) : Pump__nozzle_type.nozzle_type =
  a.rec__nozzle_state
 
 meta "model_projection" function __split_fields_NOZZLE_STATE__projection
 
 meta "inline : no" function __split_fields_NOZZLE_STATE__projection
 
 function __split_fields_FUEL_TYPE__projection #"pump.ads" 44 0 0# "model_trace:.3339" 
   (a : __split_fields) : Pump__fuel_types.fuel_types =
  a.rec__fuel_type
 
 meta "model_projection" function __split_fields_FUEL_TYPE__projection
 
 meta "inline : no" function __split_fields_FUEL_TYPE__projection
 
 type __split_fields__ref #"pump.ads" 44 0 0# =
  { mutable __split_fields__content "model_trace:" : __split_fields }
 
 function __split_fields__ref_2__projection #"pump.ads" 44 0 0# 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref_2__projection
 
 meta "inline : no" function __split_fields__ref_2__projection
 
 val __split_fields__havoc #"pump.ads" 44 0 0# 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type pump #"pump.ads" 44 0 0# =
  { __split_fields "model_trace:" : __split_fields }
 
 function pump___projection #"pump.ads" 44 0 0# 
   (a : pump) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function pump___projection
 
 meta "inline : no" function pump___projection
 
 predicate reservoir_info__pred #"pump.ads" 44 0 0# 
   (a : pump)  =
  true
 
 val rec__reservoir_info_ #"pump.ads" 44 0 0# 
   (a : pump) : Pump__reservoir.reservoir
  requires { (reservoir_info__pred a) }
  ensures { (result = a.__split_fields.rec__reservoir_info) }
 
 predicate pump_state__pred #"pump.ads" 44 0 0# 
   (a : pump)  =
  true
 
 val rec__pump_state_ #"pump.ads" 44 0 0# 
   (a : pump) : Pump__state_type.state_type
  requires { (pump_state__pred a) }
  ensures { (result = a.__split_fields.rec__pump_state) }
 
 predicate pumped__pred #"pump.ads" 44 0 0# 
   (a : pump)  =
  true
 
 val rec__pumped_ #"pump.ads" 44 0 0# 
   (a : pump) : Pump__float_number.float_number
  requires { (pumped__pred a) }
  ensures { (result = a.__split_fields.rec__pumped) }
 
 predicate nozzle_state__pred #"pump.ads" 44 0 0# 
   (a : pump)  =
  true
 
 val rec__nozzle_state_ #"pump.ads" 44 0 0# 
   (a : pump) : Pump__nozzle_type.nozzle_type
  requires { (nozzle_state__pred a) }
  ensures { (result = a.__split_fields.rec__nozzle_state) }
 
 predicate unit_price__pred #"pump.ads" 44 0 0# 
   (a : pump)  =
  true
 
 val rec__unit_price_ #"pump.ads" 44 0 0# 
   (a : pump) : Pump__float_number.float_number
  requires { (unit_price__pred a) }
  ensures { (result = a.__split_fields.rec__unit_price) }
 
 predicate fuel_type__pred #"pump.ads" 44 0 0# 
   (a : pump)  =
  true
 
 val rec__fuel_type_ #"pump.ads" 44 0 0# 
   (a : pump) : Pump__fuel_types.fuel_types
  requires { (fuel_type__pred a) }
  ensures { (result = a.__split_fields.rec__fuel_type) }
 
 function bool_eq #"pump.ads" 44 0 0# 
   (a : pump) (b : pump) : bool =
  (if (( ( ( ( ( ((Pump__reservoir.bool_eq a.__split_fields.rec__reservoir_info b.__split_fields.rec__reservoir_info) = True) /\ ((Pump__state_type.to_rep a.__split_fields.rec__pump_state) = (Pump__state_type.to_rep b.__split_fields.rec__pump_state)) ) /\ ((Pump__float_number.to_real a.__split_fields.rec__pumped) = (Pump__float_number.to_real b.__split_fields.rec__pumped)) ) /\ ((Pump__nozzle_type.to_rep a.__split_fields.rec__nozzle_state) = (Pump__nozzle_type.to_rep b.__split_fields.rec__nozzle_state)) ) /\ ((Pump__float_number.to_real a.__split_fields.rec__unit_price) = (Pump__float_number.to_real b.__split_fields.rec__unit_price)) ) /\ ((Pump__fuel_types.to_rep a.__split_fields.rec__fuel_type) = (Pump__fuel_types.to_rep b.__split_fields.rec__fuel_type)) )) then (
   True) else (
   False))
 
 function user_eq #"pump.ads" 44 0 0# 
   (a : pump) (b : pump) : bool
 
 function value__size #"pump.ads" 44 0 0# 
   : int
 
 function object__size #"pump.ads" 44 0 0# 
   (a : pump) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a : pump.
   ((object__size a) >= 0))
 
 function dummy #"pump.ads" 44 0 0# 
   : pump
 
 type pump__ref #"pump.ads" 44 0 0# =
  { mutable pump__content "model_trace:" : pump }
 
 function pump__ref___projection #"pump.ads" 44 0 0# 
   (a : pump__ref) : pump =
  a.pump__content
 
 meta "model_projection" function pump__ref___projection
 
 meta "inline : no" function pump__ref___projection
 
 val pump__havoc #"pump.ads" 44 0 0# 
   (x : pump__ref) : unit
  writes {x}

end

(* Module for defining the constant "price" defined at pump.ads:14, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__set_fuel_price__price
 use import "_gnatprove_standard".Main
 use        Pump__float_number

 function price #"pump.ads" 14 0 0# 
   : Pump__float_number.float_number
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 6 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "price" defined at pump.ads:14, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__set_fuel_price__price__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "statetype" defined at pump.ads:15, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__set_pump_state__statetype
 use import "_gnatprove_standard".Main

 function statetype #"pump.ads" 15 0 0# "model" "model_trace:2970" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 10 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "statetype" defined at pump.ads:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__set_pump_state__statetype__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at pump.ads:16, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__set_pumped__amount
 use import "_gnatprove_standard".Main
 use        Pump__float_number

 function amount #"pump.ads" 16 0 0# 
   : Pump__float_number.float_number
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 6 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at pump.ads:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__set_pumped__amount__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "nozzletype" defined at pump.ads:17, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__set_pump_nozzle_state__nozzletype
 use import "_gnatprove_standard".Main

 function nozzletype #"pump.ads" 17 0 0# "model" "model_trace:3024" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 11 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "nozzletype" defined at pump.ads:17, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__set_pump_nozzle_state__nozzletype__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "fueltype" defined at pump.ads:19, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__append_reservoir__fueltype
 use import "_gnatprove_standard".Main

 function fueltype #"pump.ads" 19 0 0# "model" "model_trace:3051" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 7 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "fueltype" defined at pump.ads:19, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__append_reservoir__fueltype__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "size" defined at pump.ads:21, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__set_reservoir_size__size
 use import "_gnatprove_standard".Main
 use        Pump__float_number

 function size #"pump.ads" 21 0 0# 
   : Pump__float_number.float_number
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 6 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "size" defined at pump.ads:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__set_reservoir_size__size__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at pump.ads:23, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__remove_petrol_reservoir__amount
 use import "_gnatprove_standard".Main
 use        Pump__float_number

 function amount #"pump.ads" 23 0 0# 
   : Pump__float_number.float_number
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 6 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at pump.ads:23, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__remove_petrol_reservoir__amount__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "pump_r" defined at pump.ads:32, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__get_tanks_size__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 function pump_r #"pump.ads" 32 0 0# 
   : Pump__pump.pump
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:32, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__get_tanks_size__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_tanks_size" defined at pump.ads:32, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__get_tanks_size
 use import "_gnatprove_standard".Main
 use        Pump__float_number
 use        Pump__pump

 function get_tanks_size #"pump.ads" 32 0 0# 
   (pump_r : Pump__pump.pump) : Pump__float_number.float_number

end

(* Module for defining the constant "pump_r" defined at pump.ads:29, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__get_state__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 function pump_r #"pump.ads" 29 0 0# 
   : Pump__pump.pump
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__get_state__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_state" defined at pump.ads:29, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__get_state
 use import "_gnatprove_standard".Main
 use        Pump__pump

 function get_state #"pump.ads" 29 0 0# 
   (pump_r : Pump__pump.pump) : int

end

(* Module for defining the constant "pump_r" defined at pump.ads:30, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__get_current_nozzle_state__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 function pump_r #"pump.ads" 30 0 0# 
   : Pump__pump.pump
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__get_current_nozzle_state__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_current_nozzle_state" defined at pump.ads:30, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__get_current_nozzle_state
 use import "_gnatprove_standard".Main
 use        Pump__pump

 function get_current_nozzle_state #"pump.ads" 30 0 0# 
   (pump_r : Pump__pump.pump) : int

end

(* Module for defining the constant "pump_r" defined at pump.ads:31, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__get_unit_price__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 function pump_r #"pump.ads" 31 0 0# 
   : Pump__pump.pump
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:31, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__get_unit_price__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_unit_price" defined at pump.ads:31, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__get_unit_price
 use import "_gnatprove_standard".Main
 use        Pump__float_number
 use        Pump__pump

 function get_unit_price #"pump.ads" 31 0 0# 
   (pump_r : Pump__pump.pump) : Pump__float_number.float_number

end

(* Module for defining the constant "pump_r" defined at pump.ads:33, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__get_resevoir_category__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 function pump_r #"pump.ads" 33 0 0# 
   : Pump__pump.pump
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:33, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__get_resevoir_category__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_resevoir_category" defined at pump.ads:33, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__get_resevoir_category
 use import "_gnatprove_standard".Main
 use        Pump__pump

 function get_resevoir_category #"pump.ads" 33 0 0# 
   (pump_r : Pump__pump.pump) : int

end

(* Module for defining the constant "s" defined at sprint.ads:3, created in Gnat2Why.Decls.Translate_Constant *)
module Sprint__print__s
 use import "_gnatprove_standard".Main
 use        Standard__string

 function s #"sprint.ads" 3 0 0# "model_projected" "model_trace:3379" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s" defined at sprint.ads:3, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sprint__print__s__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s1" defined at sprint.ads:4, created in Gnat2Why.Decls.Translate_Constant *)
module Sprint__print_float_type__s1
 use import "_gnatprove_standard".Main
 use        Standard__string

 function s1 #"sprint.ads" 4 0 0# "model_projected" "model_trace:3397" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s1" defined at sprint.ads:4, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sprint__print_float_type__s1__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s2" defined at sprint.ads:4, created in Gnat2Why.Decls.Translate_Constant *)
module Sprint__print_float_type__s2
 use import "_gnatprove_standard".Main
 use        Pump__float_number

 function s2 #"sprint.ads" 4 0 0# 
   : Pump__float_number.float_number
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 6 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s2" defined at sprint.ads:4, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sprint__print_float_type__s2__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s1" defined at sprint.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Sprint__print_state_type__s1
 use import "_gnatprove_standard".Main
 use        Standard__string

 function s1 #"sprint.ads" 5 0 0# "model_projected" "model_trace:3426" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s1" defined at sprint.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sprint__print_state_type__s1__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s2" defined at sprint.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Sprint__print_state_type__s2
 use import "_gnatprove_standard".Main

 function s2 #"sprint.ads" 5 0 0# "model" "model_trace:3435" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 10 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s2" defined at sprint.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sprint__print_state_type__s2__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s1" defined at sprint.ads:6, created in Gnat2Why.Decls.Translate_Constant *)
module Sprint__print_nozzle_type__s1
 use import "_gnatprove_standard".Main
 use        Standard__string

 function s1 #"sprint.ads" 6 0 0# "model_projected" "model_trace:3455" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s1" defined at sprint.ads:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sprint__print_nozzle_type__s1__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s2" defined at sprint.ads:6, created in Gnat2Why.Decls.Translate_Constant *)
module Sprint__print_nozzle_type__s2
 use import "_gnatprove_standard".Main

 function s2 #"sprint.ads" 6 0 0# "model" "model_trace:3464" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 11 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s2" defined at sprint.ads:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sprint__print_nozzle_type__s2__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s1" defined at sprint.ads:7, created in Gnat2Why.Decls.Translate_Constant *)
module Sprint__print_fuel_type__s1
 use import "_gnatprove_standard".Main
 use        Standard__string

 function s1 #"sprint.ads" 7 0 0# "model_projected" "model_trace:3484" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s1" defined at sprint.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sprint__print_fuel_type__s1__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s2" defined at sprint.ads:7, created in Gnat2Why.Decls.Translate_Constant *)
module Sprint__print_fuel_type__s2
 use import "_gnatprove_standard".Main

 function s2 #"sprint.ads" 7 0 0# "model" "model_trace:3493" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 7 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s2" defined at sprint.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sprint__print_fuel_type__s2__axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "name" defined at system.ads:46, created in Gnat2Why.Types.Translate_Type *)
module System__name
 use import "_gnatprove_standard".Main
 use import "int".Int

 type name #"system.ads" 46 0 0# 
 
 function first #"system.ads" 46 0 0# 
   : int =
  0
 
 function last #"system.ads" 46 0 0# 
   : int =
  0
 
 predicate in_range #"system.ads" 46 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = name, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type name__ref #"system.ads" 46 0 0# =
  { mutable name__content "model_trace:" : name }
 
 function name__ref___projection #"system.ads" 46 0 0# 
   (a : name__ref) : name =
  a.name__content
 
 meta "model_projection" function name__ref___projection
 
 meta "inline : no" function name__ref___projection
 
 val name__havoc #"system.ads" 46 0 0# 
   (x : name__ref) : unit
  writes {x}

end

(* Module for defining the constant "system_name" defined at system.ads:47, created in Gnat2Why.Decls.Translate_Constant *)
module System__system_name
 use import "_gnatprove_standard".Main

 function system_name #"system.ads" 47 0 0# "model" "model_trace:3758" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 46 0 0# 
   : int

end

(* Module for axiomatizing type "address" defined at system.ads:108, created in Gnat2Why.Types.Translate_Type *)
module System__address
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32

 type address #"system.ads" 108 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"system.ads" 108 0 0# 
   : BV32.t
 
 function first #"system.ads" 108 0 0# 
   : BV32.t =
  ( BV32.of_int 0 )
 
 function last #"system.ads" 108 0 0# 
   : BV32.t =
  ( BV32.of_int 4294967295 )
 
 function first_int #"system.ads" 108 0 0# 
   : int =
  0
 
 function last_int #"system.ads" 108 0 0# 
   : int =
  4294967295
 
 predicate in_range #"system.ads" 108 0 0# 
   (x : BV32.t)  =
  true
 
 predicate in_range_int #"system.ads" 108 0 0# 
   (x : int)  =
  BV32.uint_in_range x
 
 clone export "ada__model".Static_Modular_32 with
 type t = address, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type address__ref #"system.ads" 108 0 0# =
  { mutable address__content "model_trace:" : address }
 
 function address__ref___projection #"system.ads" 108 0 0# 
   (a : address__ref) : address =
  a.address__content
 
 meta "model_projection" function address__ref___projection
 
 meta "inline : no" function address__ref___projection
 
 val address__havoc #"system.ads" 108 0 0# 
   (x : address__ref) : unit
  writes {x}

end

(* Module for defining the constant "null_address" defined at system.ads:69, created in Gnat2Why.Decls.Translate_Constant *)
module System__null_address
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function null_address #"system.ads" 69 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module for defining the constant "left" defined at system.ads:77, created in Gnat2Why.Decls.Translate_Constant *)
module System__Olt__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function left #"system.ads" 77 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:77, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Olt__left__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:77, created in Gnat2Why.Decls.Translate_Constant *)
module System__Olt__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function right #"system.ads" 77 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:77, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Olt__right__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Olt" defined at system.ads:77, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Olt
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function olt #"system.ads" 77 0 0# 
   (left : BV32.t) (right : BV32.t) : bool

end

(* Module for defining the constant "left" defined at system.ads:78, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ole__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function left #"system.ads" 78 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:78, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ole__left__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:78, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ole__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function right #"system.ads" 78 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:78, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ole__right__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Ole" defined at system.ads:78, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Ole
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function ole #"system.ads" 78 0 0# 
   (left : BV32.t) (right : BV32.t) : bool

end

(* Module for defining the constant "left" defined at system.ads:79, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ogt__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function left #"system.ads" 79 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:79, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ogt__left__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:79, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ogt__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function right #"system.ads" 79 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:79, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ogt__right__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Ogt" defined at system.ads:79, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Ogt
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function ogt #"system.ads" 79 0 0# 
   (left : BV32.t) (right : BV32.t) : bool

end

(* Module for defining the constant "left" defined at system.ads:80, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oge__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function left #"system.ads" 80 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:80, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oge__left__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:80, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oge__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function right #"system.ads" 80 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:80, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oge__right__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Oge" defined at system.ads:80, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Oge
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function oge #"system.ads" 80 0 0# 
   (left : BV32.t) (right : BV32.t) : bool

end

(* Module for defining the constant "left" defined at system.ads:81, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oeq__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function left #"system.ads" 81 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:81, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oeq__left__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:81, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oeq__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function right #"system.ads" 81 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:81, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oeq__right__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Oeq" defined at system.ads:81, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Oeq
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function oeq #"system.ads" 81 0 0# 
   (left : BV32.t) (right : BV32.t) : bool

end

(* Module for axiomatizing type "bit_order" defined at system.ads:91, created in Gnat2Why.Types.Translate_Type *)
module System__bit_order
 use import "_gnatprove_standard".Main
 use import "int".Int

 type bit_order #"system.ads" 91 0 0# 
 
 function first #"system.ads" 91 0 0# 
   : int =
  0
 
 function last #"system.ads" 91 0 0# 
   : int =
  1
 
 predicate in_range #"system.ads" 91 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = bit_order, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type bit_order__ref #"system.ads" 91 0 0# =
  { mutable bit_order__content "model_trace:" : bit_order }
 
 function bit_order__ref___projection #"system.ads" 91 0 0# 
   (a : bit_order__ref) : bit_order =
  a.bit_order__content
 
 meta "model_projection" function bit_order__ref___projection
 
 meta "inline : no" function bit_order__ref___projection
 
 val bit_order__havoc #"system.ads" 91 0 0# 
   (x : bit_order__ref) : unit
  writes {x}

end

(* Module for defining the constant "default_bit_order" defined at system.ads:92, created in Gnat2Why.Decls.Translate_Constant *)
module System__default_bit_order
 use import "_gnatprove_standard".Main

 function default_bit_order #"system.ads" 92 0 0# "model" "model_trace:4107" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 91 0 0# 
   : int

end

(* Module for defining the constant "max_priority" defined at system.ads:97, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_priority
 use import "_gnatprove_standard".Main

 function max_priority #"system.ads" 97 0 0# "model" "model_trace:4123" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module for defining the constant "max_interrupt_priority" defined at system.ads:98, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_interrupt_priority
 use import "_gnatprove_standard".Main

 function max_interrupt_priority #"system.ads" 98 0 0# "model" "model_trace:4133" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module for axiomatizing type "any_priority" defined at system.ads:100, created in Gnat2Why.Types.Translate_Type *)
module System__any_priority
 use import "_gnatprove_standard".Main
 use import "int".Int

 type any_priority #"system.ads" 100 0 0# 
 
 function first #"system.ads" 100 0 0# 
   : int =
  0
 
 function last #"system.ads" 100 0 0# 
   : int =
  31
 
 predicate in_range #"system.ads" 100 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = any_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type any_priority__ref #"system.ads" 100 0 0# =
  { mutable any_priority__content "model_trace:" : any_priority }
 
 function any_priority__ref___projection #"system.ads" 100 0 0# 
   (a : any_priority__ref) : any_priority =
  a.any_priority__content
 
 meta "model_projection" function any_priority__ref___projection
 
 meta "inline : no" function any_priority__ref___projection
 
 val any_priority__havoc #"system.ads" 100 0 0# 
   (x : any_priority__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "priority" defined at system.ads:101, created in Gnat2Why.Types.Translate_Type *)
module System__priority
 use import "_gnatprove_standard".Main
 use import "int".Int

 type priority #"system.ads" 101 0 0# 
 
 function first #"system.ads" 101 0 0# 
   : int =
  0
 
 function last #"system.ads" 101 0 0# 
   : int =
  30
 
 predicate in_range #"system.ads" 101 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type priority__ref #"system.ads" 101 0 0# =
  { mutable priority__content "model_trace:" : priority }
 
 function priority__ref___projection #"system.ads" 101 0 0# 
   (a : priority__ref) : priority =
  a.priority__content
 
 meta "model_projection" function priority__ref___projection
 
 meta "inline : no" function priority__ref___projection
 
 val priority__havoc #"system.ads" 101 0 0# 
   (x : priority__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "interrupt_priority" defined at system.ads:102, created in Gnat2Why.Types.Translate_Type *)
module System__interrupt_priority
 use import "_gnatprove_standard".Main
 use import "int".Int

 type interrupt_priority #"system.ads" 102 0 0# 
 
 function first #"system.ads" 102 0 0# 
   : int =
  31
 
 function last #"system.ads" 102 0 0# 
   : int =
  31
 
 predicate in_range #"system.ads" 102 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = interrupt_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type interrupt_priority__ref #"system.ads" 102 0 0# =
  { mutable interrupt_priority__content "model_trace:" : interrupt_priority }
 
 function interrupt_priority__ref___projection #"system.ads" 102 0 0# 
   (a : interrupt_priority__ref) : interrupt_priority =
  a.interrupt_priority__content
 
 meta "model_projection" function interrupt_priority__ref___projection
 
 meta "inline : no" function interrupt_priority__ref___projection
 
 val interrupt_priority__havoc #"system.ads" 102 0 0# 
   (x : interrupt_priority__ref) : unit
  writes {x}

end

(* Module for defining the constant "default_priority" defined at system.ads:104, created in Gnat2Why.Decls.Translate_Constant *)
module System__default_priority
 use import "_gnatprove_standard".Main

 function default_priority #"system.ads" 104 0 0# "model" "model_trace:4185" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 101 0 0# 
   : int

end

(* Module for defining the constant "backend_divide_checks" defined at system.ads:121, created in Gnat2Why.Decls.Translate_Constant *)
module System__backend_divide_checks
 use import "_gnatprove_standard".Main

 function backend_divide_checks #"system.ads" 121 0 0# "model" "model_trace:4215" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 121 0 0# 
   : int

end

(* Module for defining the constant "backend_overflow_checks" defined at system.ads:122, created in Gnat2Why.Decls.Translate_Constant *)
module System__backend_overflow_checks
 use import "_gnatprove_standard".Main

 function backend_overflow_checks #"system.ads" 122 0 0# "model" "model_trace:4225" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 122 0 0# 
   : int

end

(* Module for defining the constant "command_line_args" defined at system.ads:123, created in Gnat2Why.Decls.Translate_Constant *)
module System__command_line_args
 use import "_gnatprove_standard".Main

 function command_line_args #"system.ads" 123 0 0# "model" "model_trace:4235" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 123 0 0# 
   : int

end

(* Module for defining the constant "configurable_run_time" defined at system.ads:124, created in Gnat2Why.Decls.Translate_Constant *)
module System__configurable_run_time
 use import "_gnatprove_standard".Main

 function configurable_run_time #"system.ads" 124 0 0# "model" "model_trace:4245" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 124 0 0# 
   : int

end

(* Module for defining the constant "denorm" defined at system.ads:125, created in Gnat2Why.Decls.Translate_Constant *)
module System__denorm
 use import "_gnatprove_standard".Main

 function denorm #"system.ads" 125 0 0# "model" "model_trace:4255" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 125 0 0# 
   : int

end

(* Module for defining the constant "duration_32_bits" defined at system.ads:126, created in Gnat2Why.Decls.Translate_Constant *)
module System__duration_32_bits
 use import "_gnatprove_standard".Main

 function duration_32_bits #"system.ads" 126 0 0# "model" "model_trace:4265" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 126 0 0# 
   : int

end

(* Module for defining the constant "exit_status_supported" defined at system.ads:127, created in Gnat2Why.Decls.Translate_Constant *)
module System__exit_status_supported
 use import "_gnatprove_standard".Main

 function exit_status_supported #"system.ads" 127 0 0# "model" "model_trace:4275" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 127 0 0# 
   : int

end

(* Module for defining the constant "fractional_fixed_ops" defined at system.ads:128, created in Gnat2Why.Decls.Translate_Constant *)
module System__fractional_fixed_ops
 use import "_gnatprove_standard".Main

 function fractional_fixed_ops #"system.ads" 128 0 0# "model" "model_trace:4285" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 128 0 0# 
   : int

end

(* Module for defining the constant "frontend_layout" defined at system.ads:129, created in Gnat2Why.Decls.Translate_Constant *)
module System__frontend_layout
 use import "_gnatprove_standard".Main

 function frontend_layout #"system.ads" 129 0 0# "model" "model_trace:4295" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 129 0 0# 
   : int

end

(* Module for defining the constant "machine_overflows" defined at system.ads:130, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_overflows
 use import "_gnatprove_standard".Main

 function machine_overflows #"system.ads" 130 0 0# "model" "model_trace:4305" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 130 0 0# 
   : int

end

(* Module for defining the constant "machine_rounds" defined at system.ads:131, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_rounds
 use import "_gnatprove_standard".Main

 function machine_rounds #"system.ads" 131 0 0# "model" "model_trace:4315" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 131 0 0# 
   : int

end

(* Module for defining the constant "preallocated_stacks" defined at system.ads:132, created in Gnat2Why.Decls.Translate_Constant *)
module System__preallocated_stacks
 use import "_gnatprove_standard".Main

 function preallocated_stacks #"system.ads" 132 0 0# "model" "model_trace:4325" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 132 0 0# 
   : int

end

(* Module for defining the constant "signed_zeros" defined at system.ads:133, created in Gnat2Why.Decls.Translate_Constant *)
module System__signed_zeros
 use import "_gnatprove_standard".Main

 function signed_zeros #"system.ads" 133 0 0# "model" "model_trace:4335" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 133 0 0# 
   : int

end

(* Module for defining the constant "stack_check_default" defined at system.ads:134, created in Gnat2Why.Decls.Translate_Constant *)
module System__stack_check_default
 use import "_gnatprove_standard".Main

 function stack_check_default #"system.ads" 134 0 0# "model" "model_trace:4345" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 134 0 0# 
   : int

end

(* Module for defining the constant "stack_check_probes" defined at system.ads:135, created in Gnat2Why.Decls.Translate_Constant *)
module System__stack_check_probes
 use import "_gnatprove_standard".Main

 function stack_check_probes #"system.ads" 135 0 0# "model" "model_trace:4355" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 135 0 0# 
   : int

end

(* Module for defining the constant "stack_check_limits" defined at system.ads:136, created in Gnat2Why.Decls.Translate_Constant *)
module System__stack_check_limits
 use import "_gnatprove_standard".Main

 function stack_check_limits #"system.ads" 136 0 0# "model" "model_trace:4365" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 136 0 0# 
   : int

end

(* Module for defining the constant "support_aggregates" defined at system.ads:137, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_aggregates
 use import "_gnatprove_standard".Main

 function support_aggregates #"system.ads" 137 0 0# "model" "model_trace:4375" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 137 0 0# 
   : int

end

(* Module for defining the constant "support_atomic_primitives" defined at system.ads:138, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_atomic_primitives
 use import "_gnatprove_standard".Main

 function support_atomic_primitives #"system.ads" 138 0 0# "model" "model_trace:4385" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 138 0 0# 
   : int

end

(* Module for defining the constant "support_composite_assign" defined at system.ads:139, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_composite_assign
 use import "_gnatprove_standard".Main

 function support_composite_assign #"system.ads" 139 0 0# "model" "model_trace:4395" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 139 0 0# 
   : int

end

(* Module for defining the constant "support_composite_compare" defined at system.ads:140, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_composite_compare
 use import "_gnatprove_standard".Main

 function support_composite_compare #"system.ads" 140 0 0# "model" "model_trace:4405" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 140 0 0# 
   : int

end

(* Module for defining the constant "support_long_shifts" defined at system.ads:141, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_long_shifts
 use import "_gnatprove_standard".Main

 function support_long_shifts #"system.ads" 141 0 0# "model" "model_trace:4415" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 141 0 0# 
   : int

end

(* Module for defining the constant "always_compatible_rep" defined at system.ads:142, created in Gnat2Why.Decls.Translate_Constant *)
module System__always_compatible_rep
 use import "_gnatprove_standard".Main

 function always_compatible_rep #"system.ads" 142 0 0# "model" "model_trace:4425" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 142 0 0# 
   : int

end

(* Module for defining the constant "suppress_standard_library" defined at system.ads:143, created in Gnat2Why.Decls.Translate_Constant *)
module System__suppress_standard_library
 use import "_gnatprove_standard".Main

 function suppress_standard_library #"system.ads" 143 0 0# "model" "model_trace:4435" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 143 0 0# 
   : int

end

(* Module for defining the constant "use_ada_main_program_name" defined at system.ads:144, created in Gnat2Why.Decls.Translate_Constant *)
module System__use_ada_main_program_name
 use import "_gnatprove_standard".Main

 function use_ada_main_program_name #"system.ads" 144 0 0# "model" "model_trace:4445" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 144 0 0# 
   : int

end

(* Module for defining the constant "frontend_exceptions" defined at system.ads:145, created in Gnat2Why.Decls.Translate_Constant *)
module System__frontend_exceptions
 use import "_gnatprove_standard".Main

 function frontend_exceptions #"system.ads" 145 0 0# "model" "model_trace:4455" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 145 0 0# 
   : int

end

(* Module for defining the constant "zcx_by_default" defined at system.ads:146, created in Gnat2Why.Decls.Translate_Constant *)
module System__zcx_by_default
 use import "_gnatprove_standard".Main

 function zcx_by_default #"system.ads" 146 0 0# "model" "model_trace:4465" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 146 0 0# 
   : int

end

(* Module for axiomatizing the array theory associated to type "Tpriorities_mappingB" defined at system.ads:161, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 function index_I1_one #"system.ads" 146 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 146 0 0# =
  Standard__integer.integer
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__integer.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "Tpriorities_mappingB" defined at system.ads:161, created in Gnat2Why.Types.Translate_Type *)
module System__Tpriorities_mappingB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        System__any_priority
 use        Array__Int__Standard__integer

 type component_type #"system.ads" 1 0 0# =
  Standard__integer.integer
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = System__any_priority.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tpriorities_mappingB #"system.ads" 161 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tpriorities_mappingB__ref #"system.ads" 161 0 0# =
  { mutable tpriorities_mappingB__content "model_trace:" : tpriorities_mappingB }
 
 function tpriorities_mappingB__ref___projection #"system.ads" 161 0 0# 
   (a : tpriorities_mappingB__ref) : tpriorities_mappingB =
  a.tpriorities_mappingB__content
 
 meta "model_projection" function tpriorities_mappingB__ref___projection
 
 meta "inline : no" function tpriorities_mappingB__ref___projection
 
 val tpriorities_mappingB__havoc #"system.ads" 161 0 0# 
   (x : tpriorities_mappingB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "priorities_mapping" defined at system.ads:161, created in Gnat2Why.Types.Translate_Type *)
module System__priorities_mapping
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Array__Int__Standard__integer

 type component_type #"system.ads" 161 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  31
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T3s" defined at system.ads:166, created in Gnat2Why.Types.Translate_Type *)
module System__T3s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t3s #"system.ads" 166 0 0# 
 
 function first #"system.ads" 166 0 0# 
   : int =
  0
 
 function last #"system.ads" 166 0 0# 
   : int =
  31
 
 predicate in_range #"system.ads" 166 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t3s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type t3s__ref #"system.ads" 166 0 0# =
  { mutable t3s__content "model_trace:" : t3s }
 
 function t3s__ref___projection #"system.ads" 166 0 0# 
   (a : t3s__ref) : t3s =
  a.t3s__content
 
 meta "model_projection" function t3s__ref___projection
 
 meta "inline : no" function t3s__ref___projection
 
 val t3s__havoc #"system.ads" 166 0 0# 
   (x : t3s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T4s" defined at system.ads:166, created in Gnat2Why.Types.Translate_Type *)
module System__T4s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Array__Int__Standard__integer

 type component_type #"system.ads" 166 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  31
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "underlying_priorities" defined at system.ads:165, created in Gnat2Why.Decls.Translate_Constant *)
module System__underlying_priorities
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__integer

 function underlying_priorities #"system.ads" 165 0 0# "model_projected" "model_trace:4491" 
   : Array__Int__Standard__integer.map
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 161 0 0# 
   : int

end

(* Module for axiomatizing type "T1b" defined at pump.adb:16, created in Gnat2Why.Types.Translate_Type *)
module Pump__set_pump_state__T1b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 161 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  13
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T2b" defined at pump.adb:30, created in Gnat2Why.Types.Translate_Type *)
module Pump__set_pump_nozzle_state__T2b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  20
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T3b" defined at pump.adb:44, created in Gnat2Why.Types.Translate_Type *)
module Pump__set_reservoir_size__T3b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  16
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T7b" defined at pump.adb:110, created in Gnat2Why.Types.Translate_Type *)
module Pump__append_reservoir__T7b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  15
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T8b" defined at pump.adb:123, created in Gnat2Why.Types.Translate_Type *)
module Pump__set_fuel_price__T8b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  17
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end
(* Module for defining a ref holding the value of variable "pump_r" defined at pump.ads:14, created in Gnat2Why.Decls.Translate_Variable *)
module Pump__set_fuel_price__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 val pump_r__split_fields #"pump.ads" 14 0 0#  : Pump__pump.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:14, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__set_fuel_price__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pump_r" defined at pump.ads:15, created in Gnat2Why.Decls.Translate_Variable *)
module Pump__set_pump_state__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 val pump_r__split_fields #"pump.ads" 15 0 0#  : Pump__pump.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__set_pump_state__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pump_r" defined at pump.ads:16, created in Gnat2Why.Decls.Translate_Variable *)
module Pump__set_pumped__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 val pump_r__split_fields #"pump.ads" 16 0 0#  : Pump__pump.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__set_pumped__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pump_r" defined at pump.ads:17, created in Gnat2Why.Decls.Translate_Variable *)
module Pump__set_pump_nozzle_state__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 val pump_r__split_fields #"pump.ads" 17 0 0#  : Pump__pump.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:17, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__set_pump_nozzle_state__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pump_r" defined at pump.ads:19, created in Gnat2Why.Decls.Translate_Variable *)
module Pump__append_reservoir__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 val pump_r__split_fields #"pump.ads" 19 0 0#  : Pump__pump.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:19, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__append_reservoir__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pump_r" defined at pump.ads:21, created in Gnat2Why.Decls.Translate_Variable *)
module Pump__set_reservoir_size__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 val pump_r__split_fields #"pump.ads" 21 0 0#  : Pump__pump.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__set_reservoir_size__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pump_r" defined at pump.ads:23, created in Gnat2Why.Decls.Translate_Variable *)
module Pump__remove_petrol_reservoir__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 val pump_r__split_fields #"pump.ads" 23 0 0#  : Pump__pump.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:23, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__remove_petrol_reservoir__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "r" defined at pump.adb:103, created in Gnat2Why.Decls.Translate_Variable *)
module Pump__append_reservoir__r
 use import "_gnatprove_standard".Main
 use        Pump__reservoir

 val r__split_fields #"pump.adb" 103 0 0#  : Pump__reservoir.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 37 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "r" defined at pump.adb:103, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__append_reservoir__r__axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant #"pump.ads" 37 0 0# "inline" 
   (temp___expr_3 : int) (temp___is_init_0 : bool) (temp___do_constant_1 : bool) (temp___do_toplevel_2 : bool)  =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_3)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___4 : int) (temp___5 : bool)  =
  true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_9 : int) (temp___is_init_6 : bool) (temp___do_constant_7 : bool) (temp___do_toplevel_8 : bool)  =
  (if (( temp___is_init_6 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_9)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___10 : int) (temp___11 : bool)  =
  true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_15 : int) (temp___is_init_12 : bool) (temp___do_constant_13 : bool) (temp___do_toplevel_14 : bool)  =
  (if (( temp___is_init_12 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_15)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___16 : int) (temp___17 : bool)  =
  true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_21 : int) (temp___is_init_18 : bool) (temp___do_constant_19 : bool) (temp___do_toplevel_20 : bool)  =
  (if (( temp___is_init_18 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_21)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___22 : int) (temp___23 : bool)  =
  true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_27 : int) (temp___is_init_24 : bool) (temp___do_constant_25 : bool) (temp___do_toplevel_26 : bool)  =
  (if (( temp___is_init_24 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_27)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___28 : int) (temp___29 : bool)  =
  true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_33 : int) (temp___is_init_30 : bool) (temp___do_constant_31 : bool) (temp___do_toplevel_32 : bool)  =
  (if (( temp___is_init_30 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_33)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___34 : int) (temp___35 : bool)  =
  true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_39 : int) (temp___is_init_36 : bool) (temp___do_constant_37 : bool) (temp___do_toplevel_38 : bool)  =
  (if (( temp___is_init_36 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_39)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___40 : int) (temp___41 : bool)  =
  true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float__axiom
 use import "_gnatprove_standard".Main
 use        Standard__short_float

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_45 : Standard__short_float.short_float) (temp___is_init_42 : bool) (temp___do_constant_43 : bool) (temp___do_toplevel_44 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___46 : Standard__short_float.short_float) (temp___47 : bool)  =
  true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float__axiom
 use import "_gnatprove_standard".Main
 use        Standard__float

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_51 : Standard__float.float) (temp___is_init_48 : bool) (temp___do_constant_49 : bool) (temp___do_toplevel_50 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___52 : Standard__float.float) (temp___53 : bool)  =
  true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float__axiom
 use import "_gnatprove_standard".Main
 use        Standard__long_float

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_57 : Standard__long_float.long_float) (temp___is_init_54 : bool) (temp___do_constant_55 : bool) (temp___do_toplevel_56 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___58 : Standard__long_float.long_float) (temp___59 : bool)  =
  true

end

(* Module giving axioms for type "long_long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_float__axiom
 use import "_gnatprove_standard".Main
 use        Standard__long_long_float

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_63 : Standard__long_long_float.long_long_float) (temp___is_init_60 : bool) (temp___do_constant_61 : bool) (temp___do_toplevel_62 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___64 : Standard__long_long_float.long_long_float) (temp___65 : bool)  =
  true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_69 : int) (temp___is_init_66 : bool) (temp___do_constant_67 : bool) (temp___do_toplevel_68 : bool)  =
  (if (( temp___is_init_66 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_69)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___70 : int) (temp___71 : bool)  =
  true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_75 : int) (temp___is_init_72 : bool) (temp___do_constant_73 : bool) (temp___do_toplevel_74 : bool)  =
  (if (( temp___is_init_72 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_75)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___76 : int) (temp___77 : bool)  =
  true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_81 : int) (temp___is_init_78 : bool) (temp___do_constant_79 : bool) (temp___do_toplevel_80 : bool)  =
  (if (( temp___is_init_78 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_81)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___82 : int) (temp___83 : bool)  =
  true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_87 : Standard__string.string) (temp___is_init_84 : bool) (temp___do_constant_85 : bool) (temp___do_toplevel_86 : bool)  =
  (if (temp___do_constant_85) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_87) (Standard__string.last temp___expr_87))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string__axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_92 : Standard__wide_string.wide_string) (temp___is_init_89 : bool) (temp___do_constant_90 : bool) (temp___do_toplevel_91 : bool)  =
  (if (temp___do_constant_90) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_92) (Standard__wide_string.last temp___expr_92))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string__axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_97 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_94 : bool) (temp___do_constant_95 : bool) (temp___do_toplevel_96 : bool)  =
  (if (temp___do_constant_95) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_97) (Standard__wide_wide_string.last temp___expr_97))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration__axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_102 : Standard__duration.duration) (temp___is_init_99 : bool) (temp___do_constant_100 : bool) (temp___do_toplevel_101 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___103 : Standard__duration.duration) (temp___104 : bool)  =
  true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_108 : int) (temp___is_init_105 : bool) (temp___do_constant_106 : bool) (temp___do_toplevel_107 : bool)  =
  (if (( temp___is_init_105 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_108)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___109 : int) (temp___110 : bool)  =
  true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_114 : int) (temp___is_init_111 : bool) (temp___do_constant_112 : bool) (temp___do_toplevel_113 : bool)  =
  (if (( temp___is_init_111 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_114)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___115 : int) (temp___116 : bool)  =
  true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_120 : int) (temp___is_init_117 : bool) (temp___do_constant_118 : bool) (temp___do_toplevel_119 : bool)  =
  (if (( temp___is_init_117 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_120)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___121 : int) (temp___122 : bool)  =
  true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_126 : int) (temp___is_init_123 : bool) (temp___do_constant_124 : bool) (temp___do_toplevel_125 : bool)  =
  (if (( temp___is_init_123 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_126)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___127 : int) (temp___128 : bool)  =
  true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_132 : int) (temp___is_init_129 : bool) (temp___do_constant_130 : bool) (temp___do_toplevel_131 : bool)  =
  (if (( temp___is_init_129 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_132)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___133 : int) (temp___134 : bool)  =
  true

end

(* Module giving axioms for type "universal_real", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_real__axiom
 use import "_gnatprove_standard".Main
 use        Standard__universal_real

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_138 : Standard__universal_real.universal_real) (temp___is_init_135 : bool) (temp___do_constant_136 : bool) (temp___do_toplevel_137 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___139 : Standard__universal_real.universal_real) (temp___140 : bool)  =
  true

end

(* Module for possibly declaring a logic function for "set_fuel_price" defined at pump.ads:14, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__set_fuel_price
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_pump_state" defined at pump.ads:15, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__set_pump_state
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_pumped" defined at pump.ads:16, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__set_pumped
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_pump_nozzle_state" defined at pump.ads:17, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__set_pump_nozzle_state
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "append_reservoir" defined at pump.ads:19, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__append_reservoir
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_reservoir_size" defined at pump.ads:21, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__set_reservoir_size
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "remove_petrol_reservoir" defined at pump.ads:23, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__remove_petrol_reservoir
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "print" defined at sprint.ads:3, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Sprint__print
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "print_float_type" defined at sprint.ads:4, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Sprint__print_float_type
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "print_state_type" defined at sprint.ads:5, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Sprint__print_state_type
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "print_nozzle_type" defined at sprint.ads:6, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Sprint__print_nozzle_type
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "print_fuel_type" defined at sprint.ads:7, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Sprint__print_fuel_type
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "min_int" defined at system.ads:51, created in Gnat2Why.Decls.Translate_Constant *)
module System__min_int
 use import "_gnatprove_standard".Main

 function min_int #"system.ads" 51 0 0# "model" "model_trace:3768" 
   : int

end

(* Module for defining the constant "max_int" defined at system.ads:52, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_int
 use import "_gnatprove_standard".Main

 function max_int #"system.ads" 52 0 0# "model" "model_trace:3779" 
   : int

end

(* Module for defining the constant "max_binary_modulus" defined at system.ads:54, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_binary_modulus
 use import "_gnatprove_standard".Main

 function max_binary_modulus #"system.ads" 54 0 0# "model" "model_trace:3790" 
   : int

end

(* Module for defining the constant "max_nonbinary_modulus" defined at system.ads:55, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_nonbinary_modulus
 use import "_gnatprove_standard".Main

 function max_nonbinary_modulus #"system.ads" 55 0 0# "model" "model_trace:3803" 
   : int

end

(* Module for defining the constant "max_base_digits" defined at system.ads:57, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_base_digits
 use import "_gnatprove_standard".Main

 function max_base_digits #"system.ads" 57 0 0# "model" "model_trace:3818" 
   : int

end

(* Module for defining the constant "max_digits" defined at system.ads:58, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_digits
 use import "_gnatprove_standard".Main

 function max_digits #"system.ads" 58 0 0# "model" "model_trace:3828" 
   : int

end

(* Module for defining the constant "max_mantissa" defined at system.ads:60, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_mantissa
 use import "_gnatprove_standard".Main

 function max_mantissa #"system.ads" 60 0 0# "model" "model_trace:3838" 
   : int

end

(* Module for defining the constant "fine_delta" defined at system.ads:61, created in Gnat2Why.Decls.Translate_Constant *)
module System__fine_delta
 use import "_gnatprove_standard".Main
 use        Standard__universal_real

 function fine_delta #"system.ads" 61 0 0# 
   : Standard__universal_real.universal_real

end

(* Module for defining the constant "tick" defined at system.ads:63, created in Gnat2Why.Decls.Translate_Constant *)
module System__tick
 use import "_gnatprove_standard".Main
 use        Standard__universal_real

 function tick #"system.ads" 63 0 0# 
   : Standard__universal_real.universal_real

end

(* Module for defining the constant "storage_unit" defined at system.ads:71, created in Gnat2Why.Decls.Translate_Constant *)
module System__storage_unit
 use import "_gnatprove_standard".Main

 function storage_unit #"system.ads" 71 0 0# "model" "model_trace:3889" 
   : int

end

(* Module for defining the constant "word_size" defined at system.ads:72, created in Gnat2Why.Decls.Translate_Constant *)
module System__word_size
 use import "_gnatprove_standard".Main

 function word_size #"system.ads" 72 0 0# "model" "model_trace:3898" 
   : int

end

(* Module for defining the constant "memory_size" defined at system.ads:73, created in Gnat2Why.Decls.Translate_Constant *)
module System__memory_size
 use import "_gnatprove_standard".Main

 function memory_size #"system.ads" 73 0 0# "model" "model_trace:3907" 
   : int

end

(* Module for defining the value of the aggregate at system.ads:166, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module System__underlying_priorities__aggregate_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer

 function system__underlying_priorities__aggregate_def #"system.ads" 166 0 0# 
   (temp___142 : int) (temp___143 : int) (temp___144 : int) (temp___145 : int) (temp___146 : int) (temp___147 : int) (temp___148 : int) (temp___149 : int) (temp___150 : int) (temp___151 : int) (temp___152 : int) (temp___153 : int) (temp___154 : int) (temp___155 : int) (temp___156 : int) (temp___157 : int) : Array__Int__Standard__integer.map
 
 axiom def_axiom :
  (forall temp___142 temp___143 temp___144 temp___145 temp___146 temp___147 temp___148 temp___149 temp___150 temp___151 temp___152 temp___153 temp___154 temp___155 temp___156 temp___157 : int.
   (let temp___141 = (system__underlying_priorities__aggregate_def temp___142 temp___143 temp___144 temp___145 temp___146 temp___147 temp___148 temp___149 temp___150 temp___151 temp___152 temp___153 temp___154 temp___155 temp___156 temp___157) in (
    (forall temp___158 : int.
     (if (( (31 <= temp___158) /\ (temp___158 <= 31) )) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___157))) else if (( (21 <= temp___158) /\ (temp___158 <= 30) )) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___156)))  else if ((temp___158 = 20)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___155)))  else if ((temp___158 = 19)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___154)))  else if ((temp___158 = 18)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___153)))  else if ((temp___158 = 17)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___152)))  else if ((temp___158 = 16)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___151)))  else if ((temp___158 = 15)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___150)))  else if ((temp___158 = 14)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___149)))  else if ((temp___158 = 13)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___148)))  else if ((temp___158 = 12)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___147)))  else if ((temp___158 = 11)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___146)))  else if ((temp___158 = 10)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___145)))  else if ((temp___158 = 9)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___144)))  else if ((temp___158 = 8)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___143)))  else if (( (0 <= temp___158) /\ (temp___158 <= 7) )) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___142))) else (
      true)))))
  )

end

(* Module giving axioms for type "Treservoir_numB" defined at pump.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__Treservoir_numB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "reservoir_num" defined at pump.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__reservoir_num__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__reservoir_num

 predicate dynamic_invariant #"system.ads" 167 0 0# "inline" 
   (temp___expr_162 : int) (temp___is_init_159 : bool) (temp___do_constant_160 : bool) (temp___do_toplevel_161 : bool)  =
  (if (( temp___is_init_159 \/ (Pump__reservoir_num.first <= Pump__reservoir_num.last) )) then (
   (Pump__reservoir_num.dynamic_property Pump__reservoir_num.first Pump__reservoir_num.last temp___expr_162)) else true)
 
 predicate default_initial_assumption #"pump.ads" 5 0 0# "inline" 
   (temp___163 : int) (temp___164 : bool)  =
  true

end

(* Module giving axioms for type "Tfloat_numberB" defined at pump.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__Tfloat_numberB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "float_number" defined at pump.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__float_number__axiom
 use import "_gnatprove_standard".Main
 use        Pump__float_number

 predicate dynamic_invariant #"pump.ads" 5 0 0# "inline" 
   (temp___expr_168 : Pump__float_number.float_number) (temp___is_init_165 : bool) (temp___do_constant_166 : bool) (temp___do_toplevel_167 : bool)  =
  true
 
 predicate default_initial_assumption #"pump.ads" 6 0 0# "inline" 
   (temp___169 : Pump__float_number.float_number) (temp___170 : bool)  =
  true

end

(* Module giving axioms for type "fuel_types" defined at pump.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__fuel_types__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__fuel_types

 predicate dynamic_invariant #"pump.ads" 6 0 0# "inline" 
   (temp___expr_174 : int) (temp___is_init_171 : bool) (temp___do_constant_172 : bool) (temp___do_toplevel_173 : bool)  =
  (if (( temp___is_init_171 \/ (Pump__fuel_types.first <= Pump__fuel_types.last) )) then (
   (Pump__fuel_types.dynamic_property Pump__fuel_types.first Pump__fuel_types.last temp___expr_174)) else true)
 
 predicate default_initial_assumption #"pump.ads" 7 0 0# "inline" 
   (temp___175 : int) (temp___176 : bool)  =
  true

end

(* Module giving axioms for type "reservoir" defined at pump.ads:37, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__reservoir__axiom
 use import "_gnatprove_standard".Main
 use        Pump__reservoir

 predicate dynamic_invariant #"pump.ads" 7 0 0# "inline" 
   (temp___expr_180 : Pump__reservoir.reservoir) (temp___is_init_177 : bool) (temp___do_constant_178 : bool) (temp___do_toplevel_179 : bool)  =
  true
 
 predicate default_initial_assumption #"pump.ads" 37 0 0# "inline" 
   (temp___181 : Pump__reservoir.reservoir) (temp___182 : bool)  =
  true

end

(* Module giving axioms for type "state_type" defined at pump.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__state_type__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__state_type

 predicate dynamic_invariant #"pump.ads" 37 0 0# "inline" 
   (temp___expr_188 : int) (temp___is_init_185 : bool) (temp___do_constant_186 : bool) (temp___do_toplevel_187 : bool)  =
  (if (( temp___is_init_185 \/ (Pump__state_type.first <= Pump__state_type.last) )) then (
   (Pump__state_type.dynamic_property Pump__state_type.first Pump__state_type.last temp___expr_188)) else true)
 
 predicate default_initial_assumption #"pump.ads" 10 0 0# "inline" 
   (temp___189 : int) (temp___190 : bool)  =
  true

end

(* Module giving axioms for type "nozzle_type" defined at pump.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__nozzle_type__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__nozzle_type

 predicate dynamic_invariant #"pump.ads" 10 0 0# "inline" 
   (temp___expr_194 : int) (temp___is_init_191 : bool) (temp___do_constant_192 : bool) (temp___do_toplevel_193 : bool)  =
  (if (( temp___is_init_191 \/ (Pump__nozzle_type.first <= Pump__nozzle_type.last) )) then (
   (Pump__nozzle_type.dynamic_property Pump__nozzle_type.first Pump__nozzle_type.last temp___expr_194)) else true)
 
 predicate default_initial_assumption #"pump.ads" 11 0 0# "inline" 
   (temp___195 : int) (temp___196 : bool)  =
  true

end

(* Module giving axioms for type "pump" defined at pump.ads:44, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__pump__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use import "real".RealInfix
 use        Pump__float_number
 use        Pump__fuel_types
 use        Pump__reservoir
 use        Pump__state_type
 use        Pump__nozzle_type
 use        Pump__pump

 predicate dynamic_invariant #"pump.ads" 11 0 0# "inline" 
   (temp___expr_200 : Pump__pump.pump) (temp___is_init_197 : bool) (temp___do_constant_198 : bool) (temp___do_toplevel_199 : bool)  =
  true
 
 predicate default_initial_assumption #"pump.ads" 44 0 0# "inline" 
   (temp___201 : Pump__pump.pump) (temp___202 : bool)  =
  ( ( ( ( ( (if ((Pump__pump.reservoir_info__pred temp___201)) then (
   ((Pump__pump.rec__reservoir_info (Pump__pump.__split_fields temp___201)) = { Pump__reservoir.__split_fields = { Pump__reservoir.rec__total = (Pump__float_number.of_real (1000.0)); Pump__reservoir.rec__reservoir_category = (Pump__fuel_types.of_rep 0) } })) else true) /\ (if ((Pump__pump.pump_state__pred temp___201)) then (
   ((Pump__state_type.to_rep (Pump__pump.rec__pump_state (Pump__pump.__split_fields temp___201))) = 0)) else true) ) /\ (if ((Pump__pump.pumped__pred temp___201)) then (
   ((Pump__pump.rec__pumped (Pump__pump.__split_fields temp___201)) = (Pump__float_number.of_real (0.0E-2)))) else true) ) /\ (if ((Pump__pump.nozzle_state__pred temp___201)) then (
   ((Pump__nozzle_type.to_rep (Pump__pump.rec__nozzle_state (Pump__pump.__split_fields temp___201))) = 0)) else true) ) /\ (if ((Pump__pump.unit_price__pred temp___201)) then (
   ((Pump__pump.rec__unit_price (Pump__pump.__split_fields temp___201)) = (Pump__float_number.of_real (0.0E-2)))) else true) ) /\ (if ((Pump__pump.fuel_type__pred temp___201)) then (
   ((Pump__fuel_types.to_rep (Pump__pump.rec__fuel_type (Pump__pump.__split_fields temp___201))) = 3)) else true) )

end

(* Module giving axioms for type "name" defined at system.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__name__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__name

 predicate dynamic_invariant #"pump.ads" 44 0 0# "inline" 
   (temp___expr_206 : int) (temp___is_init_203 : bool) (temp___do_constant_204 : bool) (temp___do_toplevel_205 : bool)  =
  (if (( temp___is_init_203 \/ (System__name.first <= System__name.last) )) then (
   (System__name.dynamic_property System__name.first System__name.last temp___expr_206)) else true)
 
 predicate default_initial_assumption #"system.ads" 46 0 0# "inline" 
   (temp___207 : int) (temp___208 : bool)  =
  true

end

(* Module giving axioms for type "address" defined at system.ads:108, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__address__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__address

 predicate dynamic_invariant #"system.ads" 46 0 0# "inline" 
   (temp___expr_212 : BV32.t) (temp___is_init_209 : bool) (temp___do_constant_210 : bool) (temp___do_toplevel_211 : bool)  =
  (if (( temp___is_init_209 \/ (BV32.ule System__address.first System__address.last) )) then (
   (System__address.dynamic_property System__address.first System__address.last temp___expr_212)) else true)
 
 predicate default_initial_assumption #"system.ads" 108 0 0# "inline" 
   (temp___213 : BV32.t) (temp___214 : bool)  =
  true

end

(* Module giving axioms for type "bit_order" defined at system.ads:91, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__bit_order__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__bit_order

 predicate dynamic_invariant #"system.ads" 108 0 0# "inline" 
   (temp___expr_218 : int) (temp___is_init_215 : bool) (temp___do_constant_216 : bool) (temp___do_toplevel_217 : bool)  =
  (if (( temp___is_init_215 \/ (System__bit_order.first <= System__bit_order.last) )) then (
   (System__bit_order.dynamic_property System__bit_order.first System__bit_order.last temp___expr_218)) else true)
 
 predicate default_initial_assumption #"system.ads" 91 0 0# "inline" 
   (temp___219 : int) (temp___220 : bool)  =
  true

end

(* Module giving axioms for type "any_priority" defined at system.ads:100, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__any_priority__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__any_priority

 predicate dynamic_invariant #"system.ads" 91 0 0# "inline" 
   (temp___expr_224 : int) (temp___is_init_221 : bool) (temp___do_constant_222 : bool) (temp___do_toplevel_223 : bool)  =
  (if (( temp___is_init_221 \/ (System__any_priority.first <= System__any_priority.last) )) then (
   (System__any_priority.dynamic_property System__any_priority.first System__any_priority.last temp___expr_224)) else true)
 
 predicate default_initial_assumption #"system.ads" 100 0 0# "inline" 
   (temp___225 : int) (temp___226 : bool)  =
  true

end

(* Module giving axioms for type "priority" defined at system.ads:101, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__priority__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__priority

 predicate dynamic_invariant #"system.ads" 100 0 0# "inline" 
   (temp___expr_230 : int) (temp___is_init_227 : bool) (temp___do_constant_228 : bool) (temp___do_toplevel_229 : bool)  =
  (if (( temp___is_init_227 \/ (System__priority.first <= System__priority.last) )) then (
   (System__priority.dynamic_property System__priority.first System__priority.last temp___expr_230)) else true)
 
 predicate default_initial_assumption #"system.ads" 101 0 0# "inline" 
   (temp___231 : int) (temp___232 : bool)  =
  true

end

(* Module giving axioms for type "interrupt_priority" defined at system.ads:102, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__interrupt_priority__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__interrupt_priority

 predicate dynamic_invariant #"system.ads" 101 0 0# "inline" 
   (temp___expr_236 : int) (temp___is_init_233 : bool) (temp___do_constant_234 : bool) (temp___do_toplevel_235 : bool)  =
  (if (( temp___is_init_233 \/ (System__interrupt_priority.first <= System__interrupt_priority.last) )) then (
   (System__interrupt_priority.dynamic_property System__interrupt_priority.first System__interrupt_priority.last temp___expr_236)) else true)
 
 predicate default_initial_assumption #"system.ads" 102 0 0# "inline" 
   (temp___237 : int) (temp___238 : bool)  =
  true

end

(* Module giving axioms for type "Tpriorities_mappingB" defined at system.ads:161, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__Tpriorities_mappingB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "priorities_mapping" defined at system.ads:161, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__priorities_mapping__axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer

 predicate dynamic_invariant #"system.ads" 102 0 0# "inline" 
   (temp___expr_242 : Array__Int__Standard__integer.map) (temp___is_init_239 : bool) (temp___do_constant_240 : bool) (temp___do_toplevel_241 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 161 0 0# "inline" 
   (temp___244 : Array__Int__Standard__integer.map) (temp___245 : bool)  =
  true

end

(* Module giving axioms for type "T3s" defined at system.ads:166, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__T3s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T4s" defined at system.ads:166, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__T4s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T1b" defined at pump.adb:16, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__set_pump_state__T1b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T2b" defined at pump.adb:30, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__set_pump_nozzle_state__T2b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T3b" defined at pump.adb:44, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__set_reservoir_size__T3b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T7b" defined at pump.adb:110, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__append_reservoir__T7b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T8b" defined at pump.adb:123, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__set_fuel_price__T8b__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a value for string literal  defined at pump.adb:123, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___250
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___250 #"pump.adb" 123 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump.adb:16, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___253
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___253 #"pump.adb" 16 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump.adb:30, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___258
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___258 #"pump.adb" 30 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump.adb:110, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___267
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___267 #"pump.adb" 110 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump.adb:44, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___271
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___271 #"pump.adb" 44 0 0# 
   : Array__Int__Standard__character.map

end
(* Module for defining the value of constant "system_name" defined at system.ads:47, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__system_name__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__system_name

 axiom system_name__def_axiom :
  ((System__system_name.system_name ) = 0)

end

(* Module for defining the value of constant "min_int" defined at system.ads:51, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__min_int__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__min_int

 axiom min_int__def_axiom :
  ((System__min_int.min_int ) = ( -9223372036854775808 ))

end

(* Module for defining the value of constant "max_int" defined at system.ads:52, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_int__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_int

 axiom max_int__def_axiom :
  ((System__max_int.max_int ) = 9223372036854775807)

end

(* Module for defining the value of constant "max_binary_modulus" defined at system.ads:54, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_binary_modulus__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_binary_modulus

 axiom max_binary_modulus__def_axiom :
  ((System__max_binary_modulus.max_binary_modulus ) = 18446744073709551616)

end

(* Module for defining the value of constant "max_nonbinary_modulus" defined at system.ads:55, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_nonbinary_modulus__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_nonbinary_modulus

 axiom max_nonbinary_modulus__def_axiom :
  ((System__max_nonbinary_modulus.max_nonbinary_modulus ) = 4294967295)

end

(* Module for defining the value of constant "max_base_digits" defined at system.ads:57, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_base_digits__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_base_digits

 axiom max_base_digits__def_axiom :
  ((System__max_base_digits.max_base_digits ) = 18)

end

(* Module for defining the value of constant "max_digits" defined at system.ads:58, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_digits__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_digits

 axiom max_digits__def_axiom :
  ((System__max_digits.max_digits ) = 18)

end

(* Module for defining the value of constant "max_mantissa" defined at system.ads:60, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_mantissa__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_mantissa

 axiom max_mantissa__def_axiom :
  ((System__max_mantissa.max_mantissa ) = 63)

end

(* Module for defining the value of constant "fine_delta" defined at system.ads:61, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__fine_delta__axiom
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        Standard__universal_real
 use        System__fine_delta

 axiom fine_delta__def_axiom :
  ((System__fine_delta.fine_delta ) = (Standard__universal_real.of_real (0.000000000000000000108420217248550443400745280086994171142578125)))

end

(* Module for defining the value of constant "tick" defined at system.ads:63, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__tick__axiom
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        Standard__universal_real
 use        System__tick

 axiom tick__def_axiom :
  ((System__tick.tick ) = (Standard__universal_real.of_real (1.0E-2)))

end

(* Module for defining the value of constant "storage_unit" defined at system.ads:71, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__storage_unit__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__storage_unit

 axiom storage_unit__def_axiom :
  ((System__storage_unit.storage_unit ) = 8)

end

(* Module for defining the value of constant "word_size" defined at system.ads:72, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__word_size__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__word_size

 axiom word_size__def_axiom :
  ((System__word_size.word_size ) = 32)

end

(* Module for defining the value of constant "memory_size" defined at system.ads:73, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__memory_size__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__memory_size

 axiom memory_size__def_axiom :
  ((System__memory_size.memory_size ) = 4294967296)

end

(* Module for defining the value of constant "default_bit_order" defined at system.ads:92, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__default_bit_order__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__default_bit_order

 axiom default_bit_order__def_axiom :
  ((System__default_bit_order.default_bit_order ) = 1)

end

(* Module for defining the value of constant "max_priority" defined at system.ads:97, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_priority__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_priority

 axiom max_priority__def_axiom :
  ((System__max_priority.max_priority ) = 30)

end

(* Module for defining the value of constant "max_interrupt_priority" defined at system.ads:98, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_interrupt_priority__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_interrupt_priority

 axiom max_interrupt_priority__def_axiom :
  ((System__max_interrupt_priority.max_interrupt_priority ) = 31)

end

(* Module for defining the value of constant "default_priority" defined at system.ads:104, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__default_priority__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__default_priority

 axiom default_priority__def_axiom :
  ((System__default_priority.default_priority ) = 15)

end

(* Module for defining the value of constant "null_address" defined at system.ads:109, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__null_address__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32
 use        System__null_address

 axiom null_address__def_axiom :
  ((System__null_address.null_address ) = (BV32.of_int 0))

end

(* Module for defining the value of constant "backend_divide_checks" defined at system.ads:121, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__backend_divide_checks__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__backend_divide_checks

 axiom backend_divide_checks__def_axiom :
  ((System__backend_divide_checks.backend_divide_checks ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "backend_overflow_checks" defined at system.ads:122, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__backend_overflow_checks__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__backend_overflow_checks

 axiom backend_overflow_checks__def_axiom :
  ((System__backend_overflow_checks.backend_overflow_checks ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "command_line_args" defined at system.ads:123, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__command_line_args__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__command_line_args

 axiom command_line_args__def_axiom :
  ((System__command_line_args.command_line_args ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "configurable_run_time" defined at system.ads:124, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__configurable_run_time__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__configurable_run_time

 axiom configurable_run_time__def_axiom :
  ((System__configurable_run_time.configurable_run_time ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "denorm" defined at system.ads:125, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__denorm__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__denorm

 axiom denorm__def_axiom :
  ((System__denorm.denorm ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "duration_32_bits" defined at system.ads:126, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__duration_32_bits__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__duration_32_bits

 axiom duration_32_bits__def_axiom :
  ((System__duration_32_bits.duration_32_bits ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "exit_status_supported" defined at system.ads:127, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__exit_status_supported__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__exit_status_supported

 axiom exit_status_supported__def_axiom :
  ((System__exit_status_supported.exit_status_supported ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "fractional_fixed_ops" defined at system.ads:128, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__fractional_fixed_ops__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__fractional_fixed_ops

 axiom fractional_fixed_ops__def_axiom :
  ((System__fractional_fixed_ops.fractional_fixed_ops ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "frontend_layout" defined at system.ads:129, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__frontend_layout__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__frontend_layout

 axiom frontend_layout__def_axiom :
  ((System__frontend_layout.frontend_layout ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "machine_overflows" defined at system.ads:130, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__machine_overflows__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__machine_overflows

 axiom machine_overflows__def_axiom :
  ((System__machine_overflows.machine_overflows ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "machine_rounds" defined at system.ads:131, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__machine_rounds__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__machine_rounds

 axiom machine_rounds__def_axiom :
  ((System__machine_rounds.machine_rounds ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "preallocated_stacks" defined at system.ads:132, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__preallocated_stacks__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__preallocated_stacks

 axiom preallocated_stacks__def_axiom :
  ((System__preallocated_stacks.preallocated_stacks ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "signed_zeros" defined at system.ads:133, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__signed_zeros__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__signed_zeros

 axiom signed_zeros__def_axiom :
  ((System__signed_zeros.signed_zeros ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "stack_check_default" defined at system.ads:134, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__stack_check_default__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__stack_check_default

 axiom stack_check_default__def_axiom :
  ((System__stack_check_default.stack_check_default ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "stack_check_probes" defined at system.ads:135, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__stack_check_probes__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__stack_check_probes

 axiom stack_check_probes__def_axiom :
  ((System__stack_check_probes.stack_check_probes ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "stack_check_limits" defined at system.ads:136, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__stack_check_limits__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__stack_check_limits

 axiom stack_check_limits__def_axiom :
  ((System__stack_check_limits.stack_check_limits ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "support_aggregates" defined at system.ads:137, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_aggregates__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_aggregates

 axiom support_aggregates__def_axiom :
  ((System__support_aggregates.support_aggregates ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_atomic_primitives" defined at system.ads:138, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_atomic_primitives__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_atomic_primitives

 axiom support_atomic_primitives__def_axiom :
  ((System__support_atomic_primitives.support_atomic_primitives ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_composite_assign" defined at system.ads:139, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_composite_assign__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_composite_assign

 axiom support_composite_assign__def_axiom :
  ((System__support_composite_assign.support_composite_assign ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_composite_compare" defined at system.ads:140, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_composite_compare__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_composite_compare

 axiom support_composite_compare__def_axiom :
  ((System__support_composite_compare.support_composite_compare ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_long_shifts" defined at system.ads:141, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_long_shifts__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_long_shifts

 axiom support_long_shifts__def_axiom :
  ((System__support_long_shifts.support_long_shifts ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "always_compatible_rep" defined at system.ads:142, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__always_compatible_rep__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__always_compatible_rep

 axiom always_compatible_rep__def_axiom :
  ((System__always_compatible_rep.always_compatible_rep ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "suppress_standard_library" defined at system.ads:143, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__suppress_standard_library__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__suppress_standard_library

 axiom suppress_standard_library__def_axiom :
  ((System__suppress_standard_library.suppress_standard_library ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "use_ada_main_program_name" defined at system.ads:144, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__use_ada_main_program_name__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__use_ada_main_program_name

 axiom use_ada_main_program_name__def_axiom :
  ((System__use_ada_main_program_name.use_ada_main_program_name ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "frontend_exceptions" defined at system.ads:145, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__frontend_exceptions__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__frontend_exceptions

 axiom frontend_exceptions__def_axiom :
  ((System__frontend_exceptions.frontend_exceptions ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "zcx_by_default" defined at system.ads:146, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__zcx_by_default__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__zcx_by_default

 axiom zcx_by_default__def_axiom :
  ((System__zcx_by_default.zcx_by_default ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "underlying_priorities" defined at system.ads:165, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__underlying_priorities__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__underlying_priorities
 use        Array__Int__Standard__integer
 use        System__underlying_priorities__aggregate_def
 use        Array__Int__Standard__integer

 axiom underlying_priorities__def_axiom :
  ((System__underlying_priorities.underlying_priorities ) = (System__underlying_priorities__aggregate_def.system__underlying_priorities__aggregate_def ( -15 ) ( -7 ) ( -6 ) ( -5 ) ( -4 ) ( -3 ) ( -2 ) ( -1 ) 0 1 2 3 4 5 6 15))

end

(* Module for declaring a program function (and possibly an axiom) for "set_fuel_price" defined at pump.ads:14, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__set_fuel_price__axiom
 use import "_gnatprove_standard".Main
 use        Pump__pump
 use        Pump__pump__axiom

 val set_fuel_price #"pump.ads" 14 0 0# 
   (pump_r__split_fields : Pump__pump.__split_fields__ref) (price : real) : unit
  requires { true }
  ensures { (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content } True True True) }
  writes {pump_r__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "set_pump_state" defined at pump.ads:15, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__set_pump_state__axiom
 use import "_gnatprove_standard".Main
 use        Pump__pump
 use        Pump__pump__axiom

 val set_pump_state #"pump.ads" 15 0 0# 
   (pump_r__split_fields : Pump__pump.__split_fields__ref) (statetype : int) : unit
  requires { true }
  ensures { (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content } True True True) }
  writes {pump_r__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "set_pumped" defined at pump.ads:16, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__set_pumped__axiom
 use import "_gnatprove_standard".Main
 use        Pump__pump
 use        Pump__pump__axiom

 val set_pumped #"pump.ads" 16 0 0# 
   (pump_r__split_fields : Pump__pump.__split_fields__ref) (amount : real) : unit
  requires { true }
  ensures { (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content } True True True) }
  writes {pump_r__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "set_pump_nozzle_state" defined at pump.ads:17, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__set_pump_nozzle_state__axiom
 use import "_gnatprove_standard".Main
 use        Pump__pump
 use        Pump__pump__axiom

 val set_pump_nozzle_state #"pump.ads" 17 0 0# 
   (pump_r__split_fields : Pump__pump.__split_fields__ref) (nozzletype : int) : unit
  requires { true }
  ensures { (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content } True True True) }
  writes {pump_r__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "append_reservoir" defined at pump.ads:19, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__append_reservoir__axiom
 use import "_gnatprove_standard".Main
 use        Pump__pump
 use        Pump__pump__axiom

 val append_reservoir #"pump.ads" 19 0 0# 
   (pump_r__split_fields : Pump__pump.__split_fields__ref) (fueltype : int) : unit
  requires { true }
  ensures { (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content } True True True) }
  writes {pump_r__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "set_reservoir_size" defined at pump.ads:21, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__set_reservoir_size__axiom
 use import "_gnatprove_standard".Main
 use        Pump__pump
 use        Pump__pump__axiom

 val set_reservoir_size #"pump.ads" 21 0 0# 
   (pump_r__split_fields : Pump__pump.__split_fields__ref) (size : real) : unit
  requires { true }
  ensures { (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content } True True True) }
  writes {pump_r__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "get_tanks_size" defined at pump.ads:32, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__get_tanks_size__axiom
 use import "_gnatprove_standard".Main
 use        Pump__float_number
 use        Pump__float_number__axiom
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__get_tanks_size

 val get_tanks_size #"pump.ads" 32 0 0# 
   (pump_r : Pump__pump.pump) : Pump__float_number.float_number
  requires { true }
  ensures { ( (result = (Pump__get_tanks_size.get_tanks_size pump_r)) /\ (Pump__float_number__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_tanks_size__post_axiom :
  (forall pump_r : Pump__pump.pump [(Pump__get_tanks_size.get_tanks_size pump_r)].
   ( (Pump__pump__axiom.dynamic_invariant pump_r True True True) -> (let result = (Pump__get_tanks_size.get_tanks_size pump_r) in (
    (Pump__float_number__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "remove_petrol_reservoir" defined at pump.ads:23, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__remove_petrol_reservoir__axiom
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        Pump__float_number
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__get_tanks_size

 val remove_petrol_reservoir #"pump.ads" 23 0 0# 
   (pump_r__split_fields : Pump__pump.__split_fields__ref) (amount : real) : unit
  requires { (amount <=. (Pump__float_number.to_real (Pump__get_tanks_size.get_tanks_size { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content }))) }
  ensures { ( ((Pump__float_number.to_real (Pump__get_tanks_size.get_tanks_size { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content })) >=. (0.0E-2)) /\ (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content } True True True) ) }
  writes {pump_r__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "get_state" defined at pump.ads:29, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__get_state__axiom
 use import "_gnatprove_standard".Main
 use        Pump__state_type__axiom
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__get_state

 val get_state #"pump.ads" 29 0 0# 
   (pump_r : Pump__pump.pump) : int
  requires { true }
  ensures { ( (result = (Pump__get_state.get_state pump_r)) /\ (Pump__state_type__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_state__post_axiom :
  (forall pump_r : Pump__pump.pump [(Pump__get_state.get_state pump_r)].
   ( (Pump__pump__axiom.dynamic_invariant pump_r True True True) -> (let result = (Pump__get_state.get_state pump_r) in (
    (Pump__state_type__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "get_current_nozzle_state" defined at pump.ads:30, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__get_current_nozzle_state__axiom
 use import "_gnatprove_standard".Main
 use        Pump__nozzle_type__axiom
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__get_current_nozzle_state

 val get_current_nozzle_state #"pump.ads" 30 0 0# 
   (pump_r : Pump__pump.pump) : int
  requires { true }
  ensures { ( (result = (Pump__get_current_nozzle_state.get_current_nozzle_state pump_r)) /\ (Pump__nozzle_type__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_current_nozzle_state__post_axiom :
  (forall pump_r : Pump__pump.pump [(Pump__get_current_nozzle_state.get_current_nozzle_state pump_r)].
   ( (Pump__pump__axiom.dynamic_invariant pump_r True True True) -> (let result = (Pump__get_current_nozzle_state.get_current_nozzle_state pump_r) in (
    (Pump__nozzle_type__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "get_unit_price" defined at pump.ads:31, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__get_unit_price__axiom
 use import "_gnatprove_standard".Main
 use        Pump__float_number
 use        Pump__float_number__axiom
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__get_unit_price

 val get_unit_price #"pump.ads" 31 0 0# 
   (pump_r : Pump__pump.pump) : Pump__float_number.float_number
  requires { true }
  ensures { ( (result = (Pump__get_unit_price.get_unit_price pump_r)) /\ (Pump__float_number__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_unit_price__post_axiom :
  (forall pump_r : Pump__pump.pump [(Pump__get_unit_price.get_unit_price pump_r)].
   ( (Pump__pump__axiom.dynamic_invariant pump_r True True True) -> (let result = (Pump__get_unit_price.get_unit_price pump_r) in (
    (Pump__float_number__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "get_resevoir_category" defined at pump.ads:33, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__get_resevoir_category__axiom
 use import "_gnatprove_standard".Main
 use        Pump__fuel_types__axiom
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__get_resevoir_category

 val get_resevoir_category #"pump.ads" 33 0 0# 
   (pump_r : Pump__pump.pump) : int
  requires { true }
  ensures { ( (result = (Pump__get_resevoir_category.get_resevoir_category pump_r)) /\ (Pump__fuel_types__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_resevoir_category__post_axiom :
  (forall pump_r : Pump__pump.pump [(Pump__get_resevoir_category.get_resevoir_category pump_r)].
   ( (Pump__pump__axiom.dynamic_invariant pump_r True True True) -> (let result = (Pump__get_resevoir_category.get_resevoir_category pump_r) in (
    (Pump__fuel_types__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "print" defined at sprint.ads:3, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Sprint__print__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string

 val print #"sprint.ads" 3 0 0# 
   (s : Standard__string.string) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "print_float_type" defined at sprint.ads:4, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Sprint__print_float_type__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string

 val print_float_type #"sprint.ads" 4 0 0# 
   (s1 : Standard__string.string) (s2 : real) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "print_state_type" defined at sprint.ads:5, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Sprint__print_state_type__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string

 val print_state_type #"sprint.ads" 5 0 0# 
   (s1 : Standard__string.string) (s2 : int) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "print_nozzle_type" defined at sprint.ads:6, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Sprint__print_nozzle_type__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string

 val print_nozzle_type #"sprint.ads" 6 0 0# 
   (s1 : Standard__string.string) (s2 : int) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "print_fuel_type" defined at sprint.ads:7, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Sprint__print_fuel_type__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string

 val print_fuel_type #"sprint.ads" 7 0 0# 
   (s1 : Standard__string.string) (s2 : int) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "Olt" defined at system.ads:77, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Olt__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__Olt

 val olt #"system.ads" 77 0 0# 
   (left : BV32.t) (right : BV32.t) : bool
  requires { true }
  ensures { (result = (System__Olt.olt left right)) }

end

(* Module for declaring a program function (and possibly an axiom) for "Ole" defined at system.ads:78, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Ole__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__Ole

 val ole #"system.ads" 78 0 0# 
   (left : BV32.t) (right : BV32.t) : bool
  requires { true }
  ensures { (result = (System__Ole.ole left right)) }

end

(* Module for declaring a program function (and possibly an axiom) for "Ogt" defined at system.ads:79, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Ogt__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__Ogt

 val ogt #"system.ads" 79 0 0# 
   (left : BV32.t) (right : BV32.t) : bool
  requires { true }
  ensures { (result = (System__Ogt.ogt left right)) }

end

(* Module for declaring a program function (and possibly an axiom) for "Oge" defined at system.ads:80, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Oge__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__Oge

 val oge #"system.ads" 80 0 0# 
   (left : BV32.t) (right : BV32.t) : bool
  requires { true }
  ensures { (result = (System__Oge.oge left right)) }

end

(* Module for declaring a program function (and possibly an axiom) for "Oeq" defined at system.ads:81, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Oeq__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__Oeq

 val oeq #"system.ads" 81 0 0# 
   (left : BV32.t) (right : BV32.t) : bool
  requires { true }
  ensures { (result = (System__Oeq.oeq left right)) }

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "pump" defined at pump.ads:1, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Pump__package_def
 use import "_gnatprove_standard".Main

 let def #"system.ads" 81 0 0# "GP_Subp:pump.ads:1" "W:diverges:N" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( "GP_Sloc:pump.adb:150:1" () )
end

(* Module for checking contracts and absence of run-time errors in subprogram "set_fuel_price" defined at pump.ads:14, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump__set_fuel_price__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Pump__float_number
 use        Pump__float_number__axiom
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__set_fuel_price__pump_r
 use        Pump__set_fuel_price__price
 use        Sprint__print_float_type__axiom
 use        Temp___250
 use        Standard__positive__axiom
 use        Standard__character__axiom
 use        Standard__string__axiom
 use        Standard__integer__axiom
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__set_fuel_price__pump_r__axiom
 use        Pump__set_fuel_price__price__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom
 use        Sprint__print_float_type__axiom

 let def #"system.ads" 81 0 0# "W:diverges:N" "GP_Subp:pump.ads:14" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump.ads:14 *)
  ;
  #"pump.ads" 8 0 0# assume { (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = Pump__set_fuel_price__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content } True False True) };
  #"pump.ads" 6 0 0# assume { (Pump__float_number__axiom.dynamic_invariant Pump__set_fuel_price__price.price True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump.ads:14 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump.ads:14 *)
  ;
  #"pump.ads" 14 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump.ads:14 *)
  ;
  #"pump.ads" 14 0 0# assume { true };
  () (* checking of pragma precondition pump.ads:14 *)
  ;
  try
   ( ( "GP_Sloc:pump.adb:122:25" (let temp___249 = (let temp___248 = { Pump__pump.__split_fields = Pump__set_fuel_price__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content } in (
    ( #"pump.ads" 44 0 0# abstract ensures {true}(let _ = (Pump__pump.rec__unit_price((Pump__pump.__split_fields(temp___248)))) in (
     ()))
     end ;
    { ( temp___248 ) with Pump__pump.__split_fields = { ( (Pump__pump.__split_fields(temp___248)) ) with Pump__pump.rec__unit_price = Pump__set_fuel_price__price.price } } )))
    in (
    #"pump.adb" 122 0 0# Pump__set_fuel_price__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content <- ( (Pump__pump.__split_fields(temp___249)) )))
    );
   ( "GP_Sloc:pump.adb:123:7" (Sprint__print_float_type__axiom.print_float_type((Standard__string.of_array(Temp___250.temp___250) (1) (17))) ((Pump__float_number.to_real((Pump__pump.rec__unit_price((Pump__pump.__split_fields({ Pump__pump.__split_fields = Pump__set_fuel_price__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content })))))))) );
   #"pump.adb" 118 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump.ads:14 *)
  ;
  #"pump.adb" 118 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "set_pump_state" defined at pump.ads:15, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump__set_pump_state__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Pump__state_type
 use        Pump__state_type__axiom
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__set_pump_state__pump_r
 use        Pump__set_pump_state__statetype
 use        Sprint__print_state_type__axiom
 use        Temp___253
 use        Standard__positive__axiom
 use        Standard__character__axiom
 use        Standard__string__axiom
 use        Standard__integer__axiom
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__set_pump_state__pump_r__axiom
 use        Pump__set_pump_state__statetype__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom
 use        Sprint__print_state_type__axiom

 let def #"pump.adb" 118 0 0# "W:diverges:N" "GP_Subp:pump.ads:15" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump.ads:15 *)
  ;
  #"pump.ads" 8 0 0# assume { (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = Pump__set_pump_state__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content } True False True) };
  #"pump.ads" 10 0 0# assume { (Pump__state_type__axiom.dynamic_invariant Pump__set_pump_state__statetype.statetype True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump.ads:15 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump.ads:15 *)
  ;
  #"pump.ads" 15 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump.ads:15 *)
  ;
  #"pump.ads" 15 0 0# assume { true };
  () (* checking of pragma precondition pump.ads:15 *)
  ;
  try
   ( ( "GP_Sloc:pump.adb:15:25" (let temp___252 = (let temp___251 = { Pump__pump.__split_fields = Pump__set_pump_state__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content } in (
    ( #"pump.ads" 44 0 0# abstract ensures {true}(let _ = (Pump__pump.rec__pump_state((Pump__pump.__split_fields(temp___251)))) in (
     ()))
     end ;
    { ( temp___251 ) with Pump__pump.__split_fields = { ( (Pump__pump.__split_fields(temp___251)) ) with Pump__pump.rec__pump_state = (Pump__state_type.of_rep Pump__set_pump_state__statetype.statetype) } } )))
    in (
    #"pump.adb" 15 0 0# Pump__set_pump_state__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content <- ( (Pump__pump.__split_fields(temp___252)) )))
    );
   ( "GP_Sloc:pump.adb:16:7" (Sprint__print_state_type__axiom.print_state_type((Standard__string.of_array(Temp___253.temp___253) (1) (13))) (Pump__set_pump_state__statetype.statetype)) );
   #"pump.adb" 10 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump.ads:15 *)
  ;
  #"pump.adb" 10 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "set_pumped" defined at pump.ads:16, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump__set_pumped__subprogram_def
 use import "_gnatprove_standard".Main
 use        Pump__float_number
 use        Pump__float_number__axiom
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__set_pumped__pump_r
 use        Pump__set_pumped__amount
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__set_pumped__pump_r__axiom
 use        Pump__set_pumped__amount__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom

 let def #"pump.adb" 10 0 0# "W:diverges:N" "GP_Subp:pump.ads:16" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump.ads:16 *)
  ;
  #"pump.ads" 8 0 0# assume { (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = Pump__set_pumped__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content } True False True) };
  #"pump.ads" 6 0 0# assume { (Pump__float_number__axiom.dynamic_invariant Pump__set_pumped__amount.amount True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump.ads:16 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump.ads:16 *)
  ;
  #"pump.ads" 16 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump.ads:16 *)
  ;
  #"pump.ads" 16 0 0# assume { true };
  () (* checking of pragma precondition pump.ads:16 *)
  ;
  try
   ( ( "GP_Sloc:pump.adb:95:21" (let temp___255 = (let temp___254 = { Pump__pump.__split_fields = Pump__set_pumped__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content } in (
    ( #"pump.ads" 44 0 0# abstract ensures {true}(let _ = (Pump__pump.rec__pumped((Pump__pump.__split_fields(temp___254)))) in (
     ()))
     end ;
    { ( temp___254 ) with Pump__pump.__split_fields = { ( (Pump__pump.__split_fields(temp___254)) ) with Pump__pump.rec__pumped = Pump__set_pumped__amount.amount } } )))
    in (
    #"pump.adb" 95 0 0# Pump__set_pumped__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content <- ( (Pump__pump.__split_fields(temp___255)) )))
    );
   #"pump.adb" 90 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump.ads:16 *)
  ;
  #"pump.adb" 90 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "set_pump_nozzle_state" defined at pump.ads:17, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump__set_pump_nozzle_state__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Pump__nozzle_type
 use        Pump__nozzle_type__axiom
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__set_pump_nozzle_state__pump_r
 use        Pump__set_pump_nozzle_state__nozzletype
 use        Sprint__print_nozzle_type__axiom
 use        Temp___258
 use        Standard__positive__axiom
 use        Standard__character__axiom
 use        Standard__string__axiom
 use        Standard__integer__axiom
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__set_pump_nozzle_state__pump_r__axiom
 use        Pump__set_pump_nozzle_state__nozzletype__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom
 use        Sprint__print_nozzle_type__axiom

 let def #"pump.adb" 90 0 0# "W:diverges:N" "GP_Subp:pump.ads:17" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump.ads:17 *)
  ;
  #"pump.ads" 8 0 0# assume { (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = Pump__set_pump_nozzle_state__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content } True False True) };
  #"pump.ads" 11 0 0# assume { (Pump__nozzle_type__axiom.dynamic_invariant Pump__set_pump_nozzle_state__nozzletype.nozzletype True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump.ads:17 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump.ads:17 *)
  ;
  #"pump.ads" 17 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump.ads:17 *)
  ;
  #"pump.ads" 17 0 0# assume { true };
  () (* checking of pragma precondition pump.ads:17 *)
  ;
  try
   ( ( "GP_Sloc:pump.adb:29:27" (let temp___257 = (let temp___256 = { Pump__pump.__split_fields = Pump__set_pump_nozzle_state__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content } in (
    ( #"pump.ads" 44 0 0# abstract ensures {true}(let _ = (Pump__pump.rec__nozzle_state((Pump__pump.__split_fields(temp___256)))) in (
     ()))
     end ;
    { ( temp___256 ) with Pump__pump.__split_fields = { ( (Pump__pump.__split_fields(temp___256)) ) with Pump__pump.rec__nozzle_state = (Pump__nozzle_type.of_rep Pump__set_pump_nozzle_state__nozzletype.nozzletype) } } )))
    in (
    #"pump.adb" 29 0 0# Pump__set_pump_nozzle_state__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content <- ( (Pump__pump.__split_fields(temp___257)) )))
    );
   ( "GP_Sloc:pump.adb:30:7" (Sprint__print_nozzle_type__axiom.print_nozzle_type((Standard__string.of_array(Temp___258.temp___258) (1) (20))) (Pump__set_pump_nozzle_state__nozzletype.nozzletype)) );
   #"pump.adb" 24 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump.ads:17 *)
  ;
  #"pump.adb" 24 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "append_reservoir" defined at pump.ads:19, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump__append_reservoir__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use import "real".RealInfix
 use        Standard__string
 use        Pump__float_number
 use        Pump__fuel_types
 use        Pump__fuel_types__axiom
 use        Pump__reservoir
 use        Pump__reservoir__axiom
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__append_reservoir__pump_r
 use        Pump__append_reservoir__fueltype
 use        Sprint__print_fuel_type__axiom
 use        Pump__append_reservoir__r
 use        Temp___267
 use        Standard__positive__axiom
 use        Standard__character__axiom
 use        Standard__string__axiom
 use        Standard__integer__axiom
 use        Pump__append_reservoir__r__axiom
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__append_reservoir__pump_r__axiom
 use        Pump__append_reservoir__fueltype__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom
 use        Sprint__print_fuel_type__axiom

 let def #"pump.adb" 24 0 0# "W:diverges:N" "GP_Subp:pump.ads:19" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump.ads:19 *)
  ;
  #"pump.ads" 8 0 0# assume { (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = Pump__append_reservoir__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content } True False True) };
  #"pump.ads" 7 0 0# assume { (Pump__fuel_types__axiom.dynamic_invariant Pump__append_reservoir__fueltype.fueltype True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump.ads:19 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump.ads:19 *)
  ;
  #"pump.ads" 19 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump.ads:19 *)
  ;
  #"pump.ads" 19 0 0# assume { true };
  () (* checking of pragma precondition pump.ads:19 *)
  ;
  try
   ( #"pump.ads" 19 0 0# abstract ensures {true}(let _ = () in (
    ()))
    end ;
   #"pump.adb" 103 0 0# assume { (Pump__reservoir__axiom.default_initial_assumption { Pump__reservoir.__split_fields = Pump__append_reservoir__r.r__split_fields.Pump__reservoir.__split_fields__content } False) };
   #"pump.ads" 9 0 0# assume { (Pump__reservoir__axiom.dynamic_invariant { Pump__reservoir.__split_fields = Pump__append_reservoir__r.r__split_fields.Pump__reservoir.__split_fields__content } False False True) };
   ( "GP_Sloc:pump.adb:107:28" (let temp___262 = (let temp___261 = { Pump__reservoir.__split_fields = Pump__append_reservoir__r.r__split_fields.Pump__reservoir.__split_fields__content } in (
    ( #"pump.ads" 37 0 0# abstract ensures {true}(let _ = (Pump__reservoir.rec__reservoir_category((Pump__reservoir.__split_fields(temp___261)))) in (
     ()))
     end ;
    { ( temp___261 ) with Pump__reservoir.__split_fields = { ( (Pump__reservoir.__split_fields(temp___261)) ) with Pump__reservoir.rec__reservoir_category = (Pump__fuel_types.of_rep Pump__append_reservoir__fueltype.fueltype) } } )))
    in (
    #"pump.adb" 107 0 0# Pump__append_reservoir__r.r__split_fields.Pump__reservoir.__split_fields__content <- ( (Pump__reservoir.__split_fields(temp___262)) )))
    );
   ( "GP_Sloc:pump.adb:108:14" (let temp___264 = (let temp___263 = { Pump__reservoir.__split_fields = Pump__append_reservoir__r.r__split_fields.Pump__reservoir.__split_fields__content } in (
    ( #"pump.ads" 37 0 0# abstract ensures {true}(let _ = (Pump__reservoir.rec__total((Pump__reservoir.__split_fields(temp___263)))) in (
     ()))
     end ;
    { ( temp___263 ) with Pump__reservoir.__split_fields = { ( (Pump__reservoir.__split_fields(temp___263)) ) with Pump__reservoir.rec__total = (Pump__float_number.of_real((1000.0))) } } )))
    in (
    #"pump.adb" 108 0 0# Pump__append_reservoir__r.r__split_fields.Pump__reservoir.__split_fields__content <- ( (Pump__reservoir.__split_fields(temp___264)) )))
    );
   ( "GP_Sloc:pump.adb:109:29" (let temp___266 = (let temp___265 = { Pump__pump.__split_fields = Pump__append_reservoir__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content } in (
    ( #"pump.ads" 44 0 0# abstract ensures {true}(let _ = (Pump__pump.rec__reservoir_info((Pump__pump.__split_fields(temp___265)))) in (
     ()))
     end ;
    { ( temp___265 ) with Pump__pump.__split_fields = { ( (Pump__pump.__split_fields(temp___265)) ) with Pump__pump.rec__reservoir_info = { Pump__reservoir.__split_fields = Pump__append_reservoir__r.r__split_fields.Pump__reservoir.__split_fields__content } } } )))
    in (
    #"pump.adb" 109 0 0# Pump__append_reservoir__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content <- ( (Pump__pump.__split_fields(temp___266)) )))
    );
   ( "GP_Sloc:pump.adb:110:7" (Sprint__print_fuel_type__axiom.print_fuel_type((Standard__string.of_array(Temp___267.temp___267) (1) (15))) (Pump__append_reservoir__fueltype.fueltype)) );
   #"pump.adb" 100 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump.ads:19 *)
  ;
  #"pump.adb" 100 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "set_reservoir_size" defined at pump.ads:21, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump__set_reservoir_size__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Pump__float_number
 use        Pump__float_number__axiom
 use        Pump__reservoir
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__set_reservoir_size__pump_r
 use        Pump__set_reservoir_size__size
 use        Sprint__print_float_type__axiom
 use        Temp___271
 use        Standard__positive__axiom
 use        Standard__character__axiom
 use        Standard__string__axiom
 use        Standard__integer__axiom
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__set_reservoir_size__pump_r__axiom
 use        Pump__set_reservoir_size__size__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom
 use        Sprint__print_float_type__axiom

 let def #"pump.adb" 100 0 0# "W:diverges:N" "GP_Subp:pump.ads:21" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump.ads:21 *)
  ;
  #"pump.ads" 8 0 0# assume { (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = Pump__set_reservoir_size__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content } True False True) };
  #"pump.ads" 6 0 0# assume { (Pump__float_number__axiom.dynamic_invariant Pump__set_reservoir_size__size.size True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump.ads:21 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump.ads:21 *)
  ;
  #"pump.ads" 21 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump.ads:21 *)
  ;
  #"pump.ads" 21 0 0# assume { true };
  () (* checking of pragma precondition pump.ads:21 *)
  ;
  try
   ( ( "GP_Sloc:pump.adb:43:35" (let temp___270 = (let temp___269 = { Pump__pump.__split_fields = Pump__set_reservoir_size__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content } in (
    ( #"pump.ads" 44 0 0# abstract ensures {true}(let _ = (Pump__pump.rec__reservoir_info((Pump__pump.__split_fields(temp___269)))) in (
     ()))
     end ;
    { ( temp___269 ) with Pump__pump.__split_fields = { ( (Pump__pump.__split_fields(temp___269)) ) with Pump__pump.rec__reservoir_info = (let temp___268 = (Pump__pump.rec__reservoir_info (Pump__pump.__split_fields { Pump__pump.__split_fields = Pump__set_reservoir_size__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content })) in (
     ( #"pump.ads" 44 0 0# abstract ensures {true}(let _ = (Pump__reservoir.rec__total((Pump__reservoir.__split_fields(temp___268)))) in (
      ()))
      end ;
     { ( temp___268 ) with Pump__reservoir.__split_fields = { ( (Pump__reservoir.__split_fields(temp___268)) ) with Pump__reservoir.rec__total = Pump__set_reservoir_size__size.size } } )))
     } } )))
    in (
    #"pump.adb" 43 0 0# Pump__set_reservoir_size__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content <- ( (Pump__pump.__split_fields(temp___270)) )))
    );
   ( "GP_Sloc:pump.adb:44:7" (Sprint__print_float_type__axiom.print_float_type((Standard__string.of_array(Temp___271.temp___271) (1) (16))) ((Pump__float_number.to_real(Pump__set_reservoir_size__size.size)))) );
   #"pump.adb" 38 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump.ads:21 *)
  ;
  #"pump.adb" 38 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_tanks_size" defined at pump.ads:32, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump__get_tanks_size__subprogram_def
 use import "_gnatprove_standard".Main
 use        Pump__float_number
 use        Pump__reservoir
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__get_tanks_size__pump_r
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__get_tanks_size__pump_r__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom

 val pump__get_tanks_size__result #"pump.adb" 38 0 0#  : Pump__float_number.float_number__ref 
 
 let def #"pump.ads" 6 0 0# "W:diverges:N" "GP_Subp:pump.ads:32" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump.ads:32 *)
  ;
  #"pump.ads" 8 0 0# assume { (Pump__pump__axiom.dynamic_invariant Pump__get_tanks_size__pump_r.pump_r True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump.ads:32 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump.ads:32 *)
  ;
  #"pump.ads" 32 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump.ads:32 *)
  ;
  #"pump.ads" 32 0 0# assume { true };
  () (* checking of pragma precondition pump.ads:32 *)
  ;
  try
   ( ( "GP_Sloc:pump.adb:62:7" ( #"pump.adb" 62 0 0# pump__get_tanks_size__result.Pump__float_number.float_number__content <- ( (Pump__reservoir.rec__total((Pump__reservoir.__split_fields((Pump__pump.rec__reservoir_info((Pump__pump.__split_fields(Pump__get_tanks_size__pump_r.pump_r)))))))) );
   #"pump.adb" 62 0 0# raise Return__exc ) );
   #"pump.adb" 59 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump.ads:32 *)
  ;
  #"pump.adb" 59 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  pump__get_tanks_size__result.Pump__float_number.float_number__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "remove_petrol_reservoir" defined at pump.ads:23, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump__remove_petrol_reservoir__subprogram_def
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        Pump__Tfloat_numberB
 use        Pump__float_number
 use        Pump__float_number__axiom
 use        Pump__reservoir
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__remove_petrol_reservoir__pump_r
 use        Pump__remove_petrol_reservoir__amount
 use        Pump__get_tanks_size
 use        Pump__get_tanks_size__axiom
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__remove_petrol_reservoir__pump_r__axiom
 use        Pump__remove_petrol_reservoir__amount__axiom
 use        Pump__get_tanks_size__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom
 use        Pump__Tfloat_numberB__axiom

 let def #"pump.ads" 6 0 0# "W:diverges:N" "GP_Subp:pump.ads:23" 
   (__void_param : unit)
  requires { true }
  ensures { ( #"pump.ads" 26 0 0# "model_vc_post" "keep_on_simp" "GP_Sloc:pump.ads:26:12" "GP_Reason:VC_POSTCONDITION" "GP_Id:1" "comment:     post=>(GET_TANKS_SIZE(pump_r)>=0.00);
           ^ pump.ads:26:12:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" ( "GP_Pretty_Ada:3565" "GP_Sloc:pump.ads:26:12" ((Pump__float_number.to_real (Pump__get_tanks_size.get_tanks_size { Pump__pump.__split_fields = Pump__remove_petrol_reservoir__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content })) >=. (0.0E-2)) ) ) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump.ads:23 *)
  ;
  #"pump.ads" 8 0 0# assume { (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = Pump__remove_petrol_reservoir__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content } True False True) };
  #"pump.ads" 6 0 0# assume { (Pump__float_number__axiom.dynamic_invariant Pump__remove_petrol_reservoir__amount.amount True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump.ads:23 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump.ads:23 *)
  ;
  #"pump.ads" 23 0 0# abstract ensures {true}(let _ = ((Pump__float_number.to_real(Pump__remove_petrol_reservoir__amount.amount)) <=. (Pump__float_number.to_real((Pump__get_tanks_size__axiom.get_tanks_size({ Pump__pump.__split_fields = Pump__remove_petrol_reservoir__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content }))))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump.ads:23 *)
  ;
  #"pump.ads" 44 0 0# assume { ((Pump__float_number.to_real Pump__remove_petrol_reservoir__amount.amount) <=. (Pump__float_number.to_real (Pump__get_tanks_size.get_tanks_size { Pump__pump.__split_fields = Pump__remove_petrol_reservoir__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content }))) };
  () (* checking of pragma precondition pump.ads:23 *)
  ;
  try
   ( ( "GP_Sloc:pump.adb:81:7" (if (((Pump__float_number.to_real((Pump__reservoir.rec__total((Pump__reservoir.__split_fields((Pump__pump.rec__reservoir_info((Pump__pump.__split_fields({ Pump__pump.__split_fields = Pump__remove_petrol_reservoir__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content })))))))))) >. (Pump__float_number.to_real(Pump__remove_petrol_reservoir__amount.amount)))) then (
    ( "GP_Sloc:pump.adb:82:38" (let temp___274 = (let temp___273 = { Pump__pump.__split_fields = Pump__remove_petrol_reservoir__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content } in (
     ( #"pump.ads" 44 0 0# abstract ensures {true}(let _ = (Pump__pump.rec__reservoir_info((Pump__pump.__split_fields(temp___273)))) in (
      ()))
      end ;
     { ( temp___273 ) with Pump__pump.__split_fields = { ( (Pump__pump.__split_fields(temp___273)) ) with Pump__pump.rec__reservoir_info = (let temp___272 = (Pump__pump.rec__reservoir_info (Pump__pump.__split_fields { Pump__pump.__split_fields = Pump__remove_petrol_reservoir__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content })) in (
      ( #"pump.ads" 44 0 0# abstract ensures {true}(let _ = (Pump__reservoir.rec__total((Pump__reservoir.__split_fields(temp___272)))) in (
       ()))
       end ;
      { ( temp___272 ) with Pump__reservoir.__split_fields = { ( (Pump__reservoir.__split_fields(temp___272)) ) with Pump__reservoir.rec__total = (Pump__float_number.of_real(( #"pump.adb" 82 0 0# "model_vc" "keep_on_simp" "GP_Sloc:pump.adb:82:69" "GP_Reason:VC_RANGE_CHECK" "GP_Id:0" "comment:         pump_r.RESERVOIR_INFO.TOTAL := pump_r.RESERVOIR_INFO.TOTAL - AMOUNT;
                                                                    ^ pump.adb:82:69:VC_RANGE_CHECK" "GP_Shape:if__pump_r_assign__sub" (Pump__float_number.range_check_((Pump__Tfloat_numberB.round_real(((Pump__float_number.to_real((Pump__reservoir.rec__total((Pump__reservoir.__split_fields((Pump__pump.rec__reservoir_info((Pump__pump.__split_fields({ Pump__pump.__split_fields = Pump__remove_petrol_reservoir__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content })))))))))) -. (Pump__float_number.to_real(Pump__remove_petrol_reservoir__amount.amount))))))) ))) } } )))
      } } )))
     in (
     #"pump.adb" 82 0 0# Pump__remove_petrol_reservoir__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content <- ( (Pump__pump.__split_fields(temp___274)) )))
     )) else (
    ())) );
   #"pump.adb" 76 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump.ads:23 *)
  ;
  #"pump.adb" 76 0 0# abstract ensures {true}(let _ = ((Pump__float_number.to_real((Pump__get_tanks_size__axiom.get_tanks_size({ Pump__pump.__split_fields = Pump__remove_petrol_reservoir__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content })))) >=. (0.0E-2)) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_state" defined at pump.ads:29, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump__get_state__subprogram_def
 use import "_gnatprove_standard".Main
 use        Pump__state_type
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__get_state__pump_r
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__get_state__pump_r__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom

 val pump__get_state__result #"pump.ads" 26 0 0# "model" "model_trace:3132@result"  : int__ref 
 
 let def #"pump.ads" 10 0 0# "W:diverges:N" "GP_Subp:pump.ads:29" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump.ads:29 *)
  ;
  #"pump.ads" 8 0 0# assume { (Pump__pump__axiom.dynamic_invariant Pump__get_state__pump_r.pump_r True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump.ads:29 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump.ads:29 *)
  ;
  #"pump.ads" 29 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump.ads:29 *)
  ;
  #"pump.ads" 29 0 0# assume { true };
  () (* checking of pragma precondition pump.ads:29 *)
  ;
  try
   ( ( "GP_Sloc:pump.adb:146:7" ( #"pump.adb" 146 0 0# pump__get_state__result.int__content <- ( (Pump__state_type.to_rep((Pump__pump.rec__pump_state((Pump__pump.__split_fields(Pump__get_state__pump_r.pump_r)))))) );
   #"pump.adb" 146 0 0# raise Return__exc ) );
   #"pump.adb" 143 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump.ads:29 *)
  ;
  #"pump.adb" 143 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  pump__get_state__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_current_nozzle_state" defined at pump.ads:30, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump__get_current_nozzle_state__subprogram_def
 use import "_gnatprove_standard".Main
 use        Pump__nozzle_type
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__get_current_nozzle_state__pump_r
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__get_current_nozzle_state__pump_r__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom

 val pump__get_current_nozzle_state__result #"pump.ads" 10 0 0# "model" "model_trace:3151@result"  : int__ref 
 
 let def #"pump.ads" 11 0 0# "W:diverges:N" "GP_Subp:pump.ads:30" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump.ads:30 *)
  ;
  #"pump.ads" 8 0 0# assume { (Pump__pump__axiom.dynamic_invariant Pump__get_current_nozzle_state__pump_r.pump_r True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump.ads:30 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump.ads:30 *)
  ;
  #"pump.ads" 30 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump.ads:30 *)
  ;
  #"pump.ads" 30 0 0# assume { true };
  () (* checking of pragma precondition pump.ads:30 *)
  ;
  try
   ( ( "GP_Sloc:pump.adb:136:8" ( #"pump.adb" 136 0 0# pump__get_current_nozzle_state__result.int__content <- ( (Pump__nozzle_type.to_rep((Pump__pump.rec__nozzle_state((Pump__pump.__split_fields(Pump__get_current_nozzle_state__pump_r.pump_r)))))) );
   #"pump.adb" 136 0 0# raise Return__exc ) );
   #"pump.adb" 131 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump.ads:30 *)
  ;
  #"pump.adb" 131 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  pump__get_current_nozzle_state__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_unit_price" defined at pump.ads:31, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump__get_unit_price__subprogram_def
 use import "_gnatprove_standard".Main
 use        Pump__float_number
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__get_unit_price__pump_r
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__get_unit_price__pump_r__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom

 val pump__get_unit_price__result #"pump.ads" 11 0 0#  : Pump__float_number.float_number__ref 
 
 let def #"pump.ads" 6 0 0# "W:diverges:N" "GP_Subp:pump.ads:31" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump.ads:31 *)
  ;
  #"pump.ads" 8 0 0# assume { (Pump__pump__axiom.dynamic_invariant Pump__get_unit_price__pump_r.pump_r True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump.ads:31 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump.ads:31 *)
  ;
  #"pump.ads" 31 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump.ads:31 *)
  ;
  #"pump.ads" 31 0 0# assume { true };
  () (* checking of pragma precondition pump.ads:31 *)
  ;
  try
   ( ( "GP_Sloc:pump.adb:53:7" ( #"pump.adb" 53 0 0# pump__get_unit_price__result.Pump__float_number.float_number__content <- ( (Pump__pump.rec__unit_price((Pump__pump.__split_fields(Pump__get_unit_price__pump_r.pump_r)))) );
   #"pump.adb" 53 0 0# raise Return__exc ) );
   #"pump.adb" 50 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump.ads:31 *)
  ;
  #"pump.adb" 50 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  pump__get_unit_price__result.Pump__float_number.float_number__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_resevoir_category" defined at pump.ads:33, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump__get_resevoir_category__subprogram_def
 use import "_gnatprove_standard".Main
 use        Pump__fuel_types
 use        Pump__reservoir
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__get_resevoir_category__pump_r
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__get_resevoir_category__pump_r__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom

 val pump__get_resevoir_category__result #"pump.ads" 6 0 0# "model" "model_trace:3208@result"  : int__ref 
 
 let def #"pump.ads" 7 0 0# "W:diverges:N" "GP_Subp:pump.ads:33" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump.ads:33 *)
  ;
  #"pump.ads" 8 0 0# assume { (Pump__pump__axiom.dynamic_invariant Pump__get_resevoir_category__pump_r.pump_r True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump.ads:33 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump.ads:33 *)
  ;
  #"pump.ads" 33 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump.ads:33 *)
  ;
  #"pump.ads" 33 0 0# assume { true };
  () (* checking of pragma precondition pump.ads:33 *)
  ;
  try
   ( ( "GP_Sloc:pump.adb:70:7" ( #"pump.adb" 70 0 0# pump__get_resevoir_category__result.int__content <- ( (Pump__fuel_types.to_rep((Pump__reservoir.rec__reservoir_category((Pump__reservoir.__split_fields((Pump__pump.rec__reservoir_info((Pump__pump.__split_fields(Pump__get_resevoir_category__pump_r.pump_r)))))))))) );
   #"pump.adb" 70 0 0# raise Return__exc ) );
   #"pump.adb" 67 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump.ads:33 *)
  ;
  #"pump.adb" 67 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  pump__get_resevoir_category__result.int__content )
end
