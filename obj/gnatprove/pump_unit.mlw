(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -128 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  127
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type short_short_integer__ref #"system.ads" 1 0 0# =
  { mutable short_short_integer__content "model_trace:" : short_short_integer }
 
 function short_short_integer__ref___projection #"system.ads" 1 0 0# 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc #"system.ads" 1 0 0# 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -32768 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  32767
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type short_integer__ref #"system.ads" 1 0 0# =
  { mutable short_integer__content "model_trace:" : short_integer }
 
 function short_integer__ref___projection #"system.ads" 1 0 0# 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc #"system.ads" 1 0 0# 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type integer__ref #"system.ads" 1 0 0# =
  { mutable integer__content "model_trace:" : integer }
 
 function integer__ref___projection #"system.ads" 1 0 0# 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc #"system.ads" 1 0 0# 
   (x : integer__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type long_integer__ref #"system.ads" 1 0 0# =
  { mutable long_integer__content "model_trace:" : long_integer }
 
 function long_integer__ref___projection #"system.ads" 1 0 0# 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc #"system.ads" 1 0 0# 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type long_long_integer__ref #"system.ads" 1 0 0# =
  { mutable long_long_integer__content "model_trace:" : long_long_integer }
 
 function long_long_integer__ref___projection #"system.ads" 1 0 0# 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc #"system.ads" 1 0 0# 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type natural__ref #"system.ads" 1 0 0# =
  { mutable natural__content "model_trace:" : natural }
 
 function natural__ref___projection #"system.ads" 1 0 0# 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc #"system.ads" 1 0 0# 
   (x : natural__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type positive__ref #"system.ads" 1 0 0# =
  { mutable positive__content "model_trace:" : positive }
 
 function positive__ref___projection #"system.ads" 1 0 0# 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc #"system.ads" 1 0 0# 
   (x : positive__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type short_float #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : real =
  (-.340282346638528859811704183484516925440.0)
 
 function last #"system.ads" 1 0 0# 
   : real =
  (340282346638528859811704183484516925440.0)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = short_float, 
 function round_real_tmp = Floating.round_single, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type short_float__ref #"system.ads" 1 0 0# =
  { mutable short_float__content "model_trace:" : short_float }
 
 function short_float__ref___projection #"system.ads" 1 0 0# 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc #"system.ads" 1 0 0# 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type float #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : real =
  (-.340282346638528859811704183484516925440.0)
 
 function last #"system.ads" 1 0 0# 
   : real =
  (340282346638528859811704183484516925440.0)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = float, 
 function round_real_tmp = Floating.round_single, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type float__ref #"system.ads" 1 0 0# =
  { mutable float__content "model_trace:" : float }
 
 function float__ref___projection #"system.ads" 1 0 0# 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc #"system.ads" 1 0 0# 
   (x : float__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type long_float #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : real =
  (-.179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0)
 
 function last #"system.ads" 1 0 0# 
   : real =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = long_float, 
 function round_real_tmp = Floating.round_double, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type long_float__ref #"system.ads" 1 0 0# =
  { mutable long_float__content "model_trace:" : long_float }
 
 function long_float__ref___projection #"system.ads" 1 0 0# 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc #"system.ads" 1 0 0# 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "long_long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_float
 use import "_gnatprove_standard".Main
 use import "real".RealInfix

 type long_long_float #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : real =
  (-.1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 function last #"system.ads" 1 0 0# 
   : real =
  (1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = long_long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type long_long_float__ref #"system.ads" 1 0 0# =
  { mutable long_long_float__content "model_trace:" : long_long_float }
 
 function long_long_float__ref___projection #"system.ads" 1 0 0# 
   (a : long_long_float__ref) : long_long_float =
  a.long_long_float__content
 
 meta "model_projection" function long_long_float__ref___projection
 
 meta "inline : no" function long_long_float__ref___projection
 
 val long_long_float__havoc #"system.ads" 1 0 0# 
   (x : long_long_float__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  255
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type character__ref #"system.ads" 1 0 0# =
  { mutable character__content "model_trace:" : character }
 
 function character__ref___projection #"system.ads" 1 0 0# 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc #"system.ads" 1 0 0# 
   (x : character__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  65535
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type wide_character__ref #"system.ads" 1 0 0# =
  { mutable wide_character__content "model_trace:" : wide_character }
 
 function wide_character__ref___projection #"system.ads" 1 0 0# 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc #"system.ads" 1 0 0# 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type wide_wide_character__ref #"system.ads" 1 0 0# =
  { mutable wide_wide_character__content "model_trace:" : wide_wide_character }
 
 function wide_wide_character__ref___projection #"system.ads" 1 0 0# 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc #"system.ads" 1 0 0# 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 function index_I1_one #"system.ads" 1 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__character.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string #"system.ads" 1 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string #"system.ads" 1 0 0# 
   (x : Main.__image) : string
 
 function from_string #"system.ads" 1 0 0# 
   (x : string) : Main.__image
 
 type string__ref #"system.ads" 1 0 0# =
  { mutable string__content "model_trace:" : string }
 
 function string__ref___projection #"system.ads" 1 0 0# 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc #"system.ads" 1 0 0# 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 function index_I1_one #"system.ads" 1 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 1 0 0# =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__wide_character.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Array__Int__Standard__wide_character

 type component_type #"system.ads" 1 0 0# =
  Standard__wide_character.wide_character
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string #"system.ads" 1 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref #"system.ads" 1 0 0# =
  { mutable wide_string__content "model_trace:" : wide_string }
 
 function wide_string__ref___projection #"system.ads" 1 0 0# 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc #"system.ads" 1 0 0# 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 function index_I1_one #"system.ads" 1 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 1 0 0# =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__wide_wide_character.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Array__Int__Standard__wide_wide_character

 type component_type #"system.ads" 1 0 0# =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string #"system.ads" 1 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref #"system.ads" 1 0 0# =
  { mutable wide_wide_string__content "model_trace:" : wide_wide_string }
 
 function wide_wide_string__ref___projection #"system.ads" 1 0 0# 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc #"system.ads" 1 0 0# 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration #"system.ads" 1 0 0# 
 
 function inv_small #"system.ads" 1 0 0# 
   : Main.__fixed =
  1000000000
 
 function first #"system.ads" 1 0 0# 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function inv_small = inv_small
 
 type duration__ref #"system.ads" 1 0 0# =
  { mutable duration__content "model_trace:" : duration }
 
 function duration__ref___projection #"system.ads" 1 0 0# 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc #"system.ads" 1 0 0# 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -128 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  127
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type integer_8__ref #"system.ads" 1 0 0# =
  { mutable integer_8__content "model_trace:" : integer_8 }
 
 function integer_8__ref___projection #"system.ads" 1 0 0# 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc #"system.ads" 1 0 0# 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -32768 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  32767
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type integer_16__ref #"system.ads" 1 0 0# =
  { mutable integer_16__content "model_trace:" : integer_16 }
 
 function integer_16__ref___projection #"system.ads" 1 0 0# 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc #"system.ads" 1 0 0# 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type integer_32__ref #"system.ads" 1 0 0# =
  { mutable integer_32__content "model_trace:" : integer_32 }
 
 function integer_32__ref___projection #"system.ads" 1 0 0# 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc #"system.ads" 1 0 0# 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type integer_64__ref #"system.ads" 1 0 0# =
  { mutable integer_64__content "model_trace:" : integer_64 }
 
 function integer_64__ref___projection #"system.ads" 1 0 0# 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc #"system.ads" 1 0 0# 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type universal_integer__ref #"system.ads" 1 0 0# =
  { mutable universal_integer__content "model_trace:" : universal_integer }
 
 function universal_integer__ref___projection #"system.ads" 1 0 0# 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc #"system.ads" 1 0 0# 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "universal_real", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_real
 use import "_gnatprove_standard".Main
 use import "real".RealInfix

 type universal_real #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : real =
  (-.1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 function last #"system.ads" 1 0 0# 
   : real =
  (1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = universal_real, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type universal_real__ref #"system.ads" 1 0 0# =
  { mutable universal_real__content "model_trace:" : universal_real }
 
 function universal_real__ref___projection #"system.ads" 1 0 0# 
   (a : universal_real__ref) : universal_real =
  a.universal_real__content
 
 meta "model_projection" function universal_real__ref___projection
 
 meta "inline : no" function universal_real__ref___projection
 
 val universal_real__havoc #"system.ads" 1 0 0# 
   (x : universal_real__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Treservoir_numB" defined at pump.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Pump__Treservoir_numB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type treservoir_numB #"pump.ads" 5 0 0# 
 
 function first #"pump.ads" 5 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"pump.ads" 5 0 0# 
   : int =
  2147483647
 
 predicate in_range #"pump.ads" 5 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = treservoir_numB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type treservoir_numB__ref #"pump.ads" 5 0 0# =
  { mutable treservoir_numB__content "model_trace:" : treservoir_numB }
 
 function treservoir_numB__ref___projection #"pump.ads" 5 0 0# 
   (a : treservoir_numB__ref) : treservoir_numB =
  a.treservoir_numB__content
 
 meta "model_projection" function treservoir_numB__ref___projection
 
 meta "inline : no" function treservoir_numB__ref___projection
 
 val treservoir_numB__havoc #"pump.ads" 5 0 0# 
   (x : treservoir_numB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "reservoir_num" defined at pump.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Pump__reservoir_num
 use import "_gnatprove_standard".Main
 use import "int".Int

 type reservoir_num #"pump.ads" 5 0 0# 
 
 function first #"pump.ads" 5 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"pump.ads" 5 0 0# 
   : int =
  2147483647
 
 predicate in_range #"pump.ads" 5 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = reservoir_num, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type reservoir_num__ref #"pump.ads" 5 0 0# =
  { mutable reservoir_num__content "model_trace:" : reservoir_num }
 
 function reservoir_num__ref___projection #"pump.ads" 5 0 0# 
   (a : reservoir_num__ref) : reservoir_num =
  a.reservoir_num__content
 
 meta "model_projection" function reservoir_num__ref___projection
 
 meta "inline : no" function reservoir_num__ref___projection
 
 val reservoir_num__havoc #"pump.ads" 5 0 0# 
   (x : reservoir_num__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Tfloat_numberB" defined at pump.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Pump__Tfloat_numberB
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type tfloat_numberB #"pump.ads" 6 0 0# 
 
 function first #"pump.ads" 6 0 0# 
   : real =
  (-.340282346638528859811704183484516925440.0)
 
 function last #"pump.ads" 6 0 0# 
   : real =
  (340282346638528859811704183484516925440.0)
 
 predicate in_range #"pump.ads" 6 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = tfloat_numberB, 
 function round_real_tmp = Floating.round_single, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type tfloat_numberB__ref #"pump.ads" 6 0 0# =
  { mutable tfloat_numberB__content "model_trace:" : tfloat_numberB }
 
 function tfloat_numberB__ref___projection #"pump.ads" 6 0 0# 
   (a : tfloat_numberB__ref) : tfloat_numberB =
  a.tfloat_numberB__content
 
 meta "model_projection" function tfloat_numberB__ref___projection
 
 meta "inline : no" function tfloat_numberB__ref___projection
 
 val tfloat_numberB__havoc #"pump.ads" 6 0 0# 
   (x : tfloat_numberB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "float_number" defined at pump.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Pump__float_number
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        "_gnatprove_standard".Floating

 type float_number #"pump.ads" 6 0 0# 
 
 function first #"pump.ads" 6 0 0# 
   : real =
  (0.0)
 
 function last #"pump.ads" 6 0 0# 
   : real =
  (100000004091847875962975319375216640.0)
 
 predicate in_range #"pump.ads" 6 0 0# 
   (x : real)  =
  ( (first <=. x) /\ (x <=. last) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = float_number, 
 function round_real_tmp = Floating.round_single, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_real
 
 meta "inline : no" function to_real
 
 type float_number__ref #"pump.ads" 6 0 0# =
  { mutable float_number__content "model_trace:" : float_number }
 
 function float_number__ref___projection #"pump.ads" 6 0 0# 
   (a : float_number__ref) : float_number =
  a.float_number__content
 
 meta "model_projection" function float_number__ref___projection
 
 meta "inline : no" function float_number__ref___projection
 
 val float_number__havoc #"pump.ads" 6 0 0# 
   (x : float_number__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "fuel_types" defined at pump.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Pump__fuel_types
 use import "_gnatprove_standard".Main
 use import "int".Int

 type fuel_types #"pump.ads" 7 0 0# 
 
 function first #"pump.ads" 7 0 0# 
   : int =
  0
 
 function last #"pump.ads" 7 0 0# 
   : int =
  3
 
 predicate in_range #"pump.ads" 7 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = fuel_types, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type fuel_types__ref #"pump.ads" 7 0 0# =
  { mutable fuel_types__content "model_trace:" : fuel_types }
 
 function fuel_types__ref___projection #"pump.ads" 7 0 0# 
   (a : fuel_types__ref) : fuel_types =
  a.fuel_types__content
 
 meta "model_projection" function fuel_types__ref___projection
 
 meta "inline : no" function fuel_types__ref___projection
 
 val fuel_types__havoc #"pump.ads" 7 0 0# 
   (x : fuel_types__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "state_type" defined at pump.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Pump__state_type
 use import "_gnatprove_standard".Main
 use import "int".Int

 type state_type #"pump.ads" 10 0 0# 
 
 function first #"pump.ads" 10 0 0# 
   : int =
  0
 
 function last #"pump.ads" 10 0 0# 
   : int =
  3
 
 predicate in_range #"pump.ads" 10 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = state_type, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type state_type__ref #"pump.ads" 10 0 0# =
  { mutable state_type__content "model_trace:" : state_type }
 
 function state_type__ref___projection #"pump.ads" 10 0 0# 
   (a : state_type__ref) : state_type =
  a.state_type__content
 
 meta "model_projection" function state_type__ref___projection
 
 meta "inline : no" function state_type__ref___projection
 
 val state_type__havoc #"pump.ads" 10 0 0# 
   (x : state_type__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "nozzle_type" defined at pump.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pump__nozzle_type
 use import "_gnatprove_standard".Main
 use import "int".Int

 type nozzle_type #"pump.ads" 11 0 0# 
 
 function first #"pump.ads" 11 0 0# 
   : int =
  0
 
 function last #"pump.ads" 11 0 0# 
   : int =
  5
 
 predicate in_range #"pump.ads" 11 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = nozzle_type, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type nozzle_type__ref #"pump.ads" 11 0 0# =
  { mutable nozzle_type__content "model_trace:" : nozzle_type }
 
 function nozzle_type__ref___projection #"pump.ads" 11 0 0# 
   (a : nozzle_type__ref) : nozzle_type =
  a.nozzle_type__content
 
 meta "model_projection" function nozzle_type__ref___projection
 
 meta "inline : no" function nozzle_type__ref___projection
 
 val nozzle_type__havoc #"pump.ads" 11 0 0# 
   (x : nozzle_type__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "reservoir" defined at pump.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Pump__reservoir
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__float_number
 use        Pump__fuel_types

 type __split_fields #"pump.ads" 11 0 0# =
  { rec__total : Pump__float_number.float_number; rec__reservoir_category "model_trace:.5637" : Pump__fuel_types.fuel_types }
 
 function __split_fields_RESERVOIR_CATEGORY__projection #"pump.ads" 7 0 0# "model_trace:.5637" 
   (a : __split_fields) : Pump__fuel_types.fuel_types =
  a.rec__reservoir_category
 
 meta "model_projection" function __split_fields_RESERVOIR_CATEGORY__projection
 
 meta "inline : no" function __split_fields_RESERVOIR_CATEGORY__projection
 
 type __split_fields__ref #"pump.ads" 13 0 0# =
  { mutable __split_fields__content "model_trace:" : __split_fields }
 
 function __split_fields__ref___projection #"pump.ads" 13 0 0# 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___projection
 
 meta "inline : no" function __split_fields__ref___projection
 
 val __split_fields__havoc #"pump.ads" 13 0 0# 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type reservoir #"pump.ads" 13 0 0# =
  { __split_fields "model_trace:" : __split_fields }
 
 function reservoir___projection #"pump.ads" 13 0 0# 
   (a : reservoir) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function reservoir___projection
 
 meta "inline : no" function reservoir___projection
 
 predicate total__pred #"pump.ads" 13 0 0# 
   (a : reservoir)  =
  true
 
 val rec__total_ #"pump.ads" 13 0 0# 
   (a : reservoir) : Pump__float_number.float_number
  requires { (total__pred a) }
  ensures { (result = a.__split_fields.rec__total) }
 
 predicate reservoir_category__pred #"pump.ads" 13 0 0# 
   (a : reservoir)  =
  true
 
 val rec__reservoir_category_ #"pump.ads" 13 0 0# 
   (a : reservoir) : Pump__fuel_types.fuel_types
  requires { (reservoir_category__pred a) }
  ensures { (result = a.__split_fields.rec__reservoir_category) }
 
 function bool_eq #"pump.ads" 13 0 0# 
   (a : reservoir) (b : reservoir) : bool =
  (if (( ((Pump__float_number.to_real a.__split_fields.rec__total) = (Pump__float_number.to_real b.__split_fields.rec__total)) /\ ((Pump__fuel_types.to_rep a.__split_fields.rec__reservoir_category) = (Pump__fuel_types.to_rep b.__split_fields.rec__reservoir_category)) )) then (
   True) else (
   False))
 
 function user_eq #"pump.ads" 13 0 0# 
   (a : reservoir) (b : reservoir) : bool
 
 function value__size #"pump.ads" 13 0 0# 
   : int
 
 function object__size #"pump.ads" 13 0 0# 
   (a : reservoir) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a : reservoir.
   ((object__size a) >= 0))
 
 function dummy #"pump.ads" 13 0 0# 
   : reservoir
 
 type reservoir__ref #"pump.ads" 13 0 0# =
  { mutable reservoir__content "model_trace:" : reservoir }
 
 function reservoir__ref___projection #"pump.ads" 13 0 0# 
   (a : reservoir__ref) : reservoir =
  a.reservoir__content
 
 meta "model_projection" function reservoir__ref___projection
 
 meta "inline : no" function reservoir__ref___projection
 
 val reservoir__havoc #"pump.ads" 13 0 0# 
   (x : reservoir__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "pump" defined at pump.ads:20, created in Gnat2Why.Types.Translate_Type *)
module Pump__pump
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__float_number
 use        Pump__fuel_types
 use        Pump__state_type
 use        Pump__nozzle_type
 use        Pump__reservoir

 type __split_fields #"pump.ads" 13 0 0# =
  { rec__reservoir_info "model_trace:.5659" : Pump__reservoir.reservoir; rec__pump_state "model_trace:.5679" : Pump__state_type.state_type; rec__pumped : Pump__float_number.float_number; rec__nozzle_state "model_trace:.5704" : Pump__nozzle_type.nozzle_type; rec__unit_price : Pump__float_number.float_number; rec__fuel_type "model_trace:.5729" : Pump__fuel_types.fuel_types }
 
 function __split_fields_RESERVOIR_INFO__projection #"pump.ads" 7 0 0# "model_trace:.5659" 
   (a : __split_fields) : Pump__reservoir.reservoir =
  a.rec__reservoir_info
 
 meta "model_projection" function __split_fields_RESERVOIR_INFO__projection
 
 meta "inline : no" function __split_fields_RESERVOIR_INFO__projection
 
 function __split_fields_PUMP_STATE__projection #"pump.ads" 20 0 0# "model_trace:.5679" 
   (a : __split_fields) : Pump__state_type.state_type =
  a.rec__pump_state
 
 meta "model_projection" function __split_fields_PUMP_STATE__projection
 
 meta "inline : no" function __split_fields_PUMP_STATE__projection
 
 function __split_fields_NOZZLE_STATE__projection #"pump.ads" 20 0 0# "model_trace:.5704" 
   (a : __split_fields) : Pump__nozzle_type.nozzle_type =
  a.rec__nozzle_state
 
 meta "model_projection" function __split_fields_NOZZLE_STATE__projection
 
 meta "inline : no" function __split_fields_NOZZLE_STATE__projection
 
 function __split_fields_FUEL_TYPE__projection #"pump.ads" 20 0 0# "model_trace:.5729" 
   (a : __split_fields) : Pump__fuel_types.fuel_types =
  a.rec__fuel_type
 
 meta "model_projection" function __split_fields_FUEL_TYPE__projection
 
 meta "inline : no" function __split_fields_FUEL_TYPE__projection
 
 type __split_fields__ref #"pump.ads" 20 0 0# =
  { mutable __split_fields__content "model_trace:" : __split_fields }
 
 function __split_fields__ref_2__projection #"pump.ads" 20 0 0# 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref_2__projection
 
 meta "inline : no" function __split_fields__ref_2__projection
 
 val __split_fields__havoc #"pump.ads" 20 0 0# 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type pump #"pump.ads" 20 0 0# =
  { __split_fields "model_trace:" : __split_fields }
 
 function pump___projection #"pump.ads" 20 0 0# 
   (a : pump) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function pump___projection
 
 meta "inline : no" function pump___projection
 
 predicate reservoir_info__pred #"pump.ads" 20 0 0# 
   (a : pump)  =
  true
 
 val rec__reservoir_info_ #"pump.ads" 20 0 0# 
   (a : pump) : Pump__reservoir.reservoir
  requires { (reservoir_info__pred a) }
  ensures { (result = a.__split_fields.rec__reservoir_info) }
 
 predicate pump_state__pred #"pump.ads" 20 0 0# 
   (a : pump)  =
  true
 
 val rec__pump_state_ #"pump.ads" 20 0 0# 
   (a : pump) : Pump__state_type.state_type
  requires { (pump_state__pred a) }
  ensures { (result = a.__split_fields.rec__pump_state) }
 
 predicate pumped__pred #"pump.ads" 20 0 0# 
   (a : pump)  =
  true
 
 val rec__pumped_ #"pump.ads" 20 0 0# 
   (a : pump) : Pump__float_number.float_number
  requires { (pumped__pred a) }
  ensures { (result = a.__split_fields.rec__pumped) }
 
 predicate nozzle_state__pred #"pump.ads" 20 0 0# 
   (a : pump)  =
  true
 
 val rec__nozzle_state_ #"pump.ads" 20 0 0# 
   (a : pump) : Pump__nozzle_type.nozzle_type
  requires { (nozzle_state__pred a) }
  ensures { (result = a.__split_fields.rec__nozzle_state) }
 
 predicate unit_price__pred #"pump.ads" 20 0 0# 
   (a : pump)  =
  true
 
 val rec__unit_price_ #"pump.ads" 20 0 0# 
   (a : pump) : Pump__float_number.float_number
  requires { (unit_price__pred a) }
  ensures { (result = a.__split_fields.rec__unit_price) }
 
 predicate fuel_type__pred #"pump.ads" 20 0 0# 
   (a : pump)  =
  true
 
 val rec__fuel_type_ #"pump.ads" 20 0 0# 
   (a : pump) : Pump__fuel_types.fuel_types
  requires { (fuel_type__pred a) }
  ensures { (result = a.__split_fields.rec__fuel_type) }
 
 function bool_eq #"pump.ads" 20 0 0# 
   (a : pump) (b : pump) : bool =
  (if (( ( ( ( ( ((Pump__reservoir.bool_eq a.__split_fields.rec__reservoir_info b.__split_fields.rec__reservoir_info) = True) /\ ((Pump__state_type.to_rep a.__split_fields.rec__pump_state) = (Pump__state_type.to_rep b.__split_fields.rec__pump_state)) ) /\ ((Pump__float_number.to_real a.__split_fields.rec__pumped) = (Pump__float_number.to_real b.__split_fields.rec__pumped)) ) /\ ((Pump__nozzle_type.to_rep a.__split_fields.rec__nozzle_state) = (Pump__nozzle_type.to_rep b.__split_fields.rec__nozzle_state)) ) /\ ((Pump__float_number.to_real a.__split_fields.rec__unit_price) = (Pump__float_number.to_real b.__split_fields.rec__unit_price)) ) /\ ((Pump__fuel_types.to_rep a.__split_fields.rec__fuel_type) = (Pump__fuel_types.to_rep b.__split_fields.rec__fuel_type)) )) then (
   True) else (
   False))
 
 function user_eq #"pump.ads" 20 0 0# 
   (a : pump) (b : pump) : bool
 
 function value__size #"pump.ads" 20 0 0# 
   : int
 
 function object__size #"pump.ads" 20 0 0# 
   (a : pump) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a : pump.
   ((object__size a) >= 0))
 
 function dummy #"pump.ads" 20 0 0# 
   : pump
 
 type pump__ref #"pump.ads" 20 0 0# =
  { mutable pump__content "model_trace:" : pump }
 
 function pump__ref___projection #"pump.ads" 20 0 0# 
   (a : pump__ref) : pump =
  a.pump__content
 
 meta "model_projection" function pump__ref___projection
 
 meta "inline : no" function pump__ref___projection
 
 val pump__havoc #"pump.ads" 20 0 0# 
   (x : pump__ref) : unit
  writes {x}

end

(* Module for defining the constant "price" defined at pump.ads:33, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__set_fuel_price__price
 use import "_gnatprove_standard".Main
 use        Pump__float_number

 function price #"pump.ads" 33 0 0# 
   : Pump__float_number.float_number
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 6 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "price" defined at pump.ads:33, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__set_fuel_price__price__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "statetype" defined at pump.ads:34, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__set_pump_state__statetype
 use import "_gnatprove_standard".Main

 function statetype #"pump.ads" 34 0 0# "model" "model_trace:5788" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 10 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "statetype" defined at pump.ads:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__set_pump_state__statetype__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at pump.ads:35, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__set_pumped__amount
 use import "_gnatprove_standard".Main
 use        Pump__float_number

 function amount #"pump.ads" 35 0 0# 
   : Pump__float_number.float_number
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 6 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at pump.ads:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__set_pumped__amount__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "nozzletype" defined at pump.ads:36, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__set_pump_nozzle_state__nozzletype
 use import "_gnatprove_standard".Main

 function nozzletype #"pump.ads" 36 0 0# "model" "model_trace:5842" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 11 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "nozzletype" defined at pump.ads:36, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__set_pump_nozzle_state__nozzletype__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "fueltype" defined at pump.ads:38, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__append_reservoir__fueltype
 use import "_gnatprove_standard".Main

 function fueltype #"pump.ads" 38 0 0# "model" "model_trace:5869" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 7 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "fueltype" defined at pump.ads:38, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__append_reservoir__fueltype__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "size" defined at pump.ads:40, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__set_reservoir_size__size
 use import "_gnatprove_standard".Main
 use        Pump__float_number

 function size #"pump.ads" 40 0 0# 
   : Pump__float_number.float_number
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 6 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "size" defined at pump.ads:40, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__set_reservoir_size__size__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at pump.ads:42, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__remove_petrol_reservoir__amount
 use import "_gnatprove_standard".Main
 use        Pump__float_number

 function amount #"pump.ads" 42 0 0# 
   : Pump__float_number.float_number
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 6 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at pump.ads:42, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__remove_petrol_reservoir__amount__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "pump_r" defined at pump.ads:51, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__get_tanks_size__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 function pump_r #"pump.ads" 51 0 0# "model_projected" "model_trace:6014" 
   : Pump__pump.pump
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:51, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__get_tanks_size__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_tanks_size" defined at pump.ads:51, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__get_tanks_size
 use import "_gnatprove_standard".Main
 use        Pump__float_number
 use        Pump__pump

 function get_tanks_size #"pump.ads" 51 0 0# 
   (pump_r : Pump__pump.pump) : Pump__float_number.float_number

end

(* Module for defining the constant "pump_r" defined at pump.ads:48, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__get_state__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 function pump_r #"pump.ads" 48 0 0# "model_projected" "model_trace:5957" 
   : Pump__pump.pump
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:48, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__get_state__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_state" defined at pump.ads:48, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__get_state
 use import "_gnatprove_standard".Main
 use        Pump__pump

 function get_state #"pump.ads" 48 0 0# 
   (pump_r : Pump__pump.pump) : int

end

(* Module for defining the constant "pump_r" defined at pump.ads:49, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__get_current_nozzle_state__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 function pump_r #"pump.ads" 49 0 0# "model_projected" "model_trace:5976" 
   : Pump__pump.pump
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:49, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__get_current_nozzle_state__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_current_nozzle_state" defined at pump.ads:49, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__get_current_nozzle_state
 use import "_gnatprove_standard".Main
 use        Pump__pump

 function get_current_nozzle_state #"pump.ads" 49 0 0# 
   (pump_r : Pump__pump.pump) : int

end

(* Module for defining the constant "pump_r" defined at pump.ads:50, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__get_unit_price__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 function pump_r #"pump.ads" 50 0 0# "model_projected" "model_trace:5995" 
   : Pump__pump.pump
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:50, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__get_unit_price__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_unit_price" defined at pump.ads:50, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__get_unit_price
 use import "_gnatprove_standard".Main
 use        Pump__float_number
 use        Pump__pump

 function get_unit_price #"pump.ads" 50 0 0# 
   (pump_r : Pump__pump.pump) : Pump__float_number.float_number

end

(* Module for defining the constant "pump_r" defined at pump.ads:52, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__get_resevoir_category__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 function pump_r #"pump.ads" 52 0 0# "model_projected" "model_trace:6033" 
   : Pump__pump.pump
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:52, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__get_resevoir_category__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_resevoir_category" defined at pump.ads:52, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__get_resevoir_category
 use import "_gnatprove_standard".Main
 use        Pump__pump

 function get_resevoir_category #"pump.ads" 52 0 0# 
   (pump_r : Pump__pump.pump) : int

end

(* Module for defining the constant "s" defined at sprint.ads:3, created in Gnat2Why.Decls.Translate_Constant *)
module Sprint__print__s
 use import "_gnatprove_standard".Main
 use        Standard__string

 function s #"sprint.ads" 3 0 0# "model_projected" "model_trace:6069" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s" defined at sprint.ads:3, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sprint__print__s__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s1" defined at sprint.ads:4, created in Gnat2Why.Decls.Translate_Constant *)
module Sprint__print_float_type__s1
 use import "_gnatprove_standard".Main
 use        Standard__string

 function s1 #"sprint.ads" 4 0 0# "model_projected" "model_trace:6087" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s1" defined at sprint.ads:4, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sprint__print_float_type__s1__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s2" defined at sprint.ads:4, created in Gnat2Why.Decls.Translate_Constant *)
module Sprint__print_float_type__s2
 use import "_gnatprove_standard".Main
 use        Pump__float_number

 function s2 #"sprint.ads" 4 0 0# 
   : Pump__float_number.float_number
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 6 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s2" defined at sprint.ads:4, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sprint__print_float_type__s2__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s1" defined at sprint.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Sprint__print_state_type__s1
 use import "_gnatprove_standard".Main
 use        Standard__string

 function s1 #"sprint.ads" 5 0 0# "model_projected" "model_trace:6116" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s1" defined at sprint.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sprint__print_state_type__s1__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s2" defined at sprint.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Sprint__print_state_type__s2
 use import "_gnatprove_standard".Main

 function s2 #"sprint.ads" 5 0 0# "model" "model_trace:6125" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 10 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s2" defined at sprint.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sprint__print_state_type__s2__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s1" defined at sprint.ads:6, created in Gnat2Why.Decls.Translate_Constant *)
module Sprint__print_nozzle_type__s1
 use import "_gnatprove_standard".Main
 use        Standard__string

 function s1 #"sprint.ads" 6 0 0# "model_projected" "model_trace:6145" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s1" defined at sprint.ads:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sprint__print_nozzle_type__s1__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s2" defined at sprint.ads:6, created in Gnat2Why.Decls.Translate_Constant *)
module Sprint__print_nozzle_type__s2
 use import "_gnatprove_standard".Main

 function s2 #"sprint.ads" 6 0 0# "model" "model_trace:6154" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 11 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s2" defined at sprint.ads:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sprint__print_nozzle_type__s2__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s1" defined at sprint.ads:7, created in Gnat2Why.Decls.Translate_Constant *)
module Sprint__print_fuel_type__s1
 use import "_gnatprove_standard".Main
 use        Standard__string

 function s1 #"sprint.ads" 7 0 0# "model_projected" "model_trace:6174" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s1" defined at sprint.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sprint__print_fuel_type__s1__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s2" defined at sprint.ads:7, created in Gnat2Why.Decls.Translate_Constant *)
module Sprint__print_fuel_type__s2
 use import "_gnatprove_standard".Main

 function s2 #"sprint.ads" 7 0 0# "model" "model_trace:6183" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 7 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s2" defined at sprint.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Sprint__print_fuel_type__s2__axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "name" defined at system.ads:46, created in Gnat2Why.Types.Translate_Type *)
module System__name
 use import "_gnatprove_standard".Main
 use import "int".Int

 type name #"system.ads" 46 0 0# 
 
 function first #"system.ads" 46 0 0# 
   : int =
  0
 
 function last #"system.ads" 46 0 0# 
   : int =
  0
 
 predicate in_range #"system.ads" 46 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = name, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type name__ref #"system.ads" 46 0 0# =
  { mutable name__content "model_trace:" : name }
 
 function name__ref___projection #"system.ads" 46 0 0# 
   (a : name__ref) : name =
  a.name__content
 
 meta "model_projection" function name__ref___projection
 
 meta "inline : no" function name__ref___projection
 
 val name__havoc #"system.ads" 46 0 0# 
   (x : name__ref) : unit
  writes {x}

end

(* Module for defining the constant "system_name" defined at system.ads:47, created in Gnat2Why.Decls.Translate_Constant *)
module System__system_name
 use import "_gnatprove_standard".Main

 function system_name #"system.ads" 47 0 0# "model" "model_trace:7267" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 46 0 0# 
   : int

end

(* Module for axiomatizing type "address" defined at system.ads:108, created in Gnat2Why.Types.Translate_Type *)
module System__address
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32

 type address #"system.ads" 108 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"system.ads" 108 0 0# 
   : BV32.t
 
 function first #"system.ads" 108 0 0# 
   : BV32.t =
  ( BV32.of_int 0 )
 
 function last #"system.ads" 108 0 0# 
   : BV32.t =
  ( BV32.of_int 4294967295 )
 
 function first_int #"system.ads" 108 0 0# 
   : int =
  0
 
 function last_int #"system.ads" 108 0 0# 
   : int =
  4294967295
 
 predicate in_range #"system.ads" 108 0 0# 
   (x : BV32.t)  =
  true
 
 predicate in_range_int #"system.ads" 108 0 0# 
   (x : int)  =
  BV32.uint_in_range x
 
 clone export "ada__model".Static_Modular_32 with
 type t = address, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type address__ref #"system.ads" 108 0 0# =
  { mutable address__content "model_trace:" : address }
 
 function address__ref___projection #"system.ads" 108 0 0# 
   (a : address__ref) : address =
  a.address__content
 
 meta "model_projection" function address__ref___projection
 
 meta "inline : no" function address__ref___projection
 
 val address__havoc #"system.ads" 108 0 0# 
   (x : address__ref) : unit
  writes {x}

end

(* Module for defining the constant "null_address" defined at system.ads:69, created in Gnat2Why.Decls.Translate_Constant *)
module System__null_address
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function null_address #"system.ads" 69 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module for defining the constant "left" defined at system.ads:77, created in Gnat2Why.Decls.Translate_Constant *)
module System__Olt__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function left #"system.ads" 77 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:77, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Olt__left__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:77, created in Gnat2Why.Decls.Translate_Constant *)
module System__Olt__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function right #"system.ads" 77 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:77, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Olt__right__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Olt" defined at system.ads:77, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Olt
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function olt #"system.ads" 77 0 0# 
   (left : BV32.t) (right : BV32.t) : bool

end

(* Module for defining the constant "left" defined at system.ads:78, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ole__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function left #"system.ads" 78 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:78, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ole__left__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:78, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ole__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function right #"system.ads" 78 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:78, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ole__right__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Ole" defined at system.ads:78, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Ole
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function ole #"system.ads" 78 0 0# 
   (left : BV32.t) (right : BV32.t) : bool

end

(* Module for defining the constant "left" defined at system.ads:79, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ogt__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function left #"system.ads" 79 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:79, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ogt__left__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:79, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ogt__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function right #"system.ads" 79 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:79, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ogt__right__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Ogt" defined at system.ads:79, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Ogt
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function ogt #"system.ads" 79 0 0# 
   (left : BV32.t) (right : BV32.t) : bool

end

(* Module for defining the constant "left" defined at system.ads:80, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oge__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function left #"system.ads" 80 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:80, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oge__left__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:80, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oge__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function right #"system.ads" 80 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:80, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oge__right__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Oge" defined at system.ads:80, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Oge
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function oge #"system.ads" 80 0 0# 
   (left : BV32.t) (right : BV32.t) : bool

end

(* Module for defining the constant "left" defined at system.ads:81, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oeq__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function left #"system.ads" 81 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:81, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oeq__left__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:81, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oeq__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function right #"system.ads" 81 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:81, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oeq__right__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Oeq" defined at system.ads:81, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Oeq
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function oeq #"system.ads" 81 0 0# 
   (left : BV32.t) (right : BV32.t) : bool

end

(* Module for axiomatizing type "bit_order" defined at system.ads:91, created in Gnat2Why.Types.Translate_Type *)
module System__bit_order
 use import "_gnatprove_standard".Main
 use import "int".Int

 type bit_order #"system.ads" 91 0 0# 
 
 function first #"system.ads" 91 0 0# 
   : int =
  0
 
 function last #"system.ads" 91 0 0# 
   : int =
  1
 
 predicate in_range #"system.ads" 91 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = bit_order, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type bit_order__ref #"system.ads" 91 0 0# =
  { mutable bit_order__content "model_trace:" : bit_order }
 
 function bit_order__ref___projection #"system.ads" 91 0 0# 
   (a : bit_order__ref) : bit_order =
  a.bit_order__content
 
 meta "model_projection" function bit_order__ref___projection
 
 meta "inline : no" function bit_order__ref___projection
 
 val bit_order__havoc #"system.ads" 91 0 0# 
   (x : bit_order__ref) : unit
  writes {x}

end

(* Module for defining the constant "default_bit_order" defined at system.ads:92, created in Gnat2Why.Decls.Translate_Constant *)
module System__default_bit_order
 use import "_gnatprove_standard".Main

 function default_bit_order #"system.ads" 92 0 0# "model" "model_trace:7616" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 91 0 0# 
   : int

end

(* Module for defining the constant "max_priority" defined at system.ads:97, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_priority
 use import "_gnatprove_standard".Main

 function max_priority #"system.ads" 97 0 0# "model" "model_trace:7632" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module for defining the constant "max_interrupt_priority" defined at system.ads:98, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_interrupt_priority
 use import "_gnatprove_standard".Main

 function max_interrupt_priority #"system.ads" 98 0 0# "model" "model_trace:7642" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module for axiomatizing type "any_priority" defined at system.ads:100, created in Gnat2Why.Types.Translate_Type *)
module System__any_priority
 use import "_gnatprove_standard".Main
 use import "int".Int

 type any_priority #"system.ads" 100 0 0# 
 
 function first #"system.ads" 100 0 0# 
   : int =
  0
 
 function last #"system.ads" 100 0 0# 
   : int =
  31
 
 predicate in_range #"system.ads" 100 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = any_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type any_priority__ref #"system.ads" 100 0 0# =
  { mutable any_priority__content "model_trace:" : any_priority }
 
 function any_priority__ref___projection #"system.ads" 100 0 0# 
   (a : any_priority__ref) : any_priority =
  a.any_priority__content
 
 meta "model_projection" function any_priority__ref___projection
 
 meta "inline : no" function any_priority__ref___projection
 
 val any_priority__havoc #"system.ads" 100 0 0# 
   (x : any_priority__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "priority" defined at system.ads:101, created in Gnat2Why.Types.Translate_Type *)
module System__priority
 use import "_gnatprove_standard".Main
 use import "int".Int

 type priority #"system.ads" 101 0 0# 
 
 function first #"system.ads" 101 0 0# 
   : int =
  0
 
 function last #"system.ads" 101 0 0# 
   : int =
  30
 
 predicate in_range #"system.ads" 101 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type priority__ref #"system.ads" 101 0 0# =
  { mutable priority__content "model_trace:" : priority }
 
 function priority__ref___projection #"system.ads" 101 0 0# 
   (a : priority__ref) : priority =
  a.priority__content
 
 meta "model_projection" function priority__ref___projection
 
 meta "inline : no" function priority__ref___projection
 
 val priority__havoc #"system.ads" 101 0 0# 
   (x : priority__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "interrupt_priority" defined at system.ads:102, created in Gnat2Why.Types.Translate_Type *)
module System__interrupt_priority
 use import "_gnatprove_standard".Main
 use import "int".Int

 type interrupt_priority #"system.ads" 102 0 0# 
 
 function first #"system.ads" 102 0 0# 
   : int =
  31
 
 function last #"system.ads" 102 0 0# 
   : int =
  31
 
 predicate in_range #"system.ads" 102 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = interrupt_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type interrupt_priority__ref #"system.ads" 102 0 0# =
  { mutable interrupt_priority__content "model_trace:" : interrupt_priority }
 
 function interrupt_priority__ref___projection #"system.ads" 102 0 0# 
   (a : interrupt_priority__ref) : interrupt_priority =
  a.interrupt_priority__content
 
 meta "model_projection" function interrupt_priority__ref___projection
 
 meta "inline : no" function interrupt_priority__ref___projection
 
 val interrupt_priority__havoc #"system.ads" 102 0 0# 
   (x : interrupt_priority__ref) : unit
  writes {x}

end

(* Module for defining the constant "default_priority" defined at system.ads:104, created in Gnat2Why.Decls.Translate_Constant *)
module System__default_priority
 use import "_gnatprove_standard".Main

 function default_priority #"system.ads" 104 0 0# "model" "model_trace:7694" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 101 0 0# 
   : int

end

(* Module for defining the constant "backend_divide_checks" defined at system.ads:121, created in Gnat2Why.Decls.Translate_Constant *)
module System__backend_divide_checks
 use import "_gnatprove_standard".Main

 function backend_divide_checks #"system.ads" 121 0 0# "model" "model_trace:7724" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 121 0 0# 
   : int

end

(* Module for defining the constant "backend_overflow_checks" defined at system.ads:122, created in Gnat2Why.Decls.Translate_Constant *)
module System__backend_overflow_checks
 use import "_gnatprove_standard".Main

 function backend_overflow_checks #"system.ads" 122 0 0# "model" "model_trace:7734" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 122 0 0# 
   : int

end

(* Module for defining the constant "command_line_args" defined at system.ads:123, created in Gnat2Why.Decls.Translate_Constant *)
module System__command_line_args
 use import "_gnatprove_standard".Main

 function command_line_args #"system.ads" 123 0 0# "model" "model_trace:7744" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 123 0 0# 
   : int

end

(* Module for defining the constant "configurable_run_time" defined at system.ads:124, created in Gnat2Why.Decls.Translate_Constant *)
module System__configurable_run_time
 use import "_gnatprove_standard".Main

 function configurable_run_time #"system.ads" 124 0 0# "model" "model_trace:7754" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 124 0 0# 
   : int

end

(* Module for defining the constant "denorm" defined at system.ads:125, created in Gnat2Why.Decls.Translate_Constant *)
module System__denorm
 use import "_gnatprove_standard".Main

 function denorm #"system.ads" 125 0 0# "model" "model_trace:7764" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 125 0 0# 
   : int

end

(* Module for defining the constant "duration_32_bits" defined at system.ads:126, created in Gnat2Why.Decls.Translate_Constant *)
module System__duration_32_bits
 use import "_gnatprove_standard".Main

 function duration_32_bits #"system.ads" 126 0 0# "model" "model_trace:7774" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 126 0 0# 
   : int

end

(* Module for defining the constant "exit_status_supported" defined at system.ads:127, created in Gnat2Why.Decls.Translate_Constant *)
module System__exit_status_supported
 use import "_gnatprove_standard".Main

 function exit_status_supported #"system.ads" 127 0 0# "model" "model_trace:7784" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 127 0 0# 
   : int

end

(* Module for defining the constant "fractional_fixed_ops" defined at system.ads:128, created in Gnat2Why.Decls.Translate_Constant *)
module System__fractional_fixed_ops
 use import "_gnatprove_standard".Main

 function fractional_fixed_ops #"system.ads" 128 0 0# "model" "model_trace:7794" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 128 0 0# 
   : int

end

(* Module for defining the constant "frontend_layout" defined at system.ads:129, created in Gnat2Why.Decls.Translate_Constant *)
module System__frontend_layout
 use import "_gnatprove_standard".Main

 function frontend_layout #"system.ads" 129 0 0# "model" "model_trace:7804" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 129 0 0# 
   : int

end

(* Module for defining the constant "machine_overflows" defined at system.ads:130, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_overflows
 use import "_gnatprove_standard".Main

 function machine_overflows #"system.ads" 130 0 0# "model" "model_trace:7814" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 130 0 0# 
   : int

end

(* Module for defining the constant "machine_rounds" defined at system.ads:131, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_rounds
 use import "_gnatprove_standard".Main

 function machine_rounds #"system.ads" 131 0 0# "model" "model_trace:7824" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 131 0 0# 
   : int

end

(* Module for defining the constant "preallocated_stacks" defined at system.ads:132, created in Gnat2Why.Decls.Translate_Constant *)
module System__preallocated_stacks
 use import "_gnatprove_standard".Main

 function preallocated_stacks #"system.ads" 132 0 0# "model" "model_trace:7834" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 132 0 0# 
   : int

end

(* Module for defining the constant "signed_zeros" defined at system.ads:133, created in Gnat2Why.Decls.Translate_Constant *)
module System__signed_zeros
 use import "_gnatprove_standard".Main

 function signed_zeros #"system.ads" 133 0 0# "model" "model_trace:7844" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 133 0 0# 
   : int

end

(* Module for defining the constant "stack_check_default" defined at system.ads:134, created in Gnat2Why.Decls.Translate_Constant *)
module System__stack_check_default
 use import "_gnatprove_standard".Main

 function stack_check_default #"system.ads" 134 0 0# "model" "model_trace:7854" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 134 0 0# 
   : int

end

(* Module for defining the constant "stack_check_probes" defined at system.ads:135, created in Gnat2Why.Decls.Translate_Constant *)
module System__stack_check_probes
 use import "_gnatprove_standard".Main

 function stack_check_probes #"system.ads" 135 0 0# "model" "model_trace:7864" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 135 0 0# 
   : int

end

(* Module for defining the constant "stack_check_limits" defined at system.ads:136, created in Gnat2Why.Decls.Translate_Constant *)
module System__stack_check_limits
 use import "_gnatprove_standard".Main

 function stack_check_limits #"system.ads" 136 0 0# "model" "model_trace:7874" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 136 0 0# 
   : int

end

(* Module for defining the constant "support_aggregates" defined at system.ads:137, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_aggregates
 use import "_gnatprove_standard".Main

 function support_aggregates #"system.ads" 137 0 0# "model" "model_trace:7884" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 137 0 0# 
   : int

end

(* Module for defining the constant "support_atomic_primitives" defined at system.ads:138, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_atomic_primitives
 use import "_gnatprove_standard".Main

 function support_atomic_primitives #"system.ads" 138 0 0# "model" "model_trace:7894" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 138 0 0# 
   : int

end

(* Module for defining the constant "support_composite_assign" defined at system.ads:139, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_composite_assign
 use import "_gnatprove_standard".Main

 function support_composite_assign #"system.ads" 139 0 0# "model" "model_trace:7904" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 139 0 0# 
   : int

end

(* Module for defining the constant "support_composite_compare" defined at system.ads:140, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_composite_compare
 use import "_gnatprove_standard".Main

 function support_composite_compare #"system.ads" 140 0 0# "model" "model_trace:7914" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 140 0 0# 
   : int

end

(* Module for defining the constant "support_long_shifts" defined at system.ads:141, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_long_shifts
 use import "_gnatprove_standard".Main

 function support_long_shifts #"system.ads" 141 0 0# "model" "model_trace:7924" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 141 0 0# 
   : int

end

(* Module for defining the constant "always_compatible_rep" defined at system.ads:142, created in Gnat2Why.Decls.Translate_Constant *)
module System__always_compatible_rep
 use import "_gnatprove_standard".Main

 function always_compatible_rep #"system.ads" 142 0 0# "model" "model_trace:7934" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 142 0 0# 
   : int

end

(* Module for defining the constant "suppress_standard_library" defined at system.ads:143, created in Gnat2Why.Decls.Translate_Constant *)
module System__suppress_standard_library
 use import "_gnatprove_standard".Main

 function suppress_standard_library #"system.ads" 143 0 0# "model" "model_trace:7944" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 143 0 0# 
   : int

end

(* Module for defining the constant "use_ada_main_program_name" defined at system.ads:144, created in Gnat2Why.Decls.Translate_Constant *)
module System__use_ada_main_program_name
 use import "_gnatprove_standard".Main

 function use_ada_main_program_name #"system.ads" 144 0 0# "model" "model_trace:7954" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 144 0 0# 
   : int

end

(* Module for defining the constant "frontend_exceptions" defined at system.ads:145, created in Gnat2Why.Decls.Translate_Constant *)
module System__frontend_exceptions
 use import "_gnatprove_standard".Main

 function frontend_exceptions #"system.ads" 145 0 0# "model" "model_trace:7964" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 145 0 0# 
   : int

end

(* Module for defining the constant "zcx_by_default" defined at system.ads:146, created in Gnat2Why.Decls.Translate_Constant *)
module System__zcx_by_default
 use import "_gnatprove_standard".Main

 function zcx_by_default #"system.ads" 146 0 0# "model" "model_trace:7974" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 146 0 0# 
   : int

end

(* Module for axiomatizing the array theory associated to type "Tpriorities_mappingB" defined at system.ads:161, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 function index_I1_one #"system.ads" 146 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 146 0 0# =
  Standard__integer.integer
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__integer.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "Tpriorities_mappingB" defined at system.ads:161, created in Gnat2Why.Types.Translate_Type *)
module System__Tpriorities_mappingB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        System__any_priority
 use        Array__Int__Standard__integer

 type component_type #"system.ads" 1 0 0# =
  Standard__integer.integer
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = System__any_priority.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tpriorities_mappingB #"system.ads" 161 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tpriorities_mappingB__ref #"system.ads" 161 0 0# =
  { mutable tpriorities_mappingB__content "model_trace:" : tpriorities_mappingB }
 
 function tpriorities_mappingB__ref___projection #"system.ads" 161 0 0# 
   (a : tpriorities_mappingB__ref) : tpriorities_mappingB =
  a.tpriorities_mappingB__content
 
 meta "model_projection" function tpriorities_mappingB__ref___projection
 
 meta "inline : no" function tpriorities_mappingB__ref___projection
 
 val tpriorities_mappingB__havoc #"system.ads" 161 0 0# 
   (x : tpriorities_mappingB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "priorities_mapping" defined at system.ads:161, created in Gnat2Why.Types.Translate_Type *)
module System__priorities_mapping
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Array__Int__Standard__integer

 type component_type #"system.ads" 161 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  31
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T3s" defined at system.ads:166, created in Gnat2Why.Types.Translate_Type *)
module System__T3s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t3s #"system.ads" 166 0 0# 
 
 function first #"system.ads" 166 0 0# 
   : int =
  0
 
 function last #"system.ads" 166 0 0# 
   : int =
  31
 
 predicate in_range #"system.ads" 166 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t3s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type t3s__ref #"system.ads" 166 0 0# =
  { mutable t3s__content "model_trace:" : t3s }
 
 function t3s__ref___projection #"system.ads" 166 0 0# 
   (a : t3s__ref) : t3s =
  a.t3s__content
 
 meta "model_projection" function t3s__ref___projection
 
 meta "inline : no" function t3s__ref___projection
 
 val t3s__havoc #"system.ads" 166 0 0# 
   (x : t3s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T4s" defined at system.ads:166, created in Gnat2Why.Types.Translate_Type *)
module System__T4s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Array__Int__Standard__integer

 type component_type #"system.ads" 166 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  31
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "underlying_priorities" defined at system.ads:165, created in Gnat2Why.Decls.Translate_Constant *)
module System__underlying_priorities
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__integer

 function underlying_priorities #"system.ads" 165 0 0# "model_projected" "model_trace:8000" 
   : Array__Int__Standard__integer.map
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 161 0 0# 
   : int

end

(* Module for axiomatizing type "Ttask_storage_sizeB" defined at s-parame.ads:58, created in Gnat2Why.Types.Translate_Type *)
module System__parameters__Ttask_storage_sizeB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type ttask_storage_sizeB #"s-parame.ads" 58 0 0# 
 
 function first #"s-parame.ads" 58 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"s-parame.ads" 58 0 0# 
   : int =
  2147483647
 
 predicate in_range #"s-parame.ads" 58 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = ttask_storage_sizeB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type ttask_storage_sizeB__ref #"s-parame.ads" 58 0 0# =
  { mutable ttask_storage_sizeB__content "model_trace:" : ttask_storage_sizeB }
 
 function ttask_storage_sizeB__ref___projection #"s-parame.ads" 58 0 0# 
   (a : ttask_storage_sizeB__ref) : ttask_storage_sizeB =
  a.ttask_storage_sizeB__content
 
 meta "model_projection" function ttask_storage_sizeB__ref___projection
 
 meta "inline : no" function ttask_storage_sizeB__ref___projection
 
 val ttask_storage_sizeB__havoc #"s-parame.ads" 58 0 0# 
   (x : ttask_storage_sizeB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "task_storage_size" defined at s-parame.ads:58, created in Gnat2Why.Types.Translate_Type *)
module System__parameters__task_storage_size
 use import "_gnatprove_standard".Main
 use import "int".Int

 type task_storage_size #"s-parame.ads" 58 0 0# 
 
 function first #"s-parame.ads" 58 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"s-parame.ads" 58 0 0# 
   : int =
  2147483647
 
 predicate in_range #"s-parame.ads" 58 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = task_storage_size, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type task_storage_size__ref #"s-parame.ads" 58 0 0# =
  { mutable task_storage_size__content "model_trace:" : task_storage_size }
 
 function task_storage_size__ref___projection #"s-parame.ads" 58 0 0# 
   (a : task_storage_size__ref) : task_storage_size =
  a.task_storage_size__content
 
 meta "model_projection" function task_storage_size__ref___projection
 
 meta "inline : no" function task_storage_size__ref___projection
 
 val task_storage_size__havoc #"s-parame.ads" 58 0 0# 
   (x : task_storage_size__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Tsize_typeB" defined at s-parame.ads:61, created in Gnat2Why.Types.Translate_Type *)
module System__parameters__Tsize_typeB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tsize_typeB #"s-parame.ads" 61 0 0# 
 
 function first #"s-parame.ads" 61 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"s-parame.ads" 61 0 0# 
   : int =
  2147483647
 
 predicate in_range #"s-parame.ads" 61 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tsize_typeB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type tsize_typeB__ref #"s-parame.ads" 61 0 0# =
  { mutable tsize_typeB__content "model_trace:" : tsize_typeB }
 
 function tsize_typeB__ref___projection #"s-parame.ads" 61 0 0# 
   (a : tsize_typeB__ref) : tsize_typeB =
  a.tsize_typeB__content
 
 meta "model_projection" function tsize_typeB__ref___projection
 
 meta "inline : no" function tsize_typeB__ref___projection
 
 val tsize_typeB__havoc #"s-parame.ads" 61 0 0# 
   (x : tsize_typeB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "size_type" defined at s-parame.ads:61, created in Gnat2Why.Types.Translate_Type *)
module System__parameters__size_type
 use import "_gnatprove_standard".Main
 use import "int".Int

 type size_type #"s-parame.ads" 61 0 0# 
 
 function first #"s-parame.ads" 61 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"s-parame.ads" 61 0 0# 
   : int =
  2147483647
 
 predicate in_range #"s-parame.ads" 61 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = size_type, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type size_type__ref #"s-parame.ads" 61 0 0# =
  { mutable size_type__content "model_trace:" : size_type }
 
 function size_type__ref___projection #"s-parame.ads" 61 0 0# 
   (a : size_type__ref) : size_type =
  a.size_type__content
 
 meta "model_projection" function size_type__ref___projection
 
 meta "inline : no" function size_type__ref___projection
 
 val size_type__havoc #"s-parame.ads" 61 0 0# 
   (x : size_type__ref) : unit
  writes {x}

end

(* Module for defining the constant "unspecified_size" defined at s-parame.ads:64, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__unspecified_size
 use import "_gnatprove_standard".Main

 function unspecified_size #"s-parame.ads" 64 0 0# "model" "model_trace:8177" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-parame.ads" 61 0 0# 
   : int

end

(* Module for axiomatizing type "percentage" defined at s-parame.ads:67, created in Gnat2Why.Types.Translate_Type *)
module System__parameters__percentage
 use import "_gnatprove_standard".Main
 use import "int".Int

 type percentage #"s-parame.ads" 67 0 0# 
 
 function first #"s-parame.ads" 67 0 0# 
   : int =
  ( -1 )
 
 function last #"s-parame.ads" 67 0 0# 
   : int =
  100
 
 predicate in_range #"s-parame.ads" 67 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = percentage, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type percentage__ref #"s-parame.ads" 67 0 0# =
  { mutable percentage__content "model_trace:" : percentage }
 
 function percentage__ref___projection #"s-parame.ads" 67 0 0# 
   (a : percentage__ref) : percentage =
  a.percentage__content
 
 meta "model_projection" function percentage__ref___projection
 
 meta "inline : no" function percentage__ref___projection
 
 val percentage__havoc #"s-parame.ads" 67 0 0# 
   (x : percentage__ref) : unit
  writes {x}

end

(* Module for defining the constant "dynamic" defined at s-parame.ads:68, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__dynamic
 use import "_gnatprove_standard".Main

 function dynamic #"s-parame.ads" 68 0 0# "model" "model_trace:8204" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-parame.ads" 61 0 0# 
   : int

end

(* Module for defining the constant "sec_stack_percentage" defined at s-parame.ads:75, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__sec_stack_percentage
 use import "_gnatprove_standard".Main

 function sec_stack_percentage #"s-parame.ads" 75 0 0# "model" "model_trace:8215" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-parame.ads" 67 0 0# 
   : int

end

(* Module for defining the constant "sec_stack_dynamic" defined at s-parame.ads:78, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__sec_stack_dynamic
 use import "_gnatprove_standard".Main

 function sec_stack_dynamic #"s-parame.ads" 78 0 0# "model" "model_trace:8225" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"s-parame.ads" 78 0 0# 
   : int

end

(* Module for possibly declaring a logic function for "default_stack_size" defined at s-parame.ads:81, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__parameters__default_stack_size
 use import "_gnatprove_standard".Main

 function default_stack_size #"s-parame.ads" 81 0 0# 
   (__void_param : unit) : int

end

(* Module for possibly declaring a logic function for "minimum_stack_size" defined at s-parame.ads:84, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__parameters__minimum_stack_size
 use import "_gnatprove_standard".Main

 function minimum_stack_size #"s-parame.ads" 84 0 0# 
   (__void_param : unit) : int

end

(* Module for defining the constant "size" defined at s-parame.ads:87, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__adjust_storage_size__size
 use import "_gnatprove_standard".Main

 function size #"s-parame.ads" 87 0 0# "model" "model_trace:8264" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-parame.ads" 61 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "size" defined at s-parame.ads:87, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__parameters__adjust_storage_size__size__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "adjust_storage_size" defined at s-parame.ads:87, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__parameters__adjust_storage_size
 use import "_gnatprove_standard".Main

 function adjust_storage_size #"s-parame.ads" 87 0 0# 
   (size : int) : int

end

(* Module for defining the constant "default_env_stack_size" defined at s-parame.ads:96, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__default_env_stack_size
 use import "_gnatprove_standard".Main

 function default_env_stack_size #"s-parame.ads" 96 0 0# "model" "model_trace:8278" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-parame.ads" 61 0 0# 
   : int

end

(* Module for defining the constant "stack_grows_down" defined at s-parame.ads:101, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__stack_grows_down
 use import "_gnatprove_standard".Main

 function stack_grows_down #"s-parame.ads" 101 0 0# "model" "model_trace:8288" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"s-parame.ads" 101 0 0# 
   : int

end

(* Module for axiomatizing type "c_address" defined at s-parame.ads:116, created in Gnat2Why.Types.Translate_Type *)
module System__parameters__c_address
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32

 type c_address #"s-parame.ads" 116 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"s-parame.ads" 116 0 0# 
   : BV32.t =
  ( BV32.of_int 0 )
 
 function first #"s-parame.ads" 116 0 0# 
   : BV32.t =
  ( BV32.of_int 0 )
 
 function last #"s-parame.ads" 116 0 0# 
   : BV32.t =
  ( BV32.of_int 4294967295 )
 
 function first_int #"s-parame.ads" 116 0 0# 
   : int =
  0
 
 function last_int #"s-parame.ads" 116 0 0# 
   : int =
  4294967295
 
 predicate in_range #"s-parame.ads" 116 0 0# 
   (x : BV32.t)  =
  ( (BV32.ule first x) /\ (BV32.ule x last) )
 
 predicate in_range_int #"s-parame.ads" 116 0 0# 
   (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Static_Modular_lt32 with
 type t = c_address, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function attr__ATTRIBUTE_MODULUS = attr__ATTRIBUTE_MODULUS, 
 predicate in_range_int = in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type c_address__ref #"s-parame.ads" 116 0 0# =
  { mutable c_address__content "model_trace:" : c_address }
 
 function c_address__ref___projection #"s-parame.ads" 116 0 0# 
   (a : c_address__ref) : c_address =
  a.c_address__content
 
 meta "model_projection" function c_address__ref___projection
 
 meta "inline : no" function c_address__ref___projection
 
 val c_address__havoc #"s-parame.ads" 116 0 0# 
   (x : c_address__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T1s" defined at s-parame.ads:119, created in Gnat2Why.Types.Translate_Type *)
module System__parameters__T1s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"s-parame.ads" 116 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  13
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "c_malloc_linkname" defined at s-parame.ads:119, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__c_malloc_linkname
 use import "_gnatprove_standard".Main
 use        Standard__string

 function c_malloc_linkname #"s-parame.ads" 119 0 0# "model_projected" "model_trace:8331" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module for defining the constant "garbage_collected" defined at s-parame.ads:142, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__garbage_collected
 use import "_gnatprove_standard".Main

 function garbage_collected #"s-parame.ads" 142 0 0# "model" "model_trace:8341" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"s-parame.ads" 142 0 0# 
   : int

end

(* Module for defining the constant "single_lock" defined at s-parame.ads:157, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__single_lock
 use import "_gnatprove_standard".Main

 function single_lock #"s-parame.ads" 157 0 0# "model" "model_trace:8351" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"s-parame.ads" 157 0 0# 
   : int

end

(* Module for defining the constant "no_abort" defined at s-parame.ads:170, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__no_abort
 use import "_gnatprove_standard".Main

 function no_abort #"s-parame.ads" 170 0 0# "model" "model_trace:8361" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"s-parame.ads" 170 0 0# 
   : int

end

(* Module for defining the constant "runtime_traces" defined at s-parame.ads:190, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__runtime_traces
 use import "_gnatprove_standard".Main

 function runtime_traces #"s-parame.ads" 190 0 0# "model" "model_trace:8380" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"s-parame.ads" 190 0 0# 
   : int

end

(* Module for axiomatizing type "Tbig_stringP1" defined at s-stalib.ads:62, created in Gnat2Why.Types.Translate_Type *)
module System__standard_library__Tbig_stringP1
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tbig_stringP1 #"s-stalib.ads" 62 0 0# 
 
 function first #"s-stalib.ads" 62 0 0# 
   : int =
  1
 
 function last #"s-stalib.ads" 62 0 0# 
   : int =
  2147483647
 
 predicate in_range #"s-stalib.ads" 62 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tbig_stringP1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type tbig_stringP1__ref #"s-stalib.ads" 62 0 0# =
  { mutable tbig_stringP1__content "model_trace:" : tbig_stringP1 }
 
 function tbig_stringP1__ref___projection #"s-stalib.ads" 62 0 0# 
   (a : tbig_stringP1__ref) : tbig_stringP1 =
  a.tbig_stringP1__content
 
 meta "model_projection" function tbig_stringP1__ref___projection
 
 meta "inline : no" function tbig_stringP1__ref___projection
 
 val tbig_stringP1__havoc #"s-stalib.ads" 62 0 0# 
   (x : tbig_stringP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "big_string" defined at s-stalib.ads:62, created in Gnat2Why.Types.Translate_Type *)
module System__standard_library__big_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"s-stalib.ads" 62 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "source" defined at a-unccon.ads:17 instantiated at s-stalib.ads:76, created in Gnat2Why.Types.Translate_Type *)
module System__standard_library__to_ptrGP4411__source
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32

 type source #"a-unccon.ads" 17 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"a-unccon.ads" 17 0 0# 
   : BV32.t =
  ( BV32.of_int 0 )
 
 function first #"a-unccon.ads" 17 0 0# 
   : BV32.t =
  ( BV32.of_int 0 )
 
 function last #"a-unccon.ads" 17 0 0# 
   : BV32.t =
  ( BV32.of_int 4294967295 )
 
 function first_int #"a-unccon.ads" 17 0 0# 
   : int =
  0
 
 function last_int #"a-unccon.ads" 17 0 0# 
   : int =
  4294967295
 
 predicate in_range #"a-unccon.ads" 17 0 0# 
   (x : BV32.t)  =
  ( (BV32.ule first x) /\ (BV32.ule x last) )
 
 predicate in_range_int #"a-unccon.ads" 17 0 0# 
   (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Static_Modular_lt32 with
 type t = source, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function attr__ATTRIBUTE_MODULUS = attr__ATTRIBUTE_MODULUS, 
 predicate in_range_int = in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type source__ref #"a-unccon.ads" 17 0 0# =
  { mutable source__content "model_trace:" : source }
 
 function source__ref___projection #"a-unccon.ads" 17 0 0# 
   (a : source__ref) : source =
  a.source__content
 
 meta "model_projection" function source__ref___projection
 
 meta "inline : no" function source__ref___projection
 
 val source__havoc #"a-unccon.ads" 17 0 0# 
   (x : source__ref) : unit
  writes {x}

end

(* Module for defining the constant "s" defined at a-unccon.ads:20 instantiated at s-stalib.ads:76, created in Gnat2Why.Decls.Translate_Constant *)
module System__standard_library__to_ptrGP4411__to_ptr__s
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function s #"a-unccon.ads" 20 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"a-unccon.ads" 17 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s" defined at a-unccon.ads:20 instantiated at s-stalib.ads:76, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__standard_library__to_ptrGP4411__to_ptr__s__axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T2s" defined at s-stalib.ads:142, created in Gnat2Why.Types.Translate_Type *)
module System__standard_library__T2s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"a-unccon.ads" 17 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  17
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "constraint_error_name" defined at s-stalib.ads:142, created in Gnat2Why.Decls.Translate_Constant *)
module System__standard_library__constraint_error_name
 use import "_gnatprove_standard".Main
 use        Standard__string

 function constraint_error_name #"s-stalib.ads" 142 0 0# "model_projected" "model_trace:8606" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module for axiomatizing type "T3s" defined at s-stalib.ads:143, created in Gnat2Why.Types.Translate_Type *)
module System__standard_library__T3s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  14
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "program_error_name" defined at s-stalib.ads:143, created in Gnat2Why.Decls.Translate_Constant *)
module System__standard_library__program_error_name
 use import "_gnatprove_standard".Main
 use        Standard__string

 function program_error_name #"s-stalib.ads" 143 0 0# "model_projected" "model_trace:8620" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module for axiomatizing type "T4s" defined at s-stalib.ads:144, created in Gnat2Why.Types.Translate_Type *)
module System__standard_library__T4s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  14
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "storage_error_name" defined at s-stalib.ads:144, created in Gnat2Why.Decls.Translate_Constant *)
module System__standard_library__storage_error_name
 use import "_gnatprove_standard".Main
 use        Standard__string

 function storage_error_name #"s-stalib.ads" 144 0 0# "model_projected" "model_trace:8634" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module for axiomatizing type "T5s" defined at s-stalib.ads:145, created in Gnat2Why.Types.Translate_Type *)
module System__standard_library__T5s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  14
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "tasking_error_name" defined at s-stalib.ads:145, created in Gnat2Why.Decls.Translate_Constant *)
module System__standard_library__tasking_error_name
 use import "_gnatprove_standard".Main
 use        Standard__string

 function tasking_error_name #"s-stalib.ads" 145 0 0# "model_projected" "model_trace:8648" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module for axiomatizing type "T6s" defined at s-stalib.ads:146, created in Gnat2Why.Types.Translate_Type *)
module System__standard_library__T6s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  14
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "abort_signal_name" defined at s-stalib.ads:146, created in Gnat2Why.Decls.Translate_Constant *)
module System__standard_library__abort_signal_name
 use import "_gnatprove_standard".Main
 use        Standard__string

 function abort_signal_name #"s-stalib.ads" 146 0 0# "model_projected" "model_trace:8662" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module for axiomatizing type "T7s" defined at s-stalib.ads:148, created in Gnat2Why.Types.Translate_Type *)
module System__standard_library__T7s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  14
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "numeric_error_name" defined at s-stalib.ads:148, created in Gnat2Why.Decls.Translate_Constant *)
module System__standard_library__numeric_error_name
 use import "_gnatprove_standard".Main
 use        Standard__string

 function numeric_error_name #"s-stalib.ads" 148 0 0# "model_projected" "model_trace:8676" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module for axiomatizing type "exception_trace_kind" defined at s-stalib.ads:218, created in Gnat2Why.Types.Translate_Type *)
module System__standard_library__exception_trace_kind
 use import "_gnatprove_standard".Main
 use import "int".Int

 type exception_trace_kind #"s-stalib.ads" 218 0 0# 
 
 function first #"s-stalib.ads" 218 0 0# 
   : int =
  0
 
 function last #"s-stalib.ads" 218 0 0# 
   : int =
  3
 
 predicate in_range #"s-stalib.ads" 218 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = exception_trace_kind, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type exception_trace_kind__ref #"s-stalib.ads" 218 0 0# =
  { mutable exception_trace_kind__content "model_trace:" : exception_trace_kind }
 
 function exception_trace_kind__ref___projection #"s-stalib.ads" 218 0 0# 
   (a : exception_trace_kind__ref) : exception_trace_kind =
  a.exception_trace_kind__content
 
 meta "model_projection" function exception_trace_kind__ref___projection
 
 meta "inline : no" function exception_trace_kind__ref___projection
 
 val exception_trace_kind__havoc #"s-stalib.ads" 218 0 0# 
   (x : exception_trace_kind__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "traceback_entry" defined at s-traent.ads:50, created in Gnat2Why.Types.Translate_Type *)
module System__traceback_entries__traceback_entry
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32

 type traceback_entry #"s-traent.ads" 50 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"s-traent.ads" 50 0 0# 
   : BV32.t =
  ( BV32.of_int 0 )
 
 function first #"s-traent.ads" 50 0 0# 
   : BV32.t =
  ( BV32.of_int 0 )
 
 function last #"s-traent.ads" 50 0 0# 
   : BV32.t =
  ( BV32.of_int 4294967295 )
 
 function first_int #"s-traent.ads" 50 0 0# 
   : int =
  0
 
 function last_int #"s-traent.ads" 50 0 0# 
   : int =
  4294967295
 
 predicate in_range #"s-traent.ads" 50 0 0# 
   (x : BV32.t)  =
  ( (BV32.ule first x) /\ (BV32.ule x last) )
 
 predicate in_range_int #"s-traent.ads" 50 0 0# 
   (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Static_Modular_lt32 with
 type t = traceback_entry, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function attr__ATTRIBUTE_MODULUS = attr__ATTRIBUTE_MODULUS, 
 predicate in_range_int = in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type traceback_entry__ref #"s-traent.ads" 50 0 0# =
  { mutable traceback_entry__content "model_trace:" : traceback_entry }
 
 function traceback_entry__ref___projection #"s-traent.ads" 50 0 0# 
   (a : traceback_entry__ref) : traceback_entry =
  a.traceback_entry__content
 
 meta "model_projection" function traceback_entry__ref___projection
 
 meta "inline : no" function traceback_entry__ref___projection
 
 val traceback_entry__havoc #"s-traent.ads" 50 0 0# 
   (x : traceback_entry__ref) : unit
  writes {x}

end

(* Module for defining the constant "null_tb_entry" defined at s-traent.ads:53, created in Gnat2Why.Decls.Translate_Constant *)
module System__traceback_entries__null_tb_entry
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function null_tb_entry #"s-traent.ads" 53 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-traent.ads" 50 0 0# 
   : int

end

(* Module for axiomatizing the array theory associated to type "tracebacks_array" defined at s-traent.ads:56, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__System__traceback_entries__traceback_entry
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__traceback_entries__traceback_entry

 function index_I1_one #"s-traent.ads" 50 0 0# 
   : int =
  1
 
 type component_type #"s-traent.ads" 50 0 0# =
  System__traceback_entries__traceback_entry.traceback_entry
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function index_Index_one #"s-traent.ads" 50 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_BV32_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = System__traceback_entries__traceback_entry.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "tracebacks_array" defined at s-traent.ads:56, created in Gnat2Why.Types.Translate_Type *)
module System__traceback_entries__tracebacks_array
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        System__traceback_entries__traceback_entry
 use        Array__Int__System__traceback_entries__traceback_entry

 type component_type #"s-traent.ads" 50 0 0# =
  System__traceback_entries__traceback_entry.traceback_entry
 
 function index_1_id #"s-traent.ads" 50 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__System__traceback_entries__traceback_entry.map, 
 function array_bool_eq = Array__Int__System__traceback_entries__traceback_entry.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tracebacks_array #"s-traent.ads" 56 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tracebacks_array__ref #"s-traent.ads" 56 0 0# =
  { mutable tracebacks_array__content "model_trace:" : tracebacks_array }
 
 function tracebacks_array__ref___projection #"s-traent.ads" 56 0 0# 
   (a : tracebacks_array__ref) : tracebacks_array =
  a.tracebacks_array__content
 
 meta "model_projection" function tracebacks_array__ref___projection
 
 meta "inline : no" function tracebacks_array__ref___projection
 
 val tracebacks_array__havoc #"s-traent.ads" 56 0 0# 
   (x : tracebacks_array__ref) : unit
  writes {x}

end

(* Module for defining the constant "tb_entry" defined at s-traent.ads:58, created in Gnat2Why.Decls.Translate_Constant *)
module System__traceback_entries__pc_for__tb_entry
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function tb_entry #"s-traent.ads" 58 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-traent.ads" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "tb_entry" defined at s-traent.ads:58, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__traceback_entries__pc_for__tb_entry__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "pc_for" defined at s-traent.ads:58, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__traceback_entries__pc_for
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function pc_for #"s-traent.ads" 58 0 0# 
   (tb_entry : BV32.t) : BV32.t

end

(* Module for defining the constant "pc" defined at s-traent.ads:63, created in Gnat2Why.Decls.Translate_Constant *)
module System__traceback_entries__tb_entry_for__pc
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function pc #"s-traent.ads" 63 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pc" defined at s-traent.ads:63, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__traceback_entries__tb_entry_for__pc__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "tb_entry_for" defined at s-traent.ads:63, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__traceback_entries__tb_entry_for
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function tb_entry_for #"s-traent.ads" 63 0 0# 
   (pc : BV32.t) : BV32.t

end

(* Module for axiomatizing type "exception_id" defined at a-except.ads:58, created in Gnat2Why.Types.Translate_Type *)
module Ada__exceptions__exception_id
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type __split_fields #"s-traent.ads" 50 0 0# =
  { rec__main__ "model_trace:" : Main.__private }
 
 function __split_fields___projection #"s-traent.ads" 50 0 0# 
   (a : __split_fields) : Main.__private =
  a.rec__main__
 
 meta "model_projection" function __split_fields___projection
 
 meta "inline : no" function __split_fields___projection
 
 type __split_fields__ref #"s-traent.ads" 50 0 0# =
  { mutable __split_fields__content "model_trace:" : __split_fields }
 
 function __split_fields__ref_3__projection #"s-traent.ads" 50 0 0# 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref_3__projection
 
 meta "inline : no" function __split_fields__ref_3__projection
 
 val __split_fields__havoc #"s-traent.ads" 50 0 0# 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type exception_id #"a-except.ads" 58 0 0# =
  { __split_fields "model_trace:" : __split_fields }
 
 function exception_id___projection #"a-except.ads" 58 0 0# 
   (a : exception_id) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function exception_id___projection
 
 meta "inline : no" function exception_id___projection
 
 function bool_eq #"a-except.ads" 58 0 0# 
   (a : exception_id) (b : exception_id) : bool =
  (if ((a.__split_fields.rec__main__ = b.__split_fields.rec__main__)) then (
   True) else (
   False))
 
 function user_eq #"a-except.ads" 58 0 0# 
   (a : exception_id) (b : exception_id) : bool
 
 function value__size #"a-except.ads" 58 0 0# 
   : int
 
 function object__size #"a-except.ads" 58 0 0# 
   (a : exception_id) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a : exception_id.
   ((object__size a) >= 0))
 
 function dummy #"a-except.ads" 58 0 0# 
   : exception_id
 
 type exception_id__ref #"a-except.ads" 58 0 0# =
  { mutable exception_id__content "model_trace:" : exception_id }
 
 function exception_id__ref___projection #"a-except.ads" 58 0 0# 
   (a : exception_id__ref) : exception_id =
  a.exception_id__content
 
 meta "model_projection" function exception_id__ref___projection
 
 meta "inline : no" function exception_id__ref___projection
 
 val exception_id__havoc #"a-except.ads" 58 0 0# 
   (x : exception_id__ref) : unit
  writes {x}

end

(* Module for defining the constant "null_id" defined at a-except.ads:61, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__null_id
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_id

 function null_id #"a-except.ads" 61 0 0# 
   : Ada__exceptions__exception_id.exception_id
 
 function attr__ATTRIBUTE_ADDRESS #"a-except.ads" 58 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "null_id" defined at a-except.ads:61, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__exceptions__null_id__axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T5s" defined at a-except.ads:297, created in Gnat2Why.Types.Translate_Type *)
module Ada__exceptions__exception_occurrence__T5s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t5s #"a-except.ads" 297 0 0# 
 
 function first #"a-except.ads" 297 0 0# 
   : int =
  1
 
 function last #"a-except.ads" 297 0 0# 
   : int =
  200
 
 predicate in_range #"a-except.ads" 297 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t5s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type t5s__ref #"a-except.ads" 297 0 0# =
  { mutable t5s__content "model_trace:" : t5s }
 
 function t5s__ref___projection #"a-except.ads" 297 0 0# 
   (a : t5s__ref) : t5s =
  a.t5s__content
 
 meta "model_projection" function t5s__ref___projection
 
 meta "inline : no" function t5s__ref___projection
 
 val t5s__havoc #"a-except.ads" 297 0 0# 
   (x : t5s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T6s" defined at a-except.ads:297, created in Gnat2Why.Types.Translate_Type *)
module Ada__exceptions__exception_occurrence__T6s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"a-except.ads" 297 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  200
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T7s" defined at a-except.ads:312, created in Gnat2Why.Types.Translate_Type *)
module Ada__exceptions__exception_occurrence__T7s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t7s #"a-except.ads" 312 0 0# 
 
 function first #"a-except.ads" 312 0 0# 
   : int =
  0
 
 function last #"a-except.ads" 312 0 0# 
   : int =
  50
 
 predicate in_range #"a-except.ads" 312 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t7s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type t7s__ref #"a-except.ads" 312 0 0# =
  { mutable t7s__content "model_trace:" : t7s }
 
 function t7s__ref___projection #"a-except.ads" 312 0 0# 
   (a : t7s__ref) : t7s =
  a.t7s__content
 
 meta "model_projection" function t7s__ref___projection
 
 meta "inline : no" function t7s__ref___projection
 
 val t7s__havoc #"a-except.ads" 312 0 0# 
   (x : t7s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Ttracebacks_arrayP1" defined at a-except.ads:283, created in Gnat2Why.Types.Translate_Type *)
module Ada__exceptions__Ttracebacks_arrayP1
 use import "_gnatprove_standard".Main
 use import "int".Int

 type ttracebacks_arrayP1 #"a-except.ads" 283 0 0# 
 
 function first #"a-except.ads" 283 0 0# 
   : int =
  1
 
 function last #"a-except.ads" 283 0 0# 
   : int =
  50
 
 predicate in_range #"a-except.ads" 283 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = ttracebacks_arrayP1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type ttracebacks_arrayP1__ref #"a-except.ads" 283 0 0# =
  { mutable ttracebacks_arrayP1__content "model_trace:" : ttracebacks_arrayP1 }
 
 function ttracebacks_arrayP1__ref___projection #"a-except.ads" 283 0 0# 
   (a : ttracebacks_arrayP1__ref) : ttracebacks_arrayP1 =
  a.ttracebacks_arrayP1__content
 
 meta "model_projection" function ttracebacks_arrayP1__ref___projection
 
 meta "inline : no" function ttracebacks_arrayP1__ref___projection
 
 val ttracebacks_arrayP1__havoc #"a-except.ads" 283 0 0# 
   (x : ttracebacks_arrayP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "tracebacks_array" defined at a-except.ads:283, created in Gnat2Why.Types.Translate_Type *)
module Ada__exceptions__tracebacks_array
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__traceback_entries__traceback_entry
 use        Array__Int__System__traceback_entries__traceback_entry

 type component_type #"a-except.ads" 283 0 0# =
  System__traceback_entries__traceback_entry.traceback_entry
 
 function first #"s-traent.ads" 50 0 0# 
   : int =
  1
 
 function last #"s-traent.ads" 50 0 0# 
   : int =
  50
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__System__traceback_entries__traceback_entry.map, 
 function array_bool_eq = Array__Int__System__traceback_entries__traceback_entry.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "exception_occurrence" defined at a-except.ads:63, created in Gnat2Why.Types.Translate_Type *)
module Ada__exceptions__exception_occurrence
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type __split_fields #"s-traent.ads" 50 0 0# =
  { rec__main__ "model_trace:" : Main.__private }
 
 function __split_fields_2__projection #"s-traent.ads" 50 0 0# 
   (a : __split_fields) : Main.__private =
  a.rec__main__
 
 meta "model_projection" function __split_fields_2__projection
 
 meta "inline : no" function __split_fields_2__projection
 
 type __split_fields__ref #"s-traent.ads" 50 0 0# =
  { mutable __split_fields__content "model_trace:" : __split_fields }
 
 function __split_fields__ref_4__projection #"s-traent.ads" 50 0 0# 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref_4__projection
 
 meta "inline : no" function __split_fields__ref_4__projection
 
 val __split_fields__havoc #"s-traent.ads" 50 0 0# 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type exception_occurrence #"a-except.ads" 63 0 0# =
  { __split_fields "model_trace:" : __split_fields }
 
 function exception_occurrence___projection #"a-except.ads" 63 0 0# 
   (a : exception_occurrence) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function exception_occurrence___projection
 
 meta "inline : no" function exception_occurrence___projection
 
 function bool_eq #"a-except.ads" 63 0 0# 
   (a : exception_occurrence) (b : exception_occurrence) : bool =
  (if ((a.__split_fields.rec__main__ = b.__split_fields.rec__main__)) then (
   True) else (
   False))
 
 function user_eq #"a-except.ads" 63 0 0# 
   (a : exception_occurrence) (b : exception_occurrence) : bool
 
 function value__size #"a-except.ads" 63 0 0# 
   : int
 
 function object__size #"a-except.ads" 63 0 0# 
   (a : exception_occurrence) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a : exception_occurrence.
   ((object__size a) >= 0))
 
 function dummy #"a-except.ads" 63 0 0# 
   : exception_occurrence
 
 type exception_occurrence__ref #"a-except.ads" 63 0 0# =
  { mutable exception_occurrence__content "model_trace:" : exception_occurrence }
 
 function exception_occurrence__ref___projection #"a-except.ads" 63 0 0# 
   (a : exception_occurrence__ref) : exception_occurrence =
  a.exception_occurrence__content
 
 meta "model_projection" function exception_occurrence__ref___projection
 
 meta "inline : no" function exception_occurrence__ref___projection
 
 val exception_occurrence__havoc #"a-except.ads" 63 0 0# 
   (x : exception_occurrence__ref) : unit
  writes {x}

end

(* Module for defining the constant "null_occurrence" defined at a-except.ads:68, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__null_occurrence
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_occurrence

 function null_occurrence #"a-except.ads" 68 0 0# 
   : Ada__exceptions__exception_occurrence.exception_occurrence
 
 function attr__ATTRIBUTE_ADDRESS #"a-except.ads" 63 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "null_occurrence" defined at a-except.ads:68, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__exceptions__null_occurrence__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "id" defined at a-except.ads:70, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__exception_name__id
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_id

 function id #"a-except.ads" 70 0 0# 
   : Ada__exceptions__exception_id.exception_id
 
 function attr__ATTRIBUTE_ADDRESS #"a-except.ads" 58 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "id" defined at a-except.ads:70, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__exceptions__exception_name__id__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "exception_name" defined at a-except.ads:70, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__exceptions__exception_name
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Ada__exceptions__exception_id

 function exception_name #"a-except.ads" 70 0 0# 
   (id : Ada__exceptions__exception_id.exception_id) : Standard__string.string

end

(* Module for defining the constant "x" defined at a-except.ads:72, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__exception_name__2__x
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_occurrence

 function x #"a-except.ads" 72 0 0# 
   : Ada__exceptions__exception_occurrence.exception_occurrence
 
 function attr__ATTRIBUTE_ADDRESS #"a-except.ads" 63 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-except.ads:72, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__exceptions__exception_name__2__x__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "exception_name__2" defined at a-except.ads:72, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__exceptions__exception_name__2
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Ada__exceptions__exception_occurrence

 function exception_name__2 #"a-except.ads" 72 0 0# 
   (x : Ada__exceptions__exception_occurrence.exception_occurrence) : Standard__string.string

end

(* Module for defining the constant "id" defined at a-except.ads:75, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__wide_exception_name__id
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_id

 function id #"a-except.ads" 75 0 0# 
   : Ada__exceptions__exception_id.exception_id
 
 function attr__ATTRIBUTE_ADDRESS #"a-except.ads" 58 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "id" defined at a-except.ads:75, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__exceptions__wide_exception_name__id__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "wide_exception_name" defined at a-except.ads:74, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__exceptions__wide_exception_name
 use import "_gnatprove_standard".Main
 use        Standard__wide_string
 use        Ada__exceptions__exception_id

 function wide_exception_name #"a-except.ads" 74 0 0# 
   (id : Ada__exceptions__exception_id.exception_id) : Standard__wide_string.wide_string

end

(* Module for defining the constant "x" defined at a-except.ads:79, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__wide_exception_name__2__x
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_occurrence

 function x #"a-except.ads" 79 0 0# 
   : Ada__exceptions__exception_occurrence.exception_occurrence
 
 function attr__ATTRIBUTE_ADDRESS #"a-except.ads" 63 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-except.ads:79, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__exceptions__wide_exception_name__2__x__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "wide_exception_name__2" defined at a-except.ads:78, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__exceptions__wide_exception_name__2
 use import "_gnatprove_standard".Main
 use        Standard__wide_string
 use        Ada__exceptions__exception_occurrence

 function wide_exception_name__2 #"a-except.ads" 78 0 0# 
   (x : Ada__exceptions__exception_occurrence.exception_occurrence) : Standard__wide_string.wide_string

end

(* Module for defining the constant "id" defined at a-except.ads:83, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__wide_wide_exception_name__id
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_id

 function id #"a-except.ads" 83 0 0# 
   : Ada__exceptions__exception_id.exception_id
 
 function attr__ATTRIBUTE_ADDRESS #"a-except.ads" 58 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "id" defined at a-except.ads:83, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__exceptions__wide_wide_exception_name__id__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "wide_wide_exception_name" defined at a-except.ads:82, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__exceptions__wide_wide_exception_name
 use import "_gnatprove_standard".Main
 use        Standard__wide_wide_string
 use        Ada__exceptions__exception_id

 function wide_wide_exception_name #"a-except.ads" 82 0 0# 
   (id : Ada__exceptions__exception_id.exception_id) : Standard__wide_wide_string.wide_wide_string

end

(* Module for defining the constant "x" defined at a-except.ads:87, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__wide_wide_exception_name__2__x
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_occurrence

 function x #"a-except.ads" 87 0 0# 
   : Ada__exceptions__exception_occurrence.exception_occurrence
 
 function attr__ATTRIBUTE_ADDRESS #"a-except.ads" 63 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-except.ads:87, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__exceptions__wide_wide_exception_name__2__x__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "wide_wide_exception_name__2" defined at a-except.ads:86, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__exceptions__wide_wide_exception_name__2
 use import "_gnatprove_standard".Main
 use        Standard__wide_wide_string
 use        Ada__exceptions__exception_occurrence

 function wide_wide_exception_name__2 #"a-except.ads" 86 0 0# 
   (x : Ada__exceptions__exception_occurrence.exception_occurrence) : Standard__wide_wide_string.wide_wide_string

end

(* Module for defining the constant "e" defined at a-except.ads:90, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__raise_exception__e
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_id

 function e #"a-except.ads" 90 0 0# 
   : Ada__exceptions__exception_id.exception_id
 
 function attr__ATTRIBUTE_ADDRESS #"a-except.ads" 58 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "e" defined at a-except.ads:90, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__exceptions__raise_exception__e__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "message" defined at a-except.ads:90, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__raise_exception__message
 use import "_gnatprove_standard".Main
 use        Standard__string

 function message #"a-except.ads" 90 0 0# "model_projected" "model_trace:6452" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "message" defined at a-except.ads:90, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__exceptions__raise_exception__message__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "x" defined at a-except.ads:94, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__exception_message__x
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_occurrence

 function x #"a-except.ads" 94 0 0# 
   : Ada__exceptions__exception_occurrence.exception_occurrence
 
 function attr__ATTRIBUTE_ADDRESS #"a-except.ads" 63 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-except.ads:94, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__exceptions__exception_message__x__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "exception_message" defined at a-except.ads:94, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__exceptions__exception_message
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Ada__exceptions__exception_occurrence

 function exception_message #"a-except.ads" 94 0 0# 
   (x : Ada__exceptions__exception_occurrence.exception_occurrence) : Standard__string.string

end

(* Module for defining the constant "x" defined at a-except.ads:96, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__reraise_occurrence__x
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_occurrence

 function x #"a-except.ads" 96 0 0# 
   : Ada__exceptions__exception_occurrence.exception_occurrence
 
 function attr__ATTRIBUTE_ADDRESS #"a-except.ads" 63 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-except.ads:96, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__exceptions__reraise_occurrence__x__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "x" defined at a-except.ads:102, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__exception_identity__x
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_occurrence

 function x #"a-except.ads" 102 0 0# 
   : Ada__exceptions__exception_occurrence.exception_occurrence
 
 function attr__ATTRIBUTE_ADDRESS #"a-except.ads" 63 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-except.ads:102, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__exceptions__exception_identity__x__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "exception_identity" defined at a-except.ads:102, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__exceptions__exception_identity
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_id
 use        Ada__exceptions__exception_occurrence

 function exception_identity #"a-except.ads" 102 0 0# 
   (x : Ada__exceptions__exception_occurrence.exception_occurrence) : Ada__exceptions__exception_id.exception_id

end

(* Module for defining the constant "x" defined at a-except.ads:104, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__exception_information__x
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_occurrence

 function x #"a-except.ads" 104 0 0# 
   : Ada__exceptions__exception_occurrence.exception_occurrence
 
 function attr__ATTRIBUTE_ADDRESS #"a-except.ads" 63 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-except.ads:104, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__exceptions__exception_information__x__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "exception_information" defined at a-except.ads:104, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__exceptions__exception_information
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Ada__exceptions__exception_occurrence

 function exception_information #"a-except.ads" 104 0 0# 
   (x : Ada__exceptions__exception_occurrence.exception_occurrence) : Standard__string.string

end

(* Module for defining the constant "source" defined at a-except.ads:125, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__save_occurrence__source
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_occurrence

 function source #"a-except.ads" 125 0 0# 
   : Ada__exceptions__exception_occurrence.exception_occurrence
 
 function attr__ATTRIBUTE_ADDRESS #"a-except.ads" 63 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "source" defined at a-except.ads:125, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__exceptions__save_occurrence__source__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "source" defined at a-except.ads:128, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__save_occurrence__2__source
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_occurrence

 function source #"a-except.ads" 128 0 0# 
   : Ada__exceptions__exception_occurrence.exception_occurrence
 
 function attr__ATTRIBUTE_ADDRESS #"a-except.ads" 63 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "source" defined at a-except.ads:128, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__exceptions__save_occurrence__2__source__axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "code_loc" defined at a-except.ads:159, created in Gnat2Why.Types.Translate_Type *)
module Ada__exceptions__code_loc
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32

 type code_loc #"a-except.ads" 159 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"a-except.ads" 159 0 0# 
   : BV32.t =
  ( BV32.of_int 0 )
 
 function first #"a-except.ads" 159 0 0# 
   : BV32.t =
  ( BV32.of_int 0 )
 
 function last #"a-except.ads" 159 0 0# 
   : BV32.t =
  ( BV32.of_int 4294967295 )
 
 function first_int #"a-except.ads" 159 0 0# 
   : int =
  0
 
 function last_int #"a-except.ads" 159 0 0# 
   : int =
  4294967295
 
 predicate in_range #"a-except.ads" 159 0 0# 
   (x : BV32.t)  =
  ( (BV32.ule first x) /\ (BV32.ule x last) )
 
 predicate in_range_int #"a-except.ads" 159 0 0# 
   (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Static_Modular_lt32 with
 type t = code_loc, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function attr__ATTRIBUTE_MODULUS = attr__ATTRIBUTE_MODULUS, 
 predicate in_range_int = in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type code_loc__ref #"a-except.ads" 159 0 0# =
  { mutable code_loc__content "model_trace:" : code_loc }
 
 function code_loc__ref___projection #"a-except.ads" 159 0 0# 
   (a : code_loc__ref) : code_loc =
  a.code_loc__content
 
 meta "model_projection" function code_loc__ref___projection
 
 meta "inline : no" function code_loc__ref___projection
 
 val code_loc__havoc #"a-except.ads" 159 0 0# 
   (x : code_loc__ref) : unit
  writes {x}

end

(* Module for defining the constant "null_loc" defined at a-except.ads:164, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__null_loc
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function null_loc #"a-except.ads" 164 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"a-except.ads" 159 0 0# 
   : int

end

(* Module for defining the constant "x" defined at a-except.ads:169, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__eid_to_string__x
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_id

 function x #"a-except.ads" 169 0 0# 
   : Ada__exceptions__exception_id.exception_id
 
 function attr__ATTRIBUTE_ADDRESS #"a-except.ads" 58 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-except.ads:169, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__exceptions__eid_to_string__x__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "eid_to_string" defined at a-except.ads:169, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__exceptions__eid_to_string
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Ada__exceptions__exception_id

 function eid_to_string #"a-except.ads" 169 0 0# 
   (x : Ada__exceptions__exception_id.exception_id) : Standard__string.string

end

(* Module for defining the constant "s" defined at a-except.ads:170, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__string_to_eid__s
 use import "_gnatprove_standard".Main
 use        Standard__string

 function s #"a-except.ads" 170 0 0# "model_projected" "model_trace:6694" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s" defined at a-except.ads:170, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__exceptions__string_to_eid__s__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "string_to_eid" defined at a-except.ads:170, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__exceptions__string_to_eid
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Ada__exceptions__exception_id

 function string_to_eid #"a-except.ads" 170 0 0# 
   (s : Standard__string.string) : Ada__exceptions__exception_id.exception_id

end

(* Module for defining the constant "x" defined at a-except.ads:180, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__exception_name_simple__x
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_occurrence

 function x #"a-except.ads" 180 0 0# 
   : Ada__exceptions__exception_occurrence.exception_occurrence
 
 function attr__ATTRIBUTE_ADDRESS #"a-except.ads" 63 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-except.ads:180, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__exceptions__exception_name_simple__x__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "exception_name_simple" defined at a-except.ads:180, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__exceptions__exception_name_simple
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Ada__exceptions__exception_occurrence

 function exception_name_simple #"a-except.ads" 180 0 0# 
   (x : Ada__exceptions__exception_occurrence.exception_occurrence) : Standard__string.string

end

(* Module for defining the constant "e" defined at a-except.ads:188, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__raise_exception_always__e
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_id

 function e #"a-except.ads" 188 0 0# 
   : Ada__exceptions__exception_id.exception_id
 
 function attr__ATTRIBUTE_ADDRESS #"a-except.ads" 58 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "e" defined at a-except.ads:188, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__exceptions__raise_exception_always__e__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "message" defined at a-except.ads:188, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__raise_exception_always__message
 use import "_gnatprove_standard".Main
 use        Standard__string

 function message #"a-except.ads" 188 0 0# "model_projected" "model_trace:6759" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "message" defined at a-except.ads:188, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__exceptions__raise_exception_always__message__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "e" defined at a-except.ads:198, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__raise_from_signal_handler__e
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_id

 function e #"a-except.ads" 198 0 0# 
   : Ada__exceptions__exception_id.exception_id
 
 function attr__ATTRIBUTE_ADDRESS #"a-except.ads" 58 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "e" defined at a-except.ads:198, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__exceptions__raise_from_signal_handler__e__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "m" defined at a-except.ads:199, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__raise_from_signal_handler__m
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function m #"a-except.ads" 199 0 0# 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 108 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "m" defined at a-except.ads:199, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__exceptions__raise_from_signal_handler__m__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "x" defined at a-except.ads:216, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__raise_from_controlled_operation__x
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_occurrence

 function x #"a-except.ads" 216 0 0# 
   : Ada__exceptions__exception_occurrence.exception_occurrence
 
 function attr__ATTRIBUTE_ADDRESS #"a-except.ads" 63 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-except.ads:216, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__exceptions__raise_from_controlled_operation__x__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "x" defined at a-except.ads:231, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__reraise_occurrence_always__x
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_occurrence

 function x #"a-except.ads" 231 0 0# 
   : Ada__exceptions__exception_occurrence.exception_occurrence
 
 function attr__ATTRIBUTE_ADDRESS #"a-except.ads" 63 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-except.ads:231, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__exceptions__reraise_occurrence_always__x__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "x" defined at a-except.ads:238, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__reraise_occurrence_no_defer__x
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_occurrence

 function x #"a-except.ads" 238 0 0# 
   : Ada__exceptions__exception_occurrence.exception_occurrence
 
 function attr__ATTRIBUTE_ADDRESS #"a-except.ads" 63 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-except.ads:238, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__exceptions__reraise_occurrence_no_defer__x__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "triggered_by_abort" defined at a-except.ads:245, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__exceptions__triggered_by_abort
 use import "_gnatprove_standard".Main

 function triggered_by_abort #"a-except.ads" 245 0 0# 
   (__void_param : unit) : bool

end

(* Module for defining the constant "left" defined at a-except.ads:319, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__Oeq__left
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_occurrence

 function left #"a-except.ads" 319 0 0# 
   : Ada__exceptions__exception_occurrence.exception_occurrence
 
 function attr__ATTRIBUTE_ADDRESS #"a-except.ads" 63 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at a-except.ads:319, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__exceptions__Oeq__left__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at a-except.ads:319, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__Oeq__right
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_occurrence

 function right #"a-except.ads" 319 0 0# 
   : Ada__exceptions__exception_occurrence.exception_occurrence
 
 function attr__ATTRIBUTE_ADDRESS #"a-except.ads" 63 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at a-except.ads:319, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__exceptions__Oeq__right__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Oeq" defined at a-except.ads:319, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__exceptions__Oeq
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_occurrence

 function oeq #"a-except.ads" 319 0 0# 
   (left : Ada__exceptions__exception_occurrence.exception_occurrence) (right : Ada__exceptions__exception_occurrence.exception_occurrence) : bool

end

(* Module for defining the constant "x" defined at a-except.ads:326, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__get_exception_machine_occurrence__x
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_occurrence

 function x #"a-except.ads" 326 0 0# 
   : Ada__exceptions__exception_occurrence.exception_occurrence
 
 function attr__ATTRIBUTE_ADDRESS #"a-except.ads" 63 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-except.ads:326, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__exceptions__get_exception_machine_occurrence__x__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_exception_machine_occurrence" defined at a-except.ads:325, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__exceptions__get_exception_machine_occurrence
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        Ada__exceptions__exception_occurrence

 function get_exception_machine_occurrence #"a-except.ads" 325 0 0# 
   (x : Ada__exceptions__exception_occurrence.exception_occurrence) : BV32.t

end

(* Module for defining the constant "x" defined at a-except.ads:334, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__eo_to_string__x
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_occurrence

 function x #"a-except.ads" 334 0 0# 
   : Ada__exceptions__exception_occurrence.exception_occurrence
 
 function attr__ATTRIBUTE_ADDRESS #"a-except.ads" 63 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-except.ads:334, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__exceptions__eo_to_string__x__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "eo_to_string" defined at a-except.ads:334, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__exceptions__eo_to_string
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Ada__exceptions__exception_occurrence

 function eo_to_string #"a-except.ads" 334 0 0# 
   (x : Ada__exceptions__exception_occurrence.exception_occurrence) : Standard__string.string

end

(* Module for defining the constant "s" defined at a-except.ads:335, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__string_to_eo__s
 use import "_gnatprove_standard".Main
 use        Standard__string

 function s #"a-except.ads" 335 0 0# "model_projected" "model_trace:7165" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s" defined at a-except.ads:335, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__exceptions__string_to_eo__s__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "string_to_eo" defined at a-except.ads:335, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__exceptions__string_to_eo
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Ada__exceptions__exception_occurrence

 function string_to_eo #"a-except.ads" 335 0 0# 
   (s : Standard__string.string) : Ada__exceptions__exception_occurrence.exception_occurrence

end

(* Module for axiomatizing type "T9s" defined at a-except.ads:343, created in Gnat2Why.Types.Translate_Type *)
module Ada__exceptions__T9s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t9s #"a-except.ads" 343 0 0# 
 
 function first #"a-except.ads" 343 0 0# 
   : int =
  1
 
 function last #"a-except.ads" 343 0 0# 
   : int =
  200
 
 predicate in_range #"a-except.ads" 343 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t9s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type t9s__ref #"a-except.ads" 343 0 0# =
  { mutable t9s__content "model_trace:" : t9s }
 
 function t9s__ref___projection #"a-except.ads" 343 0 0# 
   (a : t9s__ref) : t9s =
  a.t9s__content
 
 meta "model_projection" function t9s__ref___projection
 
 meta "inline : no" function t9s__ref___projection
 
 val t9s__havoc #"a-except.ads" 343 0 0# 
   (x : t9s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T10s" defined at a-except.ads:343, created in Gnat2Why.Types.Translate_Type *)
module Ada__exceptions__T10s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"a-except.ads" 343 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  200
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T11s" defined at a-except.ads:347, created in Gnat2Why.Types.Translate_Type *)
module Ada__exceptions__T11s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t11s #"a-except.ads" 347 0 0# 
 
 function first #"a-except.ads" 347 0 0# 
   : int =
  1
 
 function last #"a-except.ads" 347 0 0# 
   : int =
  50
 
 predicate in_range #"a-except.ads" 347 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t11s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type t11s__ref #"a-except.ads" 347 0 0# =
  { mutable t11s__content "model_trace:" : t11s }
 
 function t11s__ref___projection #"a-except.ads" 347 0 0# 
   (a : t11s__ref) : t11s =
  a.t11s__content
 
 meta "model_projection" function t11s__ref___projection
 
 meta "inline : no" function t11s__ref___projection
 
 val t11s__havoc #"a-except.ads" 347 0 0# 
   (x : t11s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T12s" defined at a-except.ads:347, created in Gnat2Why.Types.Translate_Type *)
module Ada__exceptions__T12s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__traceback_entries__traceback_entry
 use        Array__Int__System__traceback_entries__traceback_entry

 type component_type #"a-except.ads" 347 0 0# =
  System__traceback_entries__traceback_entry.traceback_entry
 
 function first #"s-traent.ads" 50 0 0# 
   : int =
  1
 
 function last #"s-traent.ads" 50 0 0# 
   : int =
  50
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__System__traceback_entries__traceback_entry.map, 
 function array_bool_eq = Array__Int__System__traceback_entries__traceback_entry.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "Tfloat_numberB" defined at pump_unit.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__Tfloat_numberB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type tfloat_numberB #"pump_unit.ads" 7 0 0# 
 
 function inv_small #"pump_unit.ads" 7 0 0# 
   : Main.__fixed =
  100
 
 function first #"pump_unit.ads" 7 0 0# 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last #"pump_unit.ads" 7 0 0# 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range #"pump_unit.ads" 7 0 0# 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = tfloat_numberB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function inv_small = inv_small
 
 type tfloat_numberB__ref #"pump_unit.ads" 7 0 0# =
  { mutable tfloat_numberB__content "model_trace:" : tfloat_numberB }
 
 function tfloat_numberB__ref_2__projection #"pump_unit.ads" 7 0 0# 
   (a : tfloat_numberB__ref) : tfloat_numberB =
  a.tfloat_numberB__content
 
 meta "model_projection" function tfloat_numberB__ref_2__projection
 
 meta "inline : no" function tfloat_numberB__ref_2__projection
 
 val tfloat_numberB__havoc #"pump_unit.ads" 7 0 0# 
   (x : tfloat_numberB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "float_number" defined at pump_unit.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__float_number
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type float_number #"pump_unit.ads" 7 0 0# 
 
 function inv_small #"pump_unit.ads" 7 0 0# 
   : Main.__fixed =
  100
 
 function first #"pump_unit.ads" 7 0 0# 
   : Main.__fixed =
  ( -9999999999 )
 
 function last #"pump_unit.ads" 7 0 0# 
   : Main.__fixed =
  9999999999
 
 predicate in_range #"pump_unit.ads" 7 0 0# 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = float_number, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function inv_small = inv_small
 
 type float_number__ref #"pump_unit.ads" 7 0 0# =
  { mutable float_number__content "model_trace:" : float_number }
 
 function float_number__ref_2__projection #"pump_unit.ads" 7 0 0# 
   (a : float_number__ref) : float_number =
  a.float_number__content
 
 meta "model_projection" function float_number__ref_2__projection
 
 meta "inline : no" function float_number__ref_2__projection
 
 val float_number__havoc #"pump_unit.ads" 7 0 0# 
   (x : float_number__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Tunit_id_typeP1" defined at pump_unit.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__Tunit_id_typeP1
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tunit_id_typeP1 #"pump_unit.ads" 8 0 0# 
 
 function first #"pump_unit.ads" 8 0 0# 
   : int =
  1
 
 function last #"pump_unit.ads" 8 0 0# 
   : int =
  6
 
 predicate in_range #"pump_unit.ads" 8 0 0# 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tunit_id_typeP1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 type tunit_id_typeP1__ref #"pump_unit.ads" 8 0 0# =
  { mutable tunit_id_typeP1__content "model_trace:" : tunit_id_typeP1 }
 
 function tunit_id_typeP1__ref___projection #"pump_unit.ads" 8 0 0# 
   (a : tunit_id_typeP1__ref) : tunit_id_typeP1 =
  a.tunit_id_typeP1__content
 
 meta "model_projection" function tunit_id_typeP1__ref___projection
 
 meta "inline : no" function tunit_id_typeP1__ref___projection
 
 val tunit_id_typeP1__havoc #"pump_unit.ads" 8 0 0# 
   (x : tunit_id_typeP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "unit_id_type" defined at pump_unit.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__unit_id_type
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"pump_unit.ads" 8 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  6
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T1s" defined at pump_unit.ads:16, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__pump_unit__T1s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  6
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "pump_unit" defined at pump_unit.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__pump_unit
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__float_number
 use        Pump__fuel_types
 use        Pump__state_type
 use        Pump__nozzle_type
 use        Pump__pump
 use        Pump_unit__unit_id_type
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 type __split_fields #"system.ads" 1 0 0# =
  { rec__id "model_trace:.4508" : Array__Int__Standard__character.map; rec__is_using "model_trace:.4519" : bool; rec__is_paid "model_trace:.4530" : bool; rec__to_pay : Pump__float_number.float_number; rec__pumped : Pump__float_number.float_number; rec__pump_active_fuel "model_trace:.4567" : Pump__fuel_types.fuel_types; rec__pump_active_state "model_trace:.4582" : Pump__state_type.state_type; rec__pump_nozzle_state "model_trace:.4597" : Pump__nozzle_type.nozzle_type; rec__pump_91 "model_trace:.4612" : Pump__pump.pump; rec__pump_95 "model_trace:.4624" : Pump__pump.pump; rec__pump_diesel "model_trace:.4636" : Pump__pump.pump }
 
 function __split_fields_ID__projection #"pump.ads" 20 0 0# "model_trace:.4508" 
   (a : __split_fields) : Array__Int__Standard__character.map =
  a.rec__id
 
 meta "model_projection" function __split_fields_ID__projection
 
 meta "inline : no" function __split_fields_ID__projection
 
 function __split_fields_IS_USING__projection #"pump_unit.ads" 14 0 0# "model_trace:.4519" 
   (a : __split_fields) : bool =
  a.rec__is_using
 
 meta "model_projection" function __split_fields_IS_USING__projection
 
 meta "inline : no" function __split_fields_IS_USING__projection
 
 function __split_fields_IS_PAID__projection #"pump_unit.ads" 14 0 0# "model_trace:.4530" 
   (a : __split_fields) : bool =
  a.rec__is_paid
 
 meta "model_projection" function __split_fields_IS_PAID__projection
 
 meta "inline : no" function __split_fields_IS_PAID__projection
 
 function __split_fields_PUMP_ACTIVE_FUEL__projection #"pump_unit.ads" 14 0 0# "model_trace:.4567" 
   (a : __split_fields) : Pump__fuel_types.fuel_types =
  a.rec__pump_active_fuel
 
 meta "model_projection" function __split_fields_PUMP_ACTIVE_FUEL__projection
 
 meta "inline : no" function __split_fields_PUMP_ACTIVE_FUEL__projection
 
 function __split_fields_PUMP_ACTIVE_STATE__projection #"pump_unit.ads" 14 0 0# "model_trace:.4582" 
   (a : __split_fields) : Pump__state_type.state_type =
  a.rec__pump_active_state
 
 meta "model_projection" function __split_fields_PUMP_ACTIVE_STATE__projection
 
 meta "inline : no" function __split_fields_PUMP_ACTIVE_STATE__projection
 
 function __split_fields_PUMP_NOZZLE_STATE__projection #"pump_unit.ads" 14 0 0# "model_trace:.4597" 
   (a : __split_fields) : Pump__nozzle_type.nozzle_type =
  a.rec__pump_nozzle_state
 
 meta "model_projection" function __split_fields_PUMP_NOZZLE_STATE__projection
 
 meta "inline : no" function __split_fields_PUMP_NOZZLE_STATE__projection
 
 function __split_fields_PUMP_91__projection #"pump_unit.ads" 14 0 0# "model_trace:.4612" 
   (a : __split_fields) : Pump__pump.pump =
  a.rec__pump_91
 
 meta "model_projection" function __split_fields_PUMP_91__projection
 
 meta "inline : no" function __split_fields_PUMP_91__projection
 
 function __split_fields_PUMP_95__projection #"pump_unit.ads" 14 0 0# "model_trace:.4624" 
   (a : __split_fields) : Pump__pump.pump =
  a.rec__pump_95
 
 meta "model_projection" function __split_fields_PUMP_95__projection
 
 meta "inline : no" function __split_fields_PUMP_95__projection
 
 function __split_fields_PUMP_Diesel__projection #"pump_unit.ads" 14 0 0# "model_trace:.4636" 
   (a : __split_fields) : Pump__pump.pump =
  a.rec__pump_diesel
 
 meta "model_projection" function __split_fields_PUMP_Diesel__projection
 
 meta "inline : no" function __split_fields_PUMP_Diesel__projection
 
 type __split_fields__ref #"pump_unit.ads" 14 0 0# =
  { mutable __split_fields__content "model_trace:" : __split_fields }
 
 function __split_fields__ref_5__projection #"pump_unit.ads" 14 0 0# 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref_5__projection
 
 meta "inline : no" function __split_fields__ref_5__projection
 
 val __split_fields__havoc #"pump_unit.ads" 14 0 0# 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type pump_unit #"pump_unit.ads" 14 0 0# =
  { __split_fields "model_trace:" : __split_fields }
 
 function pump_unit___projection #"pump_unit.ads" 14 0 0# 
   (a : pump_unit) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function pump_unit___projection
 
 meta "inline : no" function pump_unit___projection
 
 predicate id__pred #"pump_unit.ads" 14 0 0# 
   (a : pump_unit)  =
  true
 
 val rec__id_ #"pump_unit.ads" 14 0 0# 
   (a : pump_unit) : Array__Int__Standard__character.map
  requires { (id__pred a) }
  ensures { (result = a.__split_fields.rec__id) }
 
 predicate is_using__pred #"pump_unit.ads" 14 0 0# 
   (a : pump_unit)  =
  true
 
 val rec__is_using_ #"pump_unit.ads" 14 0 0# 
   (a : pump_unit) : bool
  requires { (is_using__pred a) }
  ensures { (result = a.__split_fields.rec__is_using) }
 
 predicate is_paid__pred #"pump_unit.ads" 14 0 0# 
   (a : pump_unit)  =
  true
 
 val rec__is_paid_ #"pump_unit.ads" 14 0 0# 
   (a : pump_unit) : bool
  requires { (is_paid__pred a) }
  ensures { (result = a.__split_fields.rec__is_paid) }
 
 predicate to_pay__pred #"pump_unit.ads" 14 0 0# 
   (a : pump_unit)  =
  true
 
 val rec__to_pay_ #"pump_unit.ads" 14 0 0# 
   (a : pump_unit) : Pump__float_number.float_number
  requires { (to_pay__pred a) }
  ensures { (result = a.__split_fields.rec__to_pay) }
 
 predicate pumped__pred #"pump_unit.ads" 14 0 0# 
   (a : pump_unit)  =
  true
 
 val rec__pumped_ #"pump_unit.ads" 14 0 0# 
   (a : pump_unit) : Pump__float_number.float_number
  requires { (pumped__pred a) }
  ensures { (result = a.__split_fields.rec__pumped) }
 
 predicate pump_active_fuel__pred #"pump_unit.ads" 14 0 0# 
   (a : pump_unit)  =
  true
 
 val rec__pump_active_fuel_ #"pump_unit.ads" 14 0 0# 
   (a : pump_unit) : Pump__fuel_types.fuel_types
  requires { (pump_active_fuel__pred a) }
  ensures { (result = a.__split_fields.rec__pump_active_fuel) }
 
 predicate pump_active_state__pred #"pump_unit.ads" 14 0 0# 
   (a : pump_unit)  =
  true
 
 val rec__pump_active_state_ #"pump_unit.ads" 14 0 0# 
   (a : pump_unit) : Pump__state_type.state_type
  requires { (pump_active_state__pred a) }
  ensures { (result = a.__split_fields.rec__pump_active_state) }
 
 predicate pump_nozzle_state__pred #"pump_unit.ads" 14 0 0# 
   (a : pump_unit)  =
  true
 
 val rec__pump_nozzle_state_ #"pump_unit.ads" 14 0 0# 
   (a : pump_unit) : Pump__nozzle_type.nozzle_type
  requires { (pump_nozzle_state__pred a) }
  ensures { (result = a.__split_fields.rec__pump_nozzle_state) }
 
 predicate pump_91__pred #"pump_unit.ads" 14 0 0# 
   (a : pump_unit)  =
  true
 
 val rec__pump_91_ #"pump_unit.ads" 14 0 0# 
   (a : pump_unit) : Pump__pump.pump
  requires { (pump_91__pred a) }
  ensures { (result = a.__split_fields.rec__pump_91) }
 
 predicate pump_95__pred #"pump_unit.ads" 14 0 0# 
   (a : pump_unit)  =
  true
 
 val rec__pump_95_ #"pump_unit.ads" 14 0 0# 
   (a : pump_unit) : Pump__pump.pump
  requires { (pump_95__pred a) }
  ensures { (result = a.__split_fields.rec__pump_95) }
 
 predicate pump_diesel__pred #"pump_unit.ads" 14 0 0# 
   (a : pump_unit)  =
  true
 
 val rec__pump_diesel_ #"pump_unit.ads" 14 0 0# 
   (a : pump_unit) : Pump__pump.pump
  requires { (pump_diesel__pred a) }
  ensures { (result = a.__split_fields.rec__pump_diesel) }
 
 function bool_eq #"pump_unit.ads" 14 0 0# 
   (a : pump_unit) (b : pump_unit) : bool =
  (if (( ( ( ( ( ( ( ( ( ( ((Pump_unit__unit_id_type.bool_eq a.__split_fields.rec__id b.__split_fields.rec__id) = True) /\ (a.__split_fields.rec__is_using = b.__split_fields.rec__is_using) ) /\ (a.__split_fields.rec__is_paid = b.__split_fields.rec__is_paid) ) /\ ((Pump__float_number.to_real a.__split_fields.rec__to_pay) = (Pump__float_number.to_real b.__split_fields.rec__to_pay)) ) /\ ((Pump__float_number.to_real a.__split_fields.rec__pumped) = (Pump__float_number.to_real b.__split_fields.rec__pumped)) ) /\ ((Pump__fuel_types.to_rep a.__split_fields.rec__pump_active_fuel) = (Pump__fuel_types.to_rep b.__split_fields.rec__pump_active_fuel)) ) /\ ((Pump__state_type.to_rep a.__split_fields.rec__pump_active_state) = (Pump__state_type.to_rep b.__split_fields.rec__pump_active_state)) ) /\ ((Pump__nozzle_type.to_rep a.__split_fields.rec__pump_nozzle_state) = (Pump__nozzle_type.to_rep b.__split_fields.rec__pump_nozzle_state)) ) /\ ((Pump__pump.bool_eq a.__split_fields.rec__pump_91 b.__split_fields.rec__pump_91) = True) ) /\ ((Pump__pump.bool_eq a.__split_fields.rec__pump_95 b.__split_fields.rec__pump_95) = True) ) /\ ((Pump__pump.bool_eq a.__split_fields.rec__pump_diesel b.__split_fields.rec__pump_diesel) = True) )) then (
   True) else (
   False))
 
 function user_eq #"pump_unit.ads" 14 0 0# 
   (a : pump_unit) (b : pump_unit) : bool
 
 function value__size #"pump_unit.ads" 14 0 0# 
   : int
 
 function object__size #"pump_unit.ads" 14 0 0# 
   (a : pump_unit) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a : pump_unit.
   ((object__size a) >= 0))
 
 function dummy #"pump_unit.ads" 14 0 0# 
   : pump_unit
 
 type pump_unit__ref #"pump_unit.ads" 14 0 0# =
  { mutable pump_unit__content "model_trace:" : pump_unit }
 
 function pump_unit__ref___projection #"pump_unit.ads" 14 0 0# 
   (a : pump_unit__ref) : pump_unit =
  a.pump_unit__content
 
 meta "model_projection" function pump_unit__ref___projection
 
 meta "inline : no" function pump_unit__ref___projection
 
 val pump_unit__havoc #"pump_unit.ads" 14 0 0# 
   (x : pump_unit__ref) : unit
  writes {x}

end

(* Module for defining the constant "pumpunit" defined at pump_unit.ads:30, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__get_pump__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 function pumpunit #"pump_unit.ads" 30 0 0# "model_projected" "model_trace:4657" 
   : Pump_unit__pump_unit.pump_unit
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__get_pump__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "fueltype" defined at pump_unit.ads:30, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__get_pump__fueltype
 use import "_gnatprove_standard".Main

 function fueltype #"pump_unit.ads" 30 0 0# "model" "model_trace:4666" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 7 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "fueltype" defined at pump_unit.ads:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__get_pump__fueltype__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_pump" defined at pump_unit.ads:30, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__get_pump
 use import "_gnatprove_standard".Main
 use        Pump__pump
 use        Pump_unit__pump_unit

 function get_pump #"pump_unit.ads" 30 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) (fueltype : int) : Pump__pump.pump

end

(* Module for defining the constant "pumpunit" defined at pump_unit.ads:31, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__get_tanks_size__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 function pumpunit #"pump_unit.ads" 31 0 0# "model_projected" "model_trace:4689" 
   : Pump_unit__pump_unit.pump_unit
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:31, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__get_tanks_size__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "fueltype" defined at pump_unit.ads:31, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__get_tanks_size__fueltype
 use import "_gnatprove_standard".Main

 function fueltype #"pump_unit.ads" 31 0 0# "model" "model_trace:4698" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 7 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "fueltype" defined at pump_unit.ads:31, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__get_tanks_size__fueltype__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_tanks_size" defined at pump_unit.ads:31, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__get_tanks_size
 use import "_gnatprove_standard".Main
 use        Pump__float_number
 use        Pump_unit__pump_unit

 function get_tanks_size #"pump_unit.ads" 31 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) (fueltype : int) : Pump__float_number.float_number

end

(* Module for defining the constant "pumpunit" defined at pump_unit.ads:32, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__get_id__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 function pumpunit #"pump_unit.ads" 32 0 0# "model_projected" "model_trace:4721" 
   : Pump_unit__pump_unit.pump_unit
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:32, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__get_id__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_id" defined at pump_unit.ads:32, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__get_id
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit
 use        Array__Int__Standard__character

 function get_id #"pump_unit.ads" 32 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) : Array__Int__Standard__character.map

end

(* Module for defining the constant "pumpunit" defined at pump_unit.ads:33, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__get_to_pay__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 function pumpunit #"pump_unit.ads" 33 0 0# "model_projected" "model_trace:4740" 
   : Pump_unit__pump_unit.pump_unit
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:33, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__get_to_pay__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_to_pay" defined at pump_unit.ads:33, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__get_to_pay
 use import "_gnatprove_standard".Main
 use        Pump__float_number
 use        Pump_unit__pump_unit

 function get_to_pay #"pump_unit.ads" 33 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) : Pump__float_number.float_number

end

(* Module for defining the constant "pumpunit" defined at pump_unit.ads:34, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__get_pumped__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 function pumpunit #"pump_unit.ads" 34 0 0# "model_projected" "model_trace:4761" 
   : Pump_unit__pump_unit.pump_unit
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__get_pumped__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_pumped" defined at pump_unit.ads:34, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__get_pumped
 use import "_gnatprove_standard".Main
 use        Pump__float_number
 use        Pump_unit__pump_unit

 function get_pumped #"pump_unit.ads" 34 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) : Pump__float_number.float_number

end

(* Module for defining the constant "pumpunit" defined at pump_unit.ads:35, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__get_fuel__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 function pumpunit #"pump_unit.ads" 35 0 0# "model_projected" "model_trace:4782" 
   : Pump_unit__pump_unit.pump_unit
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__get_fuel__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_fuel" defined at pump_unit.ads:35, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__get_fuel
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 function get_fuel #"pump_unit.ads" 35 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) : int

end

(* Module for defining the constant "pumpunit" defined at pump_unit.ads:36, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__unit_is_using__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 function pumpunit #"pump_unit.ads" 36 0 0# "model_projected" "model_trace:4803" 
   : Pump_unit__pump_unit.pump_unit
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:36, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__unit_is_using__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "unit_is_using" defined at pump_unit.ads:36, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__unit_is_using
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 function unit_is_using #"pump_unit.ads" 36 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) : bool

end

(* Module for defining the constant "pumpunit" defined at pump_unit.ads:37, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__unit_is_paid__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 function pumpunit #"pump_unit.ads" 37 0 0# "model_projected" "model_trace:4822" 
   : Pump_unit__pump_unit.pump_unit
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:37, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__unit_is_paid__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "unit_is_paid" defined at pump_unit.ads:37, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__unit_is_paid
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 function unit_is_paid #"pump_unit.ads" 37 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) : bool

end

(* Module for defining the constant "pumpunit" defined at pump_unit.ads:38, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__get_pump_unit_state__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 function pumpunit #"pump_unit.ads" 38 0 0# "model_projected" "model_trace:4841" 
   : Pump_unit__pump_unit.pump_unit
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:38, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__get_pump_unit_state__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_pump_unit_state" defined at pump_unit.ads:38, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__get_pump_unit_state
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 function get_pump_unit_state #"pump_unit.ads" 38 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) : int

end

(* Module for defining the constant "pumpunit" defined at pump_unit.ads:39, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__get_pump_nozzle_state__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 function pumpunit #"pump_unit.ads" 39 0 0# "model_projected" "model_trace:4862" 
   : Pump_unit__pump_unit.pump_unit
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:39, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__get_pump_nozzle_state__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_pump_nozzle_state" defined at pump_unit.ads:39, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__get_pump_nozzle_state
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 function get_pump_nozzle_state #"pump_unit.ads" 39 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) : int

end

(* Module for defining the constant "amount" defined at pump_unit.ads:45, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__set_to_pay__amount
 use import "_gnatprove_standard".Main
 use        Pump__float_number

 function amount #"pump_unit.ads" 45 0 0# 
   : Pump__float_number.float_number
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 6 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at pump_unit.ads:45, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__set_to_pay__amount__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "id" defined at pump_unit.ads:46, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__set_unit_id__id
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function id #"pump_unit.ads" 46 0 0# "model_projected" "model_trace:4957" 
   : Array__Int__Standard__character.map
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 8 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "id" defined at pump_unit.ads:46, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__set_unit_id__id__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at pump_unit.ads:47, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__set_pumped__amount
 use import "_gnatprove_standard".Main
 use        Pump__float_number

 function amount #"pump_unit.ads" 47 0 0# 
   : Pump__float_number.float_number
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 6 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at pump_unit.ads:47, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__set_pumped__amount__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "fueltype" defined at pump_unit.ads:48, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__set_pump_active_state__fueltype
 use import "_gnatprove_standard".Main

 function fueltype #"pump_unit.ads" 48 0 0# "model" "model_trace:5013" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 7 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "fueltype" defined at pump_unit.ads:48, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__set_pump_active_state__fueltype__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "statetype" defined at pump_unit.ads:48, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__set_pump_active_state__statetype
 use import "_gnatprove_standard".Main

 function statetype #"pump_unit.ads" 48 0 0# "model" "model_trace:5024" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 10 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "statetype" defined at pump_unit.ads:48, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__set_pump_active_state__statetype__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "fueltype" defined at pump_unit.ads:49, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__set_pump_nozzle_state__fueltype
 use import "_gnatprove_standard".Main

 function fueltype #"pump_unit.ads" 49 0 0# "model" "model_trace:5053" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 7 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "fueltype" defined at pump_unit.ads:49, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__set_pump_nozzle_state__fueltype__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "nozzletype" defined at pump_unit.ads:49, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__set_pump_nozzle_state__nozzletype
 use import "_gnatprove_standard".Main

 function nozzletype #"pump_unit.ads" 49 0 0# "model" "model_trace:5064" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 11 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "nozzletype" defined at pump_unit.ads:49, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__set_pump_nozzle_state__nozzletype__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "fueltype" defined at pump_unit.ads:51, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__add_pump__fueltype
 use import "_gnatprove_standard".Main

 function fueltype #"pump_unit.ads" 51 0 0# "model" "model_trace:5104" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 7 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "fueltype" defined at pump_unit.ads:51, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__add_pump__fueltype__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "fueltype" defined at pump_unit.ads:53, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__left_nozzle__fueltype
 use import "_gnatprove_standard".Main

 function fueltype #"pump_unit.ads" 53 0 0# "model" "model_trace:5144" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 7 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "fueltype" defined at pump_unit.ads:53, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__left_nozzle__fueltype__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at pump_unit.ads:67, created in Gnat2Why.Decls.Translate_Constant *)
module Pump_unit__start_pumping__amount
 use import "_gnatprove_standard".Main
 use        Pump__float_number

 function amount #"pump_unit.ads" 67 0 0# 
   : Pump__float_number.float_number
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 6 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at pump_unit.ads:67, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__start_pumping__amount__axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T1b" defined at pump_unit.adb:23, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__add_pump__T1b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"pump.ads" 6 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  12
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T2b" defined at pump_unit.adb:37, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__add_pump__T2b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  12
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T3b" defined at pump_unit.adb:51, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__add_pump__T3b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  16
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T4b" defined at pump_unit.adb:66, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__add_pump__T4b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  0
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T17b" defined at pump_unit.adb:161, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__set_is_using__T17b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  39
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T18b" defined at pump_unit.adb:176, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__set_is_paid__T18b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  38
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T19b" defined at pump_unit.adb:205, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__set_pump_active_state__T19b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  20
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T20b" defined at pump_unit.adb:225, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__set_pump_nozzle_state__T20b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  20
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T25b" defined at pump_unit.adb:272, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__left_nozzle__T25b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  4
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T26b" defined at pump_unit.adb:278, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__left_nozzle__T26b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  25
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T27b" defined at pump_unit.adb:279, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__left_nozzle__T27b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  7
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T28b" defined at pump_unit.adb:279, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__left_nozzle__T28b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  7
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T29b" defined at pump_unit.adb:285, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__left_nozzle__T29b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  28
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T30b" defined at pump_unit.adb:287, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__left_nozzle__T30b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  56
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T31b" defined at pump_unit.adb:300, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__return_nozzle__T31b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  5
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T32b" defined at pump_unit.adb:300, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__return_nozzle__T32b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  5
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T33b" defined at pump_unit.adb:306, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__return_nozzle__T33b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  39
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T34b" defined at pump_unit.adb:312, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__return_nozzle__T34b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  38
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T35b" defined at pump_unit.adb:315, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__return_nozzle__T35b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  73
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T36b" defined at pump_unit.adb:339, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__start_pumping__T36b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  10
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T37b" defined at pump_unit.adb:343, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__start_pumping__T37b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  29
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T38b" defined at pump_unit.adb:364, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__start_pumping__L_1__T38b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  35
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T39b" defined at pump_unit.adb:367, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__start_pumping__L_1__T39b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  23
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T40b" defined at pump_unit.adb:369, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__start_pumping__L_1__T40b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  19
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T41b" defined at pump_unit.adb:381, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__start_pumping__T41b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  10
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T42b" defined at pump_unit.adb:385, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__start_pumping__T42b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  29
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T43b" defined at pump_unit.adb:402, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__start_pumping__L_2__T43b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  35
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T44b" defined at pump_unit.adb:405, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__start_pumping__L_2__T44b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  23
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T45b" defined at pump_unit.adb:410, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__start_pumping__T45b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  49
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T46b" defined at pump_unit.adb:422, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__stop_pumping__T46b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  7
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T47b" defined at pump_unit.adb:422, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__stop_pumping__T47b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  7
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T48b" defined at pump_unit.adb:427, created in Gnat2Why.Types.Translate_Type *)
module Pump_unit__stop_pumping__T48b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  12
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end
(* Module for defining a ref holding the value of variable "pump_r" defined at pump.ads:33, created in Gnat2Why.Decls.Translate_Variable *)
module Pump__set_fuel_price__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 val pump_r__split_fields #"pump.ads" 33 0 0# "model_projected" "model_trace:5752"  : Pump__pump.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:33, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__set_fuel_price__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pump_r" defined at pump.ads:34, created in Gnat2Why.Decls.Translate_Variable *)
module Pump__set_pump_state__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 val pump_r__split_fields #"pump.ads" 34 0 0# "model_projected" "model_trace:5779"  : Pump__pump.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__set_pump_state__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pump_r" defined at pump.ads:35, created in Gnat2Why.Decls.Translate_Variable *)
module Pump__set_pumped__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 val pump_r__split_fields #"pump.ads" 35 0 0# "model_projected" "model_trace:5806"  : Pump__pump.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__set_pumped__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pump_r" defined at pump.ads:36, created in Gnat2Why.Decls.Translate_Variable *)
module Pump__set_pump_nozzle_state__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 val pump_r__split_fields #"pump.ads" 36 0 0# "model_projected" "model_trace:5833"  : Pump__pump.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:36, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__set_pump_nozzle_state__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pump_r" defined at pump.ads:38, created in Gnat2Why.Decls.Translate_Variable *)
module Pump__append_reservoir__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 val pump_r__split_fields #"pump.ads" 38 0 0# "model_projected" "model_trace:5860"  : Pump__pump.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:38, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__append_reservoir__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pump_r" defined at pump.ads:40, created in Gnat2Why.Decls.Translate_Variable *)
module Pump__set_reservoir_size__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 val pump_r__split_fields #"pump.ads" 40 0 0# "model_projected" "model_trace:5887"  : Pump__pump.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:40, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__set_reservoir_size__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pump_r" defined at pump.ads:42, created in Gnat2Why.Decls.Translate_Variable *)
module Pump__remove_petrol_reservoir__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 val pump_r__split_fields #"pump.ads" 42 0 0# "model_projected" "model_trace:5914"  : Pump__pump.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump.ads:42, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__remove_petrol_reservoir__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "constraint_error_def" defined at s-stalib.ads:152, created in Gnat2Why.Decls.Translate_Variable *)
module System__standard_library__constraint_error_def
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 val constraint_error_def #"s-stalib.ads" 152 0 0#  : Main.__private__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"s-stalib.ads" 152 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "constraint_error_def" defined at s-stalib.ads:152, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__standard_library__constraint_error_def__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "numeric_error_def" defined at s-stalib.ads:161, created in Gnat2Why.Decls.Translate_Variable *)
module System__standard_library__numeric_error_def
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 val numeric_error_def #"s-stalib.ads" 161 0 0#  : Main.__private__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"s-stalib.ads" 161 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "numeric_error_def" defined at s-stalib.ads:161, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__standard_library__numeric_error_def__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "program_error_def" defined at s-stalib.ads:170, created in Gnat2Why.Decls.Translate_Variable *)
module System__standard_library__program_error_def
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 val program_error_def #"s-stalib.ads" 170 0 0#  : Main.__private__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"s-stalib.ads" 170 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "program_error_def" defined at s-stalib.ads:170, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__standard_library__program_error_def__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "storage_error_def" defined at s-stalib.ads:179, created in Gnat2Why.Decls.Translate_Variable *)
module System__standard_library__storage_error_def
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 val storage_error_def #"s-stalib.ads" 179 0 0#  : Main.__private__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"s-stalib.ads" 179 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "storage_error_def" defined at s-stalib.ads:179, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__standard_library__storage_error_def__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "tasking_error_def" defined at s-stalib.ads:188, created in Gnat2Why.Decls.Translate_Variable *)
module System__standard_library__tasking_error_def
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 val tasking_error_def #"s-stalib.ads" 188 0 0#  : Main.__private__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"s-stalib.ads" 188 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "tasking_error_def" defined at s-stalib.ads:188, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__standard_library__tasking_error_def__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "abort_signal_def" defined at s-stalib.ads:197, created in Gnat2Why.Decls.Translate_Variable *)
module System__standard_library__abort_signal_def
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 val abort_signal_def #"s-stalib.ads" 197 0 0#  : Main.__private__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"s-stalib.ads" 197 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "abort_signal_def" defined at s-stalib.ads:197, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__standard_library__abort_signal_def__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "local_partition_id" defined at s-stalib.ads:213, created in Gnat2Why.Decls.Translate_Variable *)
module System__standard_library__local_partition_id
 use import "_gnatprove_standard".Main

 val local_partition_id #"s-stalib.ads" 213 0 0# "model" "model_trace:8948"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "local_partition_id" defined at s-stalib.ads:213, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__standard_library__local_partition_id__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "exception_trace" defined at s-stalib.ads:246, created in Gnat2Why.Decls.Translate_Variable *)
module System__standard_library__exception_trace
 use import "_gnatprove_standard".Main

 val exception_trace #"s-stalib.ads" 246 0 0# "model" "model_trace:8996"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"s-stalib.ads" 218 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "exception_trace" defined at s-stalib.ads:246, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__standard_library__exception_trace__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "target" defined at a-except.ads:124, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__exceptions__save_occurrence__target
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_occurrence

 val target #"a-except.ads" 124 0 0#  : Ada__exceptions__exception_occurrence.exception_occurrence__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-except.ads" 63 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "target" defined at a-except.ads:124, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__exceptions__save_occurrence__target__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pumpunit" defined at pump_unit.ads:43, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__set_is_using__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 val pumpunit__split_fields #"pump_unit.ads" 43 0 0# "model_projected" "model_trace:4883"  : Pump_unit__pump_unit.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:43, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__set_is_using__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pumpunit" defined at pump_unit.ads:44, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__set_is_paid__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 val pumpunit__split_fields #"pump_unit.ads" 44 0 0# "model_projected" "model_trace:4901"  : Pump_unit__pump_unit.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:44, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__set_is_paid__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pumpunit" defined at pump_unit.ads:45, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__set_to_pay__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 val pumpunit__split_fields #"pump_unit.ads" 45 0 0# "model_projected" "model_trace:4919"  : Pump_unit__pump_unit.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:45, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__set_to_pay__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pumpunit" defined at pump_unit.ads:46, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__set_unit_id__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 val pumpunit__split_fields #"pump_unit.ads" 46 0 0# "model_projected" "model_trace:4948"  : Pump_unit__pump_unit.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:46, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__set_unit_id__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pumpunit" defined at pump_unit.ads:47, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__set_pumped__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 val pumpunit__split_fields #"pump_unit.ads" 47 0 0# "model_projected" "model_trace:4975"  : Pump_unit__pump_unit.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:47, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__set_pumped__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pumpunit" defined at pump_unit.ads:48, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__set_pump_active_state__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 val pumpunit__split_fields #"pump_unit.ads" 48 0 0# "model_projected" "model_trace:5004"  : Pump_unit__pump_unit.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:48, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__set_pump_active_state__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pumpunit" defined at pump_unit.ads:49, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__set_pump_nozzle_state__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 val pumpunit__split_fields #"pump_unit.ads" 49 0 0# "model_projected" "model_trace:5044"  : Pump_unit__pump_unit.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:49, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__set_pump_nozzle_state__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pumpunit" defined at pump_unit.ads:51, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__add_pump__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 val pumpunit__split_fields #"pump_unit.ads" 51 0 0# "model_projected" "model_trace:5084"  : Pump_unit__pump_unit.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:51, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__add_pump__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pump_r" defined at pump_unit.ads:51, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__add_pump__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 val pump_r__split_fields #"pump_unit.ads" 51 0 0# "model_projected" "model_trace:5093"  : Pump__pump.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump_unit.ads:51, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__add_pump__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pumpunit" defined at pump_unit.ads:53, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__left_nozzle__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 val pumpunit__split_fields #"pump_unit.ads" 53 0 0# "model_projected" "model_trace:5124"  : Pump_unit__pump_unit.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:53, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__left_nozzle__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pump_r" defined at pump_unit.ads:53, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__left_nozzle__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 val pump_r__split_fields #"pump_unit.ads" 53 0 0# "model_projected" "model_trace:5133"  : Pump__pump.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump_unit.ads:53, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__left_nozzle__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pumpunit" defined at pump_unit.ads:58, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__return_nozzle__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 val pumpunit__split_fields #"pump_unit.ads" 58 0 0# "model_projected" "model_trace:5202"  : Pump_unit__pump_unit.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:58, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__return_nozzle__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pump_r" defined at pump_unit.ads:58, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__return_nozzle__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 val pump_r__split_fields #"pump_unit.ads" 58 0 0# "model_projected" "model_trace:5211"  : Pump__pump.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump_unit.ads:58, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__return_nozzle__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pumpunit" defined at pump_unit.ads:67, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__start_pumping__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 val pumpunit__split_fields #"pump_unit.ads" 67 0 0# "model_projected" "model_trace:5290"  : Pump_unit__pump_unit.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:67, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__start_pumping__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pump_r" defined at pump_unit.ads:67, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__start_pumping__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 val pump_r__split_fields #"pump_unit.ads" 67 0 0# "model_projected" "model_trace:5299"  : Pump__pump.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump_unit.ads:67, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__start_pumping__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "car_tank_space" defined at pump_unit.ads:67, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__start_pumping__car_tank_space
 use import "_gnatprove_standard".Main
 use        Pump__float_number

 val car_tank_space #"pump_unit.ads" 67 0 0#  : Pump__float_number.float_number__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 6 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "car_tank_space" defined at pump_unit.ads:67, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__start_pumping__car_tank_space__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pumpunit" defined at pump_unit.ads:72, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__stop_pumping__pumpunit
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit

 val pumpunit__split_fields #"pump_unit.ads" 72 0 0# "model_projected" "model_trace:5379"  : Pump_unit__pump_unit.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.ads" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumpunit" defined at pump_unit.ads:72, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__stop_pumping__pumpunit__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pump_r" defined at pump_unit.ads:72, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__stop_pumping__pump_r
 use import "_gnatprove_standard".Main
 use        Pump__pump

 val pump_r__split_fields #"pump_unit.ads" 72 0 0# "model_projected" "model_trace:5388"  : Pump__pump.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 20 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_r" defined at pump_unit.ads:72, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__stop_pumping__pump_r__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "nozzlestatetype" defined at pump_unit.adb:15, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__add_pump__nozzlestatetype
 use import "_gnatprove_standard".Main

 val nozzlestatetype #"pump_unit.adb" 15 0 0# "model" "model_trace:2357"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 11 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "nozzlestatetype" defined at pump_unit.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__add_pump__nozzlestatetype__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "basestatetype" defined at pump_unit.adb:16, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__add_pump__basestatetype
 use import "_gnatprove_standard".Main

 val basestatetype #"pump_unit.adb" 16 0 0# "model" "model_trace:2368"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 10 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "basestatetype" defined at pump_unit.adb:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__add_pump__basestatetype__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "basestatetype" defined at pump_unit.adb:155, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__set_is_using__basestatetype
 use import "_gnatprove_standard".Main

 val basestatetype #"pump_unit.adb" 155 0 0# "model" "model_trace:2966"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 10 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "basestatetype" defined at pump_unit.adb:155, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__set_is_using__basestatetype__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "basestatetype" defined at pump_unit.adb:170, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__set_is_paid__basestatetype
 use import "_gnatprove_standard".Main

 val basestatetype #"pump_unit.adb" 170 0 0# "model" "model_trace:3047"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 10 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "basestatetype" defined at pump_unit.adb:170, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__set_is_paid__basestatetype__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "due" defined at pump_unit.adb:295, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__return_nozzle__due
 use import "_gnatprove_standard".Main
 use        Pump__float_number

 val due #"pump_unit.adb" 295 0 0#  : Pump__float_number.float_number__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 6 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "due" defined at pump_unit.adb:295, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__return_nozzle__due__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "tanksize" defined at pump_unit.adb:326, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__start_pumping__tanksize
 use import "_gnatprove_standard".Main
 use        Pump__float_number

 val tanksize #"pump_unit.adb" 326 0 0#  : Pump__float_number.float_number__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 6 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "tanksize" defined at pump_unit.adb:326, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__start_pumping__tanksize__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pumped" defined at pump_unit.adb:327, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__start_pumping__pumped
 use import "_gnatprove_standard".Main
 use        Pump__float_number

 val pumped #"pump_unit.adb" 327 0 0#  : Pump__float_number.float_number__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 6 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pumped" defined at pump_unit.adb:327, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__start_pumping__pumped__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "sensor" defined at pump_unit.adb:328, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__start_pumping__sensor
 use import "_gnatprove_standard".Main

 val sensor #"pump_unit.adb" 328 0 0# "model" "model_trace:3926"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump_unit.adb" 328 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "sensor" defined at pump_unit.adb:328, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__start_pumping__sensor__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "temp" defined at pump_unit.adb:329, created in Gnat2Why.Decls.Translate_Variable *)
module Pump_unit__start_pumping__temp
 use import "_gnatprove_standard".Main
 use        Pump__float_number

 val temp #"pump_unit.adb" 329 0 0#  : Pump__float_number.float_number__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 6 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "temp" defined at pump_unit.adb:329, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__start_pumping__temp__axiom
 use import "_gnatprove_standard".Main


end

(* Module declaring the external object "pump__append_reservoir__r," created in Gnat2Why.Decls.Translate_External_Object *)
module Pump__append_reservoir__r
 use import "ref".Ref
 use import "_gnatprove_standard".Main

 val r #"pump.ads" 6 0 0#  : Main.__private__ref 

end

(* Module giving an empty axiom for the entity "pump__append_reservoir__r", created in Gnat2Why.Decls.Translate_External_Object *)
module Pump__append_reservoir__r__axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant #"pump.ads" 6 0 0# "inline" 
   (temp___expr_3 : int) (temp___is_init_0 : bool) (temp___do_constant_1 : bool) (temp___do_toplevel_2 : bool)  =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_3)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___4 : int) (temp___5 : bool)  =
  true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_9 : int) (temp___is_init_6 : bool) (temp___do_constant_7 : bool) (temp___do_toplevel_8 : bool)  =
  (if (( temp___is_init_6 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_9)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___10 : int) (temp___11 : bool)  =
  true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_15 : int) (temp___is_init_12 : bool) (temp___do_constant_13 : bool) (temp___do_toplevel_14 : bool)  =
  (if (( temp___is_init_12 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_15)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___16 : int) (temp___17 : bool)  =
  true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_21 : int) (temp___is_init_18 : bool) (temp___do_constant_19 : bool) (temp___do_toplevel_20 : bool)  =
  (if (( temp___is_init_18 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_21)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___22 : int) (temp___23 : bool)  =
  true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_27 : int) (temp___is_init_24 : bool) (temp___do_constant_25 : bool) (temp___do_toplevel_26 : bool)  =
  (if (( temp___is_init_24 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_27)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___28 : int) (temp___29 : bool)  =
  true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_33 : int) (temp___is_init_30 : bool) (temp___do_constant_31 : bool) (temp___do_toplevel_32 : bool)  =
  (if (( temp___is_init_30 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_33)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___34 : int) (temp___35 : bool)  =
  true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_39 : int) (temp___is_init_36 : bool) (temp___do_constant_37 : bool) (temp___do_toplevel_38 : bool)  =
  (if (( temp___is_init_36 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_39)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___40 : int) (temp___41 : bool)  =
  true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float__axiom
 use import "_gnatprove_standard".Main
 use        Standard__short_float

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_45 : Standard__short_float.short_float) (temp___is_init_42 : bool) (temp___do_constant_43 : bool) (temp___do_toplevel_44 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___46 : Standard__short_float.short_float) (temp___47 : bool)  =
  true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float__axiom
 use import "_gnatprove_standard".Main
 use        Standard__float

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_51 : Standard__float.float) (temp___is_init_48 : bool) (temp___do_constant_49 : bool) (temp___do_toplevel_50 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___52 : Standard__float.float) (temp___53 : bool)  =
  true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float__axiom
 use import "_gnatprove_standard".Main
 use        Standard__long_float

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_57 : Standard__long_float.long_float) (temp___is_init_54 : bool) (temp___do_constant_55 : bool) (temp___do_toplevel_56 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___58 : Standard__long_float.long_float) (temp___59 : bool)  =
  true

end

(* Module giving axioms for type "long_long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_float__axiom
 use import "_gnatprove_standard".Main
 use        Standard__long_long_float

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_63 : Standard__long_long_float.long_long_float) (temp___is_init_60 : bool) (temp___do_constant_61 : bool) (temp___do_toplevel_62 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___64 : Standard__long_long_float.long_long_float) (temp___65 : bool)  =
  true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_69 : int) (temp___is_init_66 : bool) (temp___do_constant_67 : bool) (temp___do_toplevel_68 : bool)  =
  (if (( temp___is_init_66 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_69)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___70 : int) (temp___71 : bool)  =
  true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_75 : int) (temp___is_init_72 : bool) (temp___do_constant_73 : bool) (temp___do_toplevel_74 : bool)  =
  (if (( temp___is_init_72 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_75)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___76 : int) (temp___77 : bool)  =
  true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_81 : int) (temp___is_init_78 : bool) (temp___do_constant_79 : bool) (temp___do_toplevel_80 : bool)  =
  (if (( temp___is_init_78 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_81)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___82 : int) (temp___83 : bool)  =
  true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_87 : Standard__string.string) (temp___is_init_84 : bool) (temp___do_constant_85 : bool) (temp___do_toplevel_86 : bool)  =
  (if (temp___do_constant_85) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_87) (Standard__string.last temp___expr_87))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string__axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_92 : Standard__wide_string.wide_string) (temp___is_init_89 : bool) (temp___do_constant_90 : bool) (temp___do_toplevel_91 : bool)  =
  (if (temp___do_constant_90) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_92) (Standard__wide_string.last temp___expr_92))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string__axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_97 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_94 : bool) (temp___do_constant_95 : bool) (temp___do_toplevel_96 : bool)  =
  (if (temp___do_constant_95) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_97) (Standard__wide_wide_string.last temp___expr_97))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration__axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_102 : Standard__duration.duration) (temp___is_init_99 : bool) (temp___do_constant_100 : bool) (temp___do_toplevel_101 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___103 : Standard__duration.duration) (temp___104 : bool)  =
  true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_108 : int) (temp___is_init_105 : bool) (temp___do_constant_106 : bool) (temp___do_toplevel_107 : bool)  =
  (if (( temp___is_init_105 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_108)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___109 : int) (temp___110 : bool)  =
  true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_114 : int) (temp___is_init_111 : bool) (temp___do_constant_112 : bool) (temp___do_toplevel_113 : bool)  =
  (if (( temp___is_init_111 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_114)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___115 : int) (temp___116 : bool)  =
  true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_120 : int) (temp___is_init_117 : bool) (temp___do_constant_118 : bool) (temp___do_toplevel_119 : bool)  =
  (if (( temp___is_init_117 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_120)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___121 : int) (temp___122 : bool)  =
  true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_126 : int) (temp___is_init_123 : bool) (temp___do_constant_124 : bool) (temp___do_toplevel_125 : bool)  =
  (if (( temp___is_init_123 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_126)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___127 : int) (temp___128 : bool)  =
  true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_132 : int) (temp___is_init_129 : bool) (temp___do_constant_130 : bool) (temp___do_toplevel_131 : bool)  =
  (if (( temp___is_init_129 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_132)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___133 : int) (temp___134 : bool)  =
  true

end

(* Module giving axioms for type "universal_real", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_real__axiom
 use import "_gnatprove_standard".Main
 use        Standard__universal_real

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_138 : Standard__universal_real.universal_real) (temp___is_init_135 : bool) (temp___do_constant_136 : bool) (temp___do_toplevel_137 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___139 : Standard__universal_real.universal_real) (temp___140 : bool)  =
  true

end

(* Module for possibly declaring a logic function for "set_fuel_price" defined at pump.ads:33, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__set_fuel_price
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_pump_state" defined at pump.ads:34, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__set_pump_state
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_pumped" defined at pump.ads:35, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__set_pumped
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_pump_nozzle_state" defined at pump.ads:36, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__set_pump_nozzle_state
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "append_reservoir" defined at pump.ads:38, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__append_reservoir
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_reservoir_size" defined at pump.ads:40, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__set_reservoir_size
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "remove_petrol_reservoir" defined at pump.ads:42, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__remove_petrol_reservoir
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "print" defined at sprint.ads:3, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Sprint__print
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "print_float_type" defined at sprint.ads:4, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Sprint__print_float_type
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "print_state_type" defined at sprint.ads:5, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Sprint__print_state_type
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "print_nozzle_type" defined at sprint.ads:6, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Sprint__print_nozzle_type
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "print_fuel_type" defined at sprint.ads:7, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Sprint__print_fuel_type
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "min_int" defined at system.ads:51, created in Gnat2Why.Decls.Translate_Constant *)
module System__min_int
 use import "_gnatprove_standard".Main

 function min_int #"system.ads" 51 0 0# "model" "model_trace:7277" 
   : int

end

(* Module for defining the constant "max_int" defined at system.ads:52, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_int
 use import "_gnatprove_standard".Main

 function max_int #"system.ads" 52 0 0# "model" "model_trace:7288" 
   : int

end

(* Module for defining the constant "max_binary_modulus" defined at system.ads:54, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_binary_modulus
 use import "_gnatprove_standard".Main

 function max_binary_modulus #"system.ads" 54 0 0# "model" "model_trace:7299" 
   : int

end

(* Module for defining the constant "max_nonbinary_modulus" defined at system.ads:55, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_nonbinary_modulus
 use import "_gnatprove_standard".Main

 function max_nonbinary_modulus #"system.ads" 55 0 0# "model" "model_trace:7312" 
   : int

end

(* Module for defining the constant "max_base_digits" defined at system.ads:57, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_base_digits
 use import "_gnatprove_standard".Main

 function max_base_digits #"system.ads" 57 0 0# "model" "model_trace:7327" 
   : int

end

(* Module for defining the constant "max_digits" defined at system.ads:58, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_digits
 use import "_gnatprove_standard".Main

 function max_digits #"system.ads" 58 0 0# "model" "model_trace:7337" 
   : int

end

(* Module for defining the constant "max_mantissa" defined at system.ads:60, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_mantissa
 use import "_gnatprove_standard".Main

 function max_mantissa #"system.ads" 60 0 0# "model" "model_trace:7347" 
   : int

end

(* Module for defining the constant "fine_delta" defined at system.ads:61, created in Gnat2Why.Decls.Translate_Constant *)
module System__fine_delta
 use import "_gnatprove_standard".Main
 use        Standard__universal_real

 function fine_delta #"system.ads" 61 0 0# 
   : Standard__universal_real.universal_real

end

(* Module for defining the constant "tick" defined at system.ads:63, created in Gnat2Why.Decls.Translate_Constant *)
module System__tick
 use import "_gnatprove_standard".Main
 use        Standard__universal_real

 function tick #"system.ads" 63 0 0# 
   : Standard__universal_real.universal_real

end

(* Module for defining the constant "storage_unit" defined at system.ads:71, created in Gnat2Why.Decls.Translate_Constant *)
module System__storage_unit
 use import "_gnatprove_standard".Main

 function storage_unit #"system.ads" 71 0 0# "model" "model_trace:7398" 
   : int

end

(* Module for defining the constant "word_size" defined at system.ads:72, created in Gnat2Why.Decls.Translate_Constant *)
module System__word_size
 use import "_gnatprove_standard".Main

 function word_size #"system.ads" 72 0 0# "model" "model_trace:7407" 
   : int

end

(* Module for defining the constant "memory_size" defined at system.ads:73, created in Gnat2Why.Decls.Translate_Constant *)
module System__memory_size
 use import "_gnatprove_standard".Main

 function memory_size #"system.ads" 73 0 0# "model" "model_trace:7416" 
   : int

end

(* Module for defining the value of the aggregate at system.ads:166, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module System__underlying_priorities__aggregate_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer

 function system__underlying_priorities__aggregate_def #"system.ads" 166 0 0# 
   (temp___142 : int) (temp___143 : int) (temp___144 : int) (temp___145 : int) (temp___146 : int) (temp___147 : int) (temp___148 : int) (temp___149 : int) (temp___150 : int) (temp___151 : int) (temp___152 : int) (temp___153 : int) (temp___154 : int) (temp___155 : int) (temp___156 : int) (temp___157 : int) : Array__Int__Standard__integer.map
 
 axiom def_axiom :
  (forall temp___142 temp___143 temp___144 temp___145 temp___146 temp___147 temp___148 temp___149 temp___150 temp___151 temp___152 temp___153 temp___154 temp___155 temp___156 temp___157 : int.
   (let temp___141 = (system__underlying_priorities__aggregate_def temp___142 temp___143 temp___144 temp___145 temp___146 temp___147 temp___148 temp___149 temp___150 temp___151 temp___152 temp___153 temp___154 temp___155 temp___156 temp___157) in (
    (forall temp___158 : int.
     (if (( (31 <= temp___158) /\ (temp___158 <= 31) )) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___157))) else if (( (21 <= temp___158) /\ (temp___158 <= 30) )) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___156)))  else if ((temp___158 = 20)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___155)))  else if ((temp___158 = 19)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___154)))  else if ((temp___158 = 18)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___153)))  else if ((temp___158 = 17)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___152)))  else if ((temp___158 = 16)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___151)))  else if ((temp___158 = 15)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___150)))  else if ((temp___158 = 14)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___149)))  else if ((temp___158 = 13)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___148)))  else if ((temp___158 = 12)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___147)))  else if ((temp___158 = 11)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___146)))  else if ((temp___158 = 10)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___145)))  else if ((temp___158 = 9)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___144)))  else if ((temp___158 = 8)) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___143)))  else if (( (0 <= temp___158) /\ (temp___158 <= 7) )) then (
      ((Array__Int__Standard__integer.get temp___141 temp___158) = (Standard__integer.of_rep temp___142))) else (
      true)))))
  )

end

(* Module for defining the constant "long_bits" defined at s-parame.ads:110, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__long_bits
 use import "_gnatprove_standard".Main

 function long_bits #"s-parame.ads" 110 0 0# "model" "model_trace:8298" 
   : int

end

(* Module for defining a value for string literal  defined at s-parame.ads:119, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___159
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___159 #"s-parame.ads" 119 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining the constant "max_attribute_count" defined at s-parame.ads:183, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__max_attribute_count
 use import "_gnatprove_standard".Main

 function max_attribute_count #"s-parame.ads" 183 0 0# "model" "model_trace:8371" 
   : int

end

(* Module for defining the constant "max_task_image_length" defined at s-parame.ads:199, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__max_task_image_length
 use import "_gnatprove_standard".Main

 function max_task_image_length #"s-parame.ads" 199 0 0# "model" "model_trace:8390" 
   : int

end

(* Module for defining the constant "default_exception_msg_max_length" defined at s-parame.ads:206, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__default_exception_msg_max_length
 use import "_gnatprove_standard".Main

 function default_exception_msg_max_length #"s-parame.ads" 206 0 0# "model" "model_trace:8399" 
   : int

end

(* Module for defining a value for string literal  defined at s-stalib.ads:142, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___160
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___160 #"s-stalib.ads" 142 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at s-stalib.ads:143, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___161
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___161 #"s-stalib.ads" 143 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at s-stalib.ads:144, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___162
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___162 #"s-stalib.ads" 144 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at s-stalib.ads:145, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___163
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___163 #"s-stalib.ads" 145 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at s-stalib.ads:146, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___164
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___164 #"s-stalib.ads" 146 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at s-stalib.ads:148, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___165
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___165 #"s-stalib.ads" 148 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for possibly declaring a logic function for "abort_undefer_direct" defined at s-stalib.ads:254, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__standard_library__abort_undefer_direct
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "adafinal" defined at s-stalib.ads:259, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__standard_library__adafinal
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "raise_exception" defined at a-except.ads:90, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__exceptions__raise_exception
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "reraise_occurrence" defined at a-except.ads:96, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__exceptions__reraise_occurrence
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "save_occurrence" defined at a-except.ads:123, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__exceptions__save_occurrence
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "exception_msg_max_length" defined at a-except.ads:153, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__exception_msg_max_length
 use import "_gnatprove_standard".Main

 function exception_msg_max_length #"a-except.ads" 153 0 0# "model" "model_trace:6622" 
   : int

end

(* Module for possibly declaring a logic function for "raise_exception_always" defined at a-except.ads:188, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__exceptions__raise_exception_always
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "raise_from_signal_handler" defined at a-except.ads:197, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__exceptions__raise_from_signal_handler
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "raise_from_controlled_operation" defined at a-except.ads:215, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__exceptions__raise_from_controlled_operation
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "reraise_library_exception_if_any" defined at a-except.ads:224, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__exceptions__reraise_library_exception_if_any
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "reraise_occurrence_always" defined at a-except.ads:231, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__exceptions__reraise_occurrence_always
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "reraise_occurrence_no_defer" defined at a-except.ads:238, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__exceptions__reraise_occurrence_no_defer
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "poll" defined at a-except.ads:270, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__exceptions__poll
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "max_tracebacks" defined at a-except.ads:280, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__exceptions__max_tracebacks
 use import "_gnatprove_standard".Main

 function max_tracebacks #"a-except.ads" 280 0 0# "model" "model_trace:6950" 
   : int

end

(* Module for possibly declaring a logic function for "set_is_using" defined at pump_unit.ads:43, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__set_is_using
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_is_paid" defined at pump_unit.ads:44, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__set_is_paid
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_to_pay" defined at pump_unit.ads:45, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__set_to_pay
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_unit_id" defined at pump_unit.ads:46, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__set_unit_id
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_pumped" defined at pump_unit.ads:47, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__set_pumped
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_pump_active_state" defined at pump_unit.ads:48, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__set_pump_active_state
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_pump_nozzle_state" defined at pump_unit.ads:49, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__set_pump_nozzle_state
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "add_pump" defined at pump_unit.ads:51, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__add_pump
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "left_nozzle" defined at pump_unit.ads:53, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__left_nozzle
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "return_nozzle" defined at pump_unit.ads:58, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__return_nozzle
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "start_pumping" defined at pump_unit.ads:67, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__start_pumping
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "stop_pumping" defined at pump_unit.ads:72, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump_unit__stop_pumping
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_1" defined at pump_unit.adb:351, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Pump_unit__start_pumping__L_1
 use import "_gnatprove_standard".Main

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at pump_unit.adb:351, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__start_pumping__L_1__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_2" defined at pump_unit.adb:388, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Pump_unit__start_pumping__L_2
 use import "_gnatprove_standard".Main

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at pump_unit.adb:388, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump_unit__start_pumping__L_2__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "Treservoir_numB" defined at pump.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__Treservoir_numB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "reservoir_num" defined at pump.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__reservoir_num__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__reservoir_num

 predicate dynamic_invariant #"pump_unit.adb" 388 0 0# "inline" 
   (temp___expr_169 : int) (temp___is_init_166 : bool) (temp___do_constant_167 : bool) (temp___do_toplevel_168 : bool)  =
  (if (( temp___is_init_166 \/ (Pump__reservoir_num.first <= Pump__reservoir_num.last) )) then (
   (Pump__reservoir_num.dynamic_property Pump__reservoir_num.first Pump__reservoir_num.last temp___expr_169)) else true)
 
 predicate default_initial_assumption #"pump.ads" 5 0 0# "inline" 
   (temp___170 : int) (temp___171 : bool)  =
  true

end

(* Module giving axioms for type "Tfloat_numberB" defined at pump.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__Tfloat_numberB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "float_number" defined at pump.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__float_number__axiom
 use import "_gnatprove_standard".Main
 use        Pump__float_number

 predicate dynamic_invariant #"pump.ads" 5 0 0# "inline" 
   (temp___expr_175 : Pump__float_number.float_number) (temp___is_init_172 : bool) (temp___do_constant_173 : bool) (temp___do_toplevel_174 : bool)  =
  true
 
 predicate default_initial_assumption #"pump.ads" 6 0 0# "inline" 
   (temp___176 : Pump__float_number.float_number) (temp___177 : bool)  =
  true

end

(* Module giving axioms for type "fuel_types" defined at pump.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__fuel_types__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__fuel_types

 predicate dynamic_invariant #"pump.ads" 6 0 0# "inline" 
   (temp___expr_181 : int) (temp___is_init_178 : bool) (temp___do_constant_179 : bool) (temp___do_toplevel_180 : bool)  =
  (if (( temp___is_init_178 \/ (Pump__fuel_types.first <= Pump__fuel_types.last) )) then (
   (Pump__fuel_types.dynamic_property Pump__fuel_types.first Pump__fuel_types.last temp___expr_181)) else true)
 
 predicate default_initial_assumption #"pump.ads" 7 0 0# "inline" 
   (temp___182 : int) (temp___183 : bool)  =
  true

end

(* Module giving axioms for type "state_type" defined at pump.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__state_type__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__state_type

 predicate dynamic_invariant #"pump.ads" 7 0 0# "inline" 
   (temp___expr_187 : int) (temp___is_init_184 : bool) (temp___do_constant_185 : bool) (temp___do_toplevel_186 : bool)  =
  (if (( temp___is_init_184 \/ (Pump__state_type.first <= Pump__state_type.last) )) then (
   (Pump__state_type.dynamic_property Pump__state_type.first Pump__state_type.last temp___expr_187)) else true)
 
 predicate default_initial_assumption #"pump.ads" 10 0 0# "inline" 
   (temp___188 : int) (temp___189 : bool)  =
  true

end

(* Module giving axioms for type "nozzle_type" defined at pump.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__nozzle_type__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__nozzle_type

 predicate dynamic_invariant #"pump.ads" 10 0 0# "inline" 
   (temp___expr_193 : int) (temp___is_init_190 : bool) (temp___do_constant_191 : bool) (temp___do_toplevel_192 : bool)  =
  (if (( temp___is_init_190 \/ (Pump__nozzle_type.first <= Pump__nozzle_type.last) )) then (
   (Pump__nozzle_type.dynamic_property Pump__nozzle_type.first Pump__nozzle_type.last temp___expr_193)) else true)
 
 predicate default_initial_assumption #"pump.ads" 11 0 0# "inline" 
   (temp___194 : int) (temp___195 : bool)  =
  true

end

(* Module giving axioms for type "reservoir" defined at pump.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__reservoir__axiom
 use import "_gnatprove_standard".Main
 use        Pump__reservoir

 predicate dynamic_invariant #"pump.ads" 11 0 0# "inline" 
   (temp___expr_199 : Pump__reservoir.reservoir) (temp___is_init_196 : bool) (temp___do_constant_197 : bool) (temp___do_toplevel_198 : bool)  =
  true
 
 predicate default_initial_assumption #"pump.ads" 13 0 0# "inline" 
   (temp___200 : Pump__reservoir.reservoir) (temp___201 : bool)  =
  true

end

(* Module giving axioms for type "pump" defined at pump.ads:20, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__pump__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use import "real".RealInfix
 use        Pump__float_number
 use        Pump__fuel_types
 use        Pump__state_type
 use        Pump__nozzle_type
 use        Pump__reservoir
 use        Pump__pump

 predicate dynamic_invariant #"pump.ads" 13 0 0# "inline" 
   (temp___expr_207 : Pump__pump.pump) (temp___is_init_204 : bool) (temp___do_constant_205 : bool) (temp___do_toplevel_206 : bool)  =
  true
 
 predicate default_initial_assumption #"pump.ads" 20 0 0# "inline" 
   (temp___208 : Pump__pump.pump) (temp___209 : bool)  =
  ( ( ( ( ( (if ((Pump__pump.reservoir_info__pred temp___208)) then (
   ((Pump__pump.rec__reservoir_info (Pump__pump.__split_fields temp___208)) = { Pump__reservoir.__split_fields = { Pump__reservoir.rec__total = (Pump__float_number.of_real (1000.0)); Pump__reservoir.rec__reservoir_category = (Pump__fuel_types.of_rep 0) } })) else true) /\ (if ((Pump__pump.pump_state__pred temp___208)) then (
   ((Pump__state_type.to_rep (Pump__pump.rec__pump_state (Pump__pump.__split_fields temp___208))) = 0)) else true) ) /\ (if ((Pump__pump.pumped__pred temp___208)) then (
   ((Pump__pump.rec__pumped (Pump__pump.__split_fields temp___208)) = (Pump__float_number.of_real (0.0E-2)))) else true) ) /\ (if ((Pump__pump.nozzle_state__pred temp___208)) then (
   ((Pump__nozzle_type.to_rep (Pump__pump.rec__nozzle_state (Pump__pump.__split_fields temp___208))) = 0)) else true) ) /\ (if ((Pump__pump.unit_price__pred temp___208)) then (
   ((Pump__pump.rec__unit_price (Pump__pump.__split_fields temp___208)) = (Pump__float_number.of_real (0.0E-2)))) else true) ) /\ (if ((Pump__pump.fuel_type__pred temp___208)) then (
   ((Pump__fuel_types.to_rep (Pump__pump.rec__fuel_type (Pump__pump.__split_fields temp___208))) = 3)) else true) )

end

(* Module giving axioms for type "name" defined at system.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__name__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__name

 predicate dynamic_invariant #"pump.ads" 20 0 0# "inline" 
   (temp___expr_213 : int) (temp___is_init_210 : bool) (temp___do_constant_211 : bool) (temp___do_toplevel_212 : bool)  =
  (if (( temp___is_init_210 \/ (System__name.first <= System__name.last) )) then (
   (System__name.dynamic_property System__name.first System__name.last temp___expr_213)) else true)
 
 predicate default_initial_assumption #"system.ads" 46 0 0# "inline" 
   (temp___214 : int) (temp___215 : bool)  =
  true

end

(* Module giving axioms for type "address" defined at system.ads:108, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__address__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__address

 predicate dynamic_invariant #"system.ads" 46 0 0# "inline" 
   (temp___expr_219 : BV32.t) (temp___is_init_216 : bool) (temp___do_constant_217 : bool) (temp___do_toplevel_218 : bool)  =
  (if (( temp___is_init_216 \/ (BV32.ule System__address.first System__address.last) )) then (
   (System__address.dynamic_property System__address.first System__address.last temp___expr_219)) else true)
 
 predicate default_initial_assumption #"system.ads" 108 0 0# "inline" 
   (temp___220 : BV32.t) (temp___221 : bool)  =
  true

end

(* Module giving axioms for type "bit_order" defined at system.ads:91, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__bit_order__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__bit_order

 predicate dynamic_invariant #"system.ads" 108 0 0# "inline" 
   (temp___expr_225 : int) (temp___is_init_222 : bool) (temp___do_constant_223 : bool) (temp___do_toplevel_224 : bool)  =
  (if (( temp___is_init_222 \/ (System__bit_order.first <= System__bit_order.last) )) then (
   (System__bit_order.dynamic_property System__bit_order.first System__bit_order.last temp___expr_225)) else true)
 
 predicate default_initial_assumption #"system.ads" 91 0 0# "inline" 
   (temp___226 : int) (temp___227 : bool)  =
  true

end

(* Module giving axioms for type "any_priority" defined at system.ads:100, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__any_priority__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__any_priority

 predicate dynamic_invariant #"system.ads" 91 0 0# "inline" 
   (temp___expr_231 : int) (temp___is_init_228 : bool) (temp___do_constant_229 : bool) (temp___do_toplevel_230 : bool)  =
  (if (( temp___is_init_228 \/ (System__any_priority.first <= System__any_priority.last) )) then (
   (System__any_priority.dynamic_property System__any_priority.first System__any_priority.last temp___expr_231)) else true)
 
 predicate default_initial_assumption #"system.ads" 100 0 0# "inline" 
   (temp___232 : int) (temp___233 : bool)  =
  true

end

(* Module giving axioms for type "priority" defined at system.ads:101, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__priority__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__priority

 predicate dynamic_invariant #"system.ads" 100 0 0# "inline" 
   (temp___expr_237 : int) (temp___is_init_234 : bool) (temp___do_constant_235 : bool) (temp___do_toplevel_236 : bool)  =
  (if (( temp___is_init_234 \/ (System__priority.first <= System__priority.last) )) then (
   (System__priority.dynamic_property System__priority.first System__priority.last temp___expr_237)) else true)
 
 predicate default_initial_assumption #"system.ads" 101 0 0# "inline" 
   (temp___238 : int) (temp___239 : bool)  =
  true

end

(* Module giving axioms for type "interrupt_priority" defined at system.ads:102, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__interrupt_priority__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__interrupt_priority

 predicate dynamic_invariant #"system.ads" 101 0 0# "inline" 
   (temp___expr_243 : int) (temp___is_init_240 : bool) (temp___do_constant_241 : bool) (temp___do_toplevel_242 : bool)  =
  (if (( temp___is_init_240 \/ (System__interrupt_priority.first <= System__interrupt_priority.last) )) then (
   (System__interrupt_priority.dynamic_property System__interrupt_priority.first System__interrupt_priority.last temp___expr_243)) else true)
 
 predicate default_initial_assumption #"system.ads" 102 0 0# "inline" 
   (temp___244 : int) (temp___245 : bool)  =
  true

end

(* Module giving axioms for type "Tpriorities_mappingB" defined at system.ads:161, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__Tpriorities_mappingB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "priorities_mapping" defined at system.ads:161, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__priorities_mapping__axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer

 predicate dynamic_invariant #"system.ads" 102 0 0# "inline" 
   (temp___expr_249 : Array__Int__Standard__integer.map) (temp___is_init_246 : bool) (temp___do_constant_247 : bool) (temp___do_toplevel_248 : bool)  =
  true
 
 predicate default_initial_assumption #"system.ads" 161 0 0# "inline" 
   (temp___251 : Array__Int__Standard__integer.map) (temp___252 : bool)  =
  true

end

(* Module giving axioms for type "T3s" defined at system.ads:166, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__T3s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T4s" defined at system.ads:166, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__T4s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "Ttask_storage_sizeB" defined at s-parame.ads:58, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__parameters__Ttask_storage_sizeB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "task_storage_size" defined at s-parame.ads:58, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__parameters__task_storage_size__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__parameters__task_storage_size

 predicate dynamic_invariant #"system.ads" 161 0 0# "inline" 
   (temp___expr_258 : int) (temp___is_init_255 : bool) (temp___do_constant_256 : bool) (temp___do_toplevel_257 : bool)  =
  (if (( temp___is_init_255 \/ (System__parameters__task_storage_size.first <= System__parameters__task_storage_size.last) )) then (
   (System__parameters__task_storage_size.dynamic_property System__parameters__task_storage_size.first System__parameters__task_storage_size.last temp___expr_258)) else true)
 
 predicate default_initial_assumption #"s-parame.ads" 58 0 0# "inline" 
   (temp___259 : int) (temp___260 : bool)  =
  true

end

(* Module giving axioms for type "Tsize_typeB" defined at s-parame.ads:61, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__parameters__Tsize_typeB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "size_type" defined at s-parame.ads:61, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__parameters__size_type__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__parameters__size_type

 predicate dynamic_invariant #"s-parame.ads" 58 0 0# "inline" 
   (temp___expr_264 : int) (temp___is_init_261 : bool) (temp___do_constant_262 : bool) (temp___do_toplevel_263 : bool)  =
  (if (( temp___is_init_261 \/ (System__parameters__size_type.first <= System__parameters__size_type.last) )) then (
   (System__parameters__size_type.dynamic_property System__parameters__size_type.first System__parameters__size_type.last temp___expr_264)) else true)
 
 predicate default_initial_assumption #"s-parame.ads" 61 0 0# "inline" 
   (temp___265 : int) (temp___266 : bool)  =
  true

end

(* Module giving axioms for type "percentage" defined at s-parame.ads:67, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__parameters__percentage__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__parameters__percentage

 predicate dynamic_invariant #"s-parame.ads" 61 0 0# "inline" 
   (temp___expr_270 : int) (temp___is_init_267 : bool) (temp___do_constant_268 : bool) (temp___do_toplevel_269 : bool)  =
  (if (( temp___is_init_267 \/ (System__parameters__percentage.first <= System__parameters__percentage.last) )) then (
   (System__parameters__percentage.dynamic_property System__parameters__percentage.first System__parameters__percentage.last temp___expr_270)) else true)
 
 predicate default_initial_assumption #"s-parame.ads" 67 0 0# "inline" 
   (temp___271 : int) (temp___272 : bool)  =
  true

end

(* Module giving axioms for type "c_address" defined at s-parame.ads:116, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__parameters__c_address__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T1s" defined at s-parame.ads:119, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__parameters__T1s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "Tbig_stringP1" defined at s-stalib.ads:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__standard_library__Tbig_stringP1__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "big_string" defined at s-stalib.ads:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__standard_library__big_string__axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 predicate dynamic_invariant #"s-parame.ads" 67 0 0# "inline" 
   (temp___expr_276 : Array__Int__Standard__character.map) (temp___is_init_273 : bool) (temp___do_constant_274 : bool) (temp___do_toplevel_275 : bool)  =
  true
 
 predicate default_initial_assumption #"s-stalib.ads" 62 0 0# "inline" 
   (temp___278 : Array__Int__Standard__character.map) (temp___279 : bool)  =
  true

end

(* Module giving axioms for type "source" defined at a-unccon.ads:17 instantiated at s-stalib.ads:76, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__standard_library__to_ptrGP4411__source__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T2s" defined at s-stalib.ads:142, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__standard_library__T2s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T3s" defined at s-stalib.ads:143, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__standard_library__T3s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T4s" defined at s-stalib.ads:144, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__standard_library__T4s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T5s" defined at s-stalib.ads:145, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__standard_library__T5s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T6s" defined at s-stalib.ads:146, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__standard_library__T6s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T7s" defined at s-stalib.ads:148, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__standard_library__T7s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "exception_trace_kind" defined at s-stalib.ads:218, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__standard_library__exception_trace_kind__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__standard_library__exception_trace_kind

 predicate dynamic_invariant #"s-stalib.ads" 62 0 0# "inline" 
   (temp___expr_285 : int) (temp___is_init_282 : bool) (temp___do_constant_283 : bool) (temp___do_toplevel_284 : bool)  =
  (if (( temp___is_init_282 \/ (System__standard_library__exception_trace_kind.first <= System__standard_library__exception_trace_kind.last) )) then (
   (System__standard_library__exception_trace_kind.dynamic_property System__standard_library__exception_trace_kind.first System__standard_library__exception_trace_kind.last temp___expr_285)) else true)
 
 predicate default_initial_assumption #"s-stalib.ads" 218 0 0# "inline" 
   (temp___286 : int) (temp___287 : bool)  =
  true

end

(* Module giving axioms for type "traceback_entry" defined at s-traent.ads:50, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__traceback_entries__traceback_entry__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "tracebacks_array" defined at s-traent.ads:56, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__traceback_entries__tracebacks_array__axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        System__traceback_entries__tracebacks_array

 predicate dynamic_invariant #"s-stalib.ads" 218 0 0# "inline" 
   (temp___expr_291 : System__traceback_entries__tracebacks_array.tracebacks_array) (temp___is_init_288 : bool) (temp___do_constant_289 : bool) (temp___do_toplevel_290 : bool)  =
  (if (temp___do_constant_289) then (
   true) else (
   (System__traceback_entries__tracebacks_array.dynamic_property Standard__positive.first Standard__positive.last (System__traceback_entries__tracebacks_array.first temp___expr_291) (System__traceback_entries__tracebacks_array.last temp___expr_291))))

end

(* Module giving axioms for type "exception_id" defined at a-except.ads:58, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__exceptions__exception_id__axiom
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_id

 predicate dynamic_invariant #"s-traent.ads" 56 0 0# "inline" 
   (temp___expr_296 : Ada__exceptions__exception_id.exception_id) (temp___is_init_293 : bool) (temp___do_constant_294 : bool) (temp___do_toplevel_295 : bool)  =
  true
 
 predicate default_initial_assumption #"a-except.ads" 58 0 0# "inline" 
   (temp___297 : Ada__exceptions__exception_id.exception_id) (temp___298 : bool)  =
  true

end

(* Module giving axioms for type "T5s" defined at a-except.ads:297, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__exceptions__exception_occurrence__T5s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T6s" defined at a-except.ads:297, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__exceptions__exception_occurrence__T6s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T7s" defined at a-except.ads:312, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__exceptions__exception_occurrence__T7s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "Ttracebacks_arrayP1" defined at a-except.ads:283, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__exceptions__Ttracebacks_arrayP1__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "tracebacks_array" defined at a-except.ads:283, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__exceptions__tracebacks_array__axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__System__traceback_entries__traceback_entry
 use        Array__Int__System__traceback_entries__traceback_entry

 predicate dynamic_invariant #"a-except.ads" 58 0 0# "inline" 
   (temp___expr_302 : Array__Int__System__traceback_entries__traceback_entry.map) (temp___is_init_299 : bool) (temp___do_constant_300 : bool) (temp___do_toplevel_301 : bool)  =
  true
 
 predicate default_initial_assumption #"a-except.ads" 283 0 0# "inline" 
   (temp___304 : Array__Int__System__traceback_entries__traceback_entry.map) (temp___305 : bool)  =
  true

end

(* Module giving axioms for type "exception_occurrence" defined at a-except.ads:63, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__exceptions__exception_occurrence__axiom
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_occurrence
 use        Ada__exceptions__Oeq

 axiom user_eq__def_axiom :
  (forall a b : Ada__exceptions__exception_occurrence.exception_occurrence [(Ada__exceptions__exception_occurrence.user_eq a b)].
   ((Ada__exceptions__exception_occurrence.user_eq a b) = (Ada__exceptions__Oeq.oeq a b)))
 
 predicate dynamic_invariant #"a-except.ads" 63 0 0# "inline" 
   (temp___expr_311 : Ada__exceptions__exception_occurrence.exception_occurrence) (temp___is_init_308 : bool) (temp___do_constant_309 : bool) (temp___do_toplevel_310 : bool)  =
  true
 
 predicate default_initial_assumption #"a-except.ads" 63 0 0# "inline" 
   (temp___312 : Ada__exceptions__exception_occurrence.exception_occurrence) (temp___313 : bool)  =
  true

end

(* Module giving axioms for type "code_loc" defined at a-except.ads:159, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__exceptions__code_loc__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T9s" defined at a-except.ads:343, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__exceptions__T9s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T10s" defined at a-except.ads:343, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__exceptions__T10s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T11s" defined at a-except.ads:347, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__exceptions__T11s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T12s" defined at a-except.ads:347, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__exceptions__T12s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "Tfloat_numberB" defined at pump_unit.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__Tfloat_numberB__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "float_number" defined at pump_unit.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__float_number__axiom
 use import "_gnatprove_standard".Main
 use        Pump_unit__float_number

 predicate dynamic_invariant #"a-except.ads" 63 0 0# "inline" 
   (temp___expr_317 : Pump_unit__float_number.float_number) (temp___is_init_314 : bool) (temp___do_constant_315 : bool) (temp___do_toplevel_316 : bool)  =
  true
 
 predicate default_initial_assumption #"pump_unit.ads" 7 0 0# "inline" 
   (temp___318 : Pump_unit__float_number.float_number) (temp___319 : bool)  =
  true

end

(* Module giving axioms for type "Tunit_id_typeP1" defined at pump_unit.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__Tunit_id_typeP1__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "unit_id_type" defined at pump_unit.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__unit_id_type__axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 predicate dynamic_invariant #"pump_unit.ads" 7 0 0# "inline" 
   (temp___expr_323 : Array__Int__Standard__character.map) (temp___is_init_320 : bool) (temp___do_constant_321 : bool) (temp___do_toplevel_322 : bool)  =
  true
 
 predicate default_initial_assumption #"pump_unit.ads" 8 0 0# "inline" 
   (temp___325 : Array__Int__Standard__character.map) (temp___326 : bool)  =
  true

end

(* Module giving axioms for type "T1s" defined at pump_unit.ads:16, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__pump_unit__T1s__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a value for string literal  defined at pump_unit.ads:16, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___336
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___336 #"pump_unit.ads" 16 0 0# 
   : Array__Int__Standard__character.map

end

(* Module giving axioms for type "pump_unit" defined at pump_unit.ads:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__pump_unit__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use import "real".RealInfix
 use        "_gnatprove_standard".Boolean
 use        Pump__float_number
 use        Pump__fuel_types
 use        Pump__state_type
 use        Pump__nozzle_type
 use        Pump__reservoir
 use        Pump__pump
 use        Pump_unit__pump_unit
 use        Array__Int__Standard__character
 use        Temp___336
 use        Array__Int__Standard__character

 predicate dynamic_invariant #"pump_unit.ads" 16 0 0# "inline" 
   (temp___expr_332 : Pump_unit__pump_unit.pump_unit) (temp___is_init_329 : bool) (temp___do_constant_330 : bool) (temp___do_toplevel_331 : bool)  =
  true
 
 predicate default_initial_assumption #"pump_unit.ads" 14 0 0# "inline" 
   (temp___334 : Pump_unit__pump_unit.pump_unit) (temp___335 : bool)  =
  ( ( ( ( ( ( ( ( ( ( (if ((Pump_unit__pump_unit.id__pred temp___334)) then (
   ((Pump_unit__pump_unit.rec__id (Pump_unit__pump_unit.__split_fields temp___334)) = Temp___336.temp___336)) else true) /\ (if ((Pump_unit__pump_unit.is_using__pred temp___334)) then (
   ((Pump_unit__pump_unit.rec__is_using (Pump_unit__pump_unit.__split_fields temp___334)) = (Boolean.of_int 0))) else true) ) /\ (if ((Pump_unit__pump_unit.is_paid__pred temp___334)) then (
   ((Pump_unit__pump_unit.rec__is_paid (Pump_unit__pump_unit.__split_fields temp___334)) = (Boolean.of_int 1))) else true) ) /\ (if ((Pump_unit__pump_unit.to_pay__pred temp___334)) then (
   ((Pump_unit__pump_unit.rec__to_pay (Pump_unit__pump_unit.__split_fields temp___334)) = (Pump__float_number.of_real (0.0E-2)))) else true) ) /\ (if ((Pump_unit__pump_unit.pumped__pred temp___334)) then (
   ((Pump_unit__pump_unit.rec__pumped (Pump_unit__pump_unit.__split_fields temp___334)) = (Pump__float_number.of_real (0.0E-2)))) else true) ) /\ (if ((Pump_unit__pump_unit.pump_active_fuel__pred temp___334)) then (
   ((Pump__fuel_types.to_rep (Pump_unit__pump_unit.rec__pump_active_fuel (Pump_unit__pump_unit.__split_fields temp___334))) = 3)) else true) ) /\ (if ((Pump_unit__pump_unit.pump_active_state__pred temp___334)) then (
   ((Pump__state_type.to_rep (Pump_unit__pump_unit.rec__pump_active_state (Pump_unit__pump_unit.__split_fields temp___334))) = 0)) else true) ) /\ (if ((Pump_unit__pump_unit.pump_nozzle_state__pred temp___334)) then (
   ((Pump__nozzle_type.to_rep (Pump_unit__pump_unit.rec__pump_nozzle_state (Pump_unit__pump_unit.__split_fields temp___334))) = 0)) else true) ) /\ (if ((Pump_unit__pump_unit.pump_91__pred temp___334)) then (
   (let temp___337 = (Pump_unit__pump_unit.rec__pump_91 (Pump_unit__pump_unit.__split_fields temp___334)) in (
    ( ( ( ( ( (if ((Pump__pump.reservoir_info__pred temp___337)) then (
     ((Pump__pump.rec__reservoir_info (Pump__pump.__split_fields temp___337)) = { Pump__reservoir.__split_fields = { Pump__reservoir.rec__total = (Pump__float_number.of_real (1000.0)); Pump__reservoir.rec__reservoir_category = (Pump__fuel_types.of_rep 0) } })) else true) /\ (if ((Pump__pump.pump_state__pred temp___337)) then (
     ((Pump__state_type.to_rep (Pump__pump.rec__pump_state (Pump__pump.__split_fields temp___337))) = 0)) else true) ) /\ (if ((Pump__pump.pumped__pred temp___337)) then (
     ((Pump__pump.rec__pumped (Pump__pump.__split_fields temp___337)) = (Pump__float_number.of_real (0.0E-2)))) else true) ) /\ (if ((Pump__pump.nozzle_state__pred temp___337)) then (
     ((Pump__nozzle_type.to_rep (Pump__pump.rec__nozzle_state (Pump__pump.__split_fields temp___337))) = 0)) else true) ) /\ (if ((Pump__pump.unit_price__pred temp___337)) then (
     ((Pump__pump.rec__unit_price (Pump__pump.__split_fields temp___337)) = (Pump__float_number.of_real (0.0E-2)))) else true) ) /\ (if ((Pump__pump.fuel_type__pred temp___337)) then (
     ((Pump__fuel_types.to_rep (Pump__pump.rec__fuel_type (Pump__pump.__split_fields temp___337))) = 3)) else true) )))
  ) else true) ) /\ (if ((Pump_unit__pump_unit.pump_95__pred temp___334)) then (
   (let temp___338 = (Pump_unit__pump_unit.rec__pump_95 (Pump_unit__pump_unit.__split_fields temp___334)) in (
    ( ( ( ( ( (if ((Pump__pump.reservoir_info__pred temp___338)) then (
     ((Pump__pump.rec__reservoir_info (Pump__pump.__split_fields temp___338)) = { Pump__reservoir.__split_fields = { Pump__reservoir.rec__total = (Pump__float_number.of_real (1000.0)); Pump__reservoir.rec__reservoir_category = (Pump__fuel_types.of_rep 0) } })) else true) /\ (if ((Pump__pump.pump_state__pred temp___338)) then (
     ((Pump__state_type.to_rep (Pump__pump.rec__pump_state (Pump__pump.__split_fields temp___338))) = 0)) else true) ) /\ (if ((Pump__pump.pumped__pred temp___338)) then (
     ((Pump__pump.rec__pumped (Pump__pump.__split_fields temp___338)) = (Pump__float_number.of_real (0.0E-2)))) else true) ) /\ (if ((Pump__pump.nozzle_state__pred temp___338)) then (
     ((Pump__nozzle_type.to_rep (Pump__pump.rec__nozzle_state (Pump__pump.__split_fields temp___338))) = 0)) else true) ) /\ (if ((Pump__pump.unit_price__pred temp___338)) then (
     ((Pump__pump.rec__unit_price (Pump__pump.__split_fields temp___338)) = (Pump__float_number.of_real (0.0E-2)))) else true) ) /\ (if ((Pump__pump.fuel_type__pred temp___338)) then (
     ((Pump__fuel_types.to_rep (Pump__pump.rec__fuel_type (Pump__pump.__split_fields temp___338))) = 3)) else true) )))
  ) else true) ) /\ (if ((Pump_unit__pump_unit.pump_diesel__pred temp___334)) then (
   (let temp___339 = (Pump_unit__pump_unit.rec__pump_diesel (Pump_unit__pump_unit.__split_fields temp___334)) in (
    ( ( ( ( ( (if ((Pump__pump.reservoir_info__pred temp___339)) then (
     ((Pump__pump.rec__reservoir_info (Pump__pump.__split_fields temp___339)) = { Pump__reservoir.__split_fields = { Pump__reservoir.rec__total = (Pump__float_number.of_real (1000.0)); Pump__reservoir.rec__reservoir_category = (Pump__fuel_types.of_rep 0) } })) else true) /\ (if ((Pump__pump.pump_state__pred temp___339)) then (
     ((Pump__state_type.to_rep (Pump__pump.rec__pump_state (Pump__pump.__split_fields temp___339))) = 0)) else true) ) /\ (if ((Pump__pump.pumped__pred temp___339)) then (
     ((Pump__pump.rec__pumped (Pump__pump.__split_fields temp___339)) = (Pump__float_number.of_real (0.0E-2)))) else true) ) /\ (if ((Pump__pump.nozzle_state__pred temp___339)) then (
     ((Pump__nozzle_type.to_rep (Pump__pump.rec__nozzle_state (Pump__pump.__split_fields temp___339))) = 0)) else true) ) /\ (if ((Pump__pump.unit_price__pred temp___339)) then (
     ((Pump__pump.rec__unit_price (Pump__pump.__split_fields temp___339)) = (Pump__float_number.of_real (0.0E-2)))) else true) ) /\ (if ((Pump__pump.fuel_type__pred temp___339)) then (
     ((Pump__fuel_types.to_rep (Pump__pump.rec__fuel_type (Pump__pump.__split_fields temp___339))) = 3)) else true) )))
  ) else true) )

end

(* Module giving axioms for type "T1b" defined at pump_unit.adb:23, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__add_pump__T1b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T2b" defined at pump_unit.adb:37, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__add_pump__T2b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T3b" defined at pump_unit.adb:51, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__add_pump__T3b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T4b" defined at pump_unit.adb:66, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__add_pump__T4b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T17b" defined at pump_unit.adb:161, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__set_is_using__T17b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T18b" defined at pump_unit.adb:176, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__set_is_paid__T18b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T19b" defined at pump_unit.adb:205, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__set_pump_active_state__T19b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T20b" defined at pump_unit.adb:225, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__set_pump_nozzle_state__T20b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T25b" defined at pump_unit.adb:272, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__left_nozzle__T25b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T26b" defined at pump_unit.adb:278, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__left_nozzle__T26b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T27b" defined at pump_unit.adb:279, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__left_nozzle__T27b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T28b" defined at pump_unit.adb:279, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__left_nozzle__T28b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T29b" defined at pump_unit.adb:285, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__left_nozzle__T29b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T30b" defined at pump_unit.adb:287, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__left_nozzle__T30b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T31b" defined at pump_unit.adb:300, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__return_nozzle__T31b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T32b" defined at pump_unit.adb:300, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__return_nozzle__T32b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T33b" defined at pump_unit.adb:306, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__return_nozzle__T33b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T34b" defined at pump_unit.adb:312, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__return_nozzle__T34b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T35b" defined at pump_unit.adb:315, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__return_nozzle__T35b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T36b" defined at pump_unit.adb:339, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__start_pumping__T36b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T37b" defined at pump_unit.adb:343, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__start_pumping__T37b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T38b" defined at pump_unit.adb:364, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__start_pumping__L_1__T38b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T39b" defined at pump_unit.adb:367, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__start_pumping__L_1__T39b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T40b" defined at pump_unit.adb:369, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__start_pumping__L_1__T40b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T41b" defined at pump_unit.adb:381, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__start_pumping__T41b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T42b" defined at pump_unit.adb:385, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__start_pumping__T42b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T43b" defined at pump_unit.adb:402, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__start_pumping__L_2__T43b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T44b" defined at pump_unit.adb:405, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__start_pumping__L_2__T44b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T45b" defined at pump_unit.adb:410, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__start_pumping__T45b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T46b" defined at pump_unit.adb:422, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__stop_pumping__T46b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T47b" defined at pump_unit.adb:422, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__stop_pumping__T47b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T48b" defined at pump_unit.adb:427, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump_unit__stop_pumping__T48b__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a value for string literal  defined at pump_unit.adb:161, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___342
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___342 #"pump_unit.adb" 161 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump_unit.adb:176, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___345
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___345 #"pump_unit.adb" 176 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump_unit.adb:205, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___352
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___352 #"pump_unit.adb" 205 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump_unit.adb:225, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___365
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___365 #"pump_unit.adb" 225 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump_unit.adb:23, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___378
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___378 #"pump_unit.adb" 23 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump_unit.adb:37, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___393
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___393 #"pump_unit.adb" 37 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump_unit.adb:51, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___408
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___408 #"pump_unit.adb" 51 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump_unit.adb:66, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___423
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___423 #"pump_unit.adb" 66 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump_unit.adb:287, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___424
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___424 #"pump_unit.adb" 287 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump_unit.adb:285, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___431
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___431 #"pump_unit.adb" 285 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump_unit.adb:279, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___432
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___432 #"pump_unit.adb" 279 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump_unit.adb:279, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___434
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___434 #"pump_unit.adb" 279 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump_unit.adb:278, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___442
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___442 #"pump_unit.adb" 278 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump_unit.adb:272, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___443
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___443 #"pump_unit.adb" 272 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump_unit.adb:315, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___445
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___445 #"pump_unit.adb" 315 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump_unit.adb:312, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___450
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___450 #"pump_unit.adb" 312 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump_unit.adb:306, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___455
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___455 #"pump_unit.adb" 306 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump_unit.adb:300, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___456
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___456 #"pump_unit.adb" 300 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump_unit.adb:300, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___458
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___458 #"pump_unit.adb" 300 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump_unit.adb:410, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___460
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___460 #"pump_unit.adb" 410 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump_unit.adb:339, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___461
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___461 #"pump_unit.adb" 339 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump_unit.adb:343, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___462
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___462 #"pump_unit.adb" 343 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump_unit.adb:369, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___471
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___471 #"pump_unit.adb" 369 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump_unit.adb:367, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___472
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___472 #"pump_unit.adb" 367 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump_unit.adb:364, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___473
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___473 #"pump_unit.adb" 364 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump_unit.adb:381, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___478
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___478 #"pump_unit.adb" 381 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump_unit.adb:385, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___479
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___479 #"pump_unit.adb" 385 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump_unit.adb:405, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___484
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___484 #"pump_unit.adb" 405 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump_unit.adb:402, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___485
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___485 #"pump_unit.adb" 402 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump_unit.adb:427, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___490
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___490 #"pump_unit.adb" 427 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump_unit.adb:422, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___491
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___491 #"pump_unit.adb" 422 0 0# 
   : Array__Int__Standard__character.map

end

(* Module for defining a value for string literal  defined at pump_unit.adb:422, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___493
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___493 #"pump_unit.adb" 422 0 0# 
   : Array__Int__Standard__character.map

end
(* Module for defining the value of constant "system_name" defined at system.ads:47, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__system_name__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__system_name

 axiom system_name__def_axiom :
  ((System__system_name.system_name ) = 0)

end

(* Module for defining the value of constant "min_int" defined at system.ads:51, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__min_int__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__min_int

 axiom min_int__def_axiom :
  ((System__min_int.min_int ) = ( -9223372036854775808 ))

end

(* Module for defining the value of constant "max_int" defined at system.ads:52, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_int__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_int

 axiom max_int__def_axiom :
  ((System__max_int.max_int ) = 9223372036854775807)

end

(* Module for defining the value of constant "max_binary_modulus" defined at system.ads:54, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_binary_modulus__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_binary_modulus

 axiom max_binary_modulus__def_axiom :
  ((System__max_binary_modulus.max_binary_modulus ) = 18446744073709551616)

end

(* Module for defining the value of constant "max_nonbinary_modulus" defined at system.ads:55, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_nonbinary_modulus__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_nonbinary_modulus

 axiom max_nonbinary_modulus__def_axiom :
  ((System__max_nonbinary_modulus.max_nonbinary_modulus ) = 4294967295)

end

(* Module for defining the value of constant "max_base_digits" defined at system.ads:57, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_base_digits__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_base_digits

 axiom max_base_digits__def_axiom :
  ((System__max_base_digits.max_base_digits ) = 18)

end

(* Module for defining the value of constant "max_digits" defined at system.ads:58, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_digits__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_digits

 axiom max_digits__def_axiom :
  ((System__max_digits.max_digits ) = 18)

end

(* Module for defining the value of constant "max_mantissa" defined at system.ads:60, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_mantissa__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_mantissa

 axiom max_mantissa__def_axiom :
  ((System__max_mantissa.max_mantissa ) = 63)

end

(* Module for defining the value of constant "fine_delta" defined at system.ads:61, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__fine_delta__axiom
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        Standard__universal_real
 use        System__fine_delta

 axiom fine_delta__def_axiom :
  ((System__fine_delta.fine_delta ) = (Standard__universal_real.of_real (0.000000000000000000108420217248550443400745280086994171142578125)))

end

(* Module for defining the value of constant "tick" defined at system.ads:63, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__tick__axiom
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        Standard__universal_real
 use        System__tick

 axiom tick__def_axiom :
  ((System__tick.tick ) = (Standard__universal_real.of_real (1.0E-2)))

end

(* Module for defining the value of constant "storage_unit" defined at system.ads:71, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__storage_unit__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__storage_unit

 axiom storage_unit__def_axiom :
  ((System__storage_unit.storage_unit ) = 8)

end

(* Module for defining the value of constant "word_size" defined at system.ads:72, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__word_size__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__word_size

 axiom word_size__def_axiom :
  ((System__word_size.word_size ) = 32)

end

(* Module for defining the value of constant "memory_size" defined at system.ads:73, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__memory_size__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__memory_size

 axiom memory_size__def_axiom :
  ((System__memory_size.memory_size ) = 4294967296)

end

(* Module for defining the value of constant "default_bit_order" defined at system.ads:92, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__default_bit_order__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__default_bit_order

 axiom default_bit_order__def_axiom :
  ((System__default_bit_order.default_bit_order ) = 1)

end

(* Module for defining the value of constant "max_priority" defined at system.ads:97, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_priority__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_priority

 axiom max_priority__def_axiom :
  ((System__max_priority.max_priority ) = 30)

end

(* Module for defining the value of constant "max_interrupt_priority" defined at system.ads:98, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_interrupt_priority__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_interrupt_priority

 axiom max_interrupt_priority__def_axiom :
  ((System__max_interrupt_priority.max_interrupt_priority ) = 31)

end

(* Module for defining the value of constant "default_priority" defined at system.ads:104, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__default_priority__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__default_priority

 axiom default_priority__def_axiom :
  ((System__default_priority.default_priority ) = 15)

end

(* Module for defining the value of constant "null_address" defined at system.ads:109, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__null_address__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32
 use        System__null_address

 axiom null_address__def_axiom :
  ((System__null_address.null_address ) = (BV32.of_int 0))

end

(* Module for defining the value of constant "backend_divide_checks" defined at system.ads:121, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__backend_divide_checks__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__backend_divide_checks

 axiom backend_divide_checks__def_axiom :
  ((System__backend_divide_checks.backend_divide_checks ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "backend_overflow_checks" defined at system.ads:122, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__backend_overflow_checks__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__backend_overflow_checks

 axiom backend_overflow_checks__def_axiom :
  ((System__backend_overflow_checks.backend_overflow_checks ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "command_line_args" defined at system.ads:123, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__command_line_args__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__command_line_args

 axiom command_line_args__def_axiom :
  ((System__command_line_args.command_line_args ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "configurable_run_time" defined at system.ads:124, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__configurable_run_time__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__configurable_run_time

 axiom configurable_run_time__def_axiom :
  ((System__configurable_run_time.configurable_run_time ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "denorm" defined at system.ads:125, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__denorm__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__denorm

 axiom denorm__def_axiom :
  ((System__denorm.denorm ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "duration_32_bits" defined at system.ads:126, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__duration_32_bits__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__duration_32_bits

 axiom duration_32_bits__def_axiom :
  ((System__duration_32_bits.duration_32_bits ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "exit_status_supported" defined at system.ads:127, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__exit_status_supported__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__exit_status_supported

 axiom exit_status_supported__def_axiom :
  ((System__exit_status_supported.exit_status_supported ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "fractional_fixed_ops" defined at system.ads:128, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__fractional_fixed_ops__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__fractional_fixed_ops

 axiom fractional_fixed_ops__def_axiom :
  ((System__fractional_fixed_ops.fractional_fixed_ops ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "frontend_layout" defined at system.ads:129, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__frontend_layout__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__frontend_layout

 axiom frontend_layout__def_axiom :
  ((System__frontend_layout.frontend_layout ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "machine_overflows" defined at system.ads:130, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__machine_overflows__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__machine_overflows

 axiom machine_overflows__def_axiom :
  ((System__machine_overflows.machine_overflows ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "machine_rounds" defined at system.ads:131, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__machine_rounds__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__machine_rounds

 axiom machine_rounds__def_axiom :
  ((System__machine_rounds.machine_rounds ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "preallocated_stacks" defined at system.ads:132, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__preallocated_stacks__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__preallocated_stacks

 axiom preallocated_stacks__def_axiom :
  ((System__preallocated_stacks.preallocated_stacks ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "signed_zeros" defined at system.ads:133, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__signed_zeros__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__signed_zeros

 axiom signed_zeros__def_axiom :
  ((System__signed_zeros.signed_zeros ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "stack_check_default" defined at system.ads:134, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__stack_check_default__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__stack_check_default

 axiom stack_check_default__def_axiom :
  ((System__stack_check_default.stack_check_default ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "stack_check_probes" defined at system.ads:135, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__stack_check_probes__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__stack_check_probes

 axiom stack_check_probes__def_axiom :
  ((System__stack_check_probes.stack_check_probes ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "stack_check_limits" defined at system.ads:136, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__stack_check_limits__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__stack_check_limits

 axiom stack_check_limits__def_axiom :
  ((System__stack_check_limits.stack_check_limits ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "support_aggregates" defined at system.ads:137, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_aggregates__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_aggregates

 axiom support_aggregates__def_axiom :
  ((System__support_aggregates.support_aggregates ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_atomic_primitives" defined at system.ads:138, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_atomic_primitives__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_atomic_primitives

 axiom support_atomic_primitives__def_axiom :
  ((System__support_atomic_primitives.support_atomic_primitives ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_composite_assign" defined at system.ads:139, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_composite_assign__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_composite_assign

 axiom support_composite_assign__def_axiom :
  ((System__support_composite_assign.support_composite_assign ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_composite_compare" defined at system.ads:140, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_composite_compare__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_composite_compare

 axiom support_composite_compare__def_axiom :
  ((System__support_composite_compare.support_composite_compare ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_long_shifts" defined at system.ads:141, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_long_shifts__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_long_shifts

 axiom support_long_shifts__def_axiom :
  ((System__support_long_shifts.support_long_shifts ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "always_compatible_rep" defined at system.ads:142, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__always_compatible_rep__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__always_compatible_rep

 axiom always_compatible_rep__def_axiom :
  ((System__always_compatible_rep.always_compatible_rep ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "suppress_standard_library" defined at system.ads:143, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__suppress_standard_library__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__suppress_standard_library

 axiom suppress_standard_library__def_axiom :
  ((System__suppress_standard_library.suppress_standard_library ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "use_ada_main_program_name" defined at system.ads:144, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__use_ada_main_program_name__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__use_ada_main_program_name

 axiom use_ada_main_program_name__def_axiom :
  ((System__use_ada_main_program_name.use_ada_main_program_name ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "frontend_exceptions" defined at system.ads:145, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__frontend_exceptions__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__frontend_exceptions

 axiom frontend_exceptions__def_axiom :
  ((System__frontend_exceptions.frontend_exceptions ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "zcx_by_default" defined at system.ads:146, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__zcx_by_default__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__zcx_by_default

 axiom zcx_by_default__def_axiom :
  ((System__zcx_by_default.zcx_by_default ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "underlying_priorities" defined at system.ads:165, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__underlying_priorities__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__underlying_priorities
 use        Array__Int__Standard__integer
 use        System__underlying_priorities__aggregate_def
 use        Array__Int__Standard__integer

 axiom underlying_priorities__def_axiom :
  ((System__underlying_priorities.underlying_priorities ) = (System__underlying_priorities__aggregate_def.system__underlying_priorities__aggregate_def ( -15 ) ( -7 ) ( -6 ) ( -5 ) ( -4 ) ( -3 ) ( -2 ) ( -1 ) 0 1 2 3 4 5 6 15))

end

(* Module for defining the value of constant "unspecified_size" defined at s-parame.ads:64, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__unspecified_size__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__parameters__unspecified_size

 axiom unspecified_size__def_axiom :
  ((System__parameters__unspecified_size.unspecified_size ) = ( -2147483648 ))

end

(* Module for defining the value of constant "dynamic" defined at s-parame.ads:68, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__dynamic__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__parameters__dynamic

 axiom dynamic__def_axiom :
  ((System__parameters__dynamic.dynamic ) = ( -1 ))

end

(* Module for defining the value of constant "sec_stack_percentage" defined at s-parame.ads:75, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__sec_stack_percentage__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__parameters__sec_stack_percentage

 axiom sec_stack_percentage__def_axiom :
  ((System__parameters__sec_stack_percentage.sec_stack_percentage ) = ( -1 ))

end

(* Module for defining the value of constant "sec_stack_dynamic" defined at s-parame.ads:78, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__sec_stack_dynamic__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__parameters__sec_stack_dynamic

 axiom sec_stack_dynamic__def_axiom :
  ((System__parameters__sec_stack_dynamic.sec_stack_dynamic ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "default_env_stack_size" defined at s-parame.ads:96, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__default_env_stack_size__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__parameters__default_env_stack_size

 axiom default_env_stack_size__def_axiom :
  ((System__parameters__default_env_stack_size.default_env_stack_size ) = 8192000)

end

(* Module for defining the value of constant "stack_grows_down" defined at s-parame.ads:101, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__stack_grows_down__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__parameters__stack_grows_down

 axiom stack_grows_down__def_axiom :
  ((System__parameters__stack_grows_down.stack_grows_down ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "long_bits" defined at s-parame.ads:110, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__long_bits__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__parameters__long_bits

 axiom long_bits__def_axiom :
  ((System__parameters__long_bits.long_bits ) = 32)

end

(* Module for defining the value of constant "c_malloc_linkname" defined at s-parame.ads:119, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__c_malloc_linkname__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        System__parameters__c_malloc_linkname
 use        Temp___159

 axiom c_malloc_linkname__def_axiom :
  ((System__parameters__c_malloc_linkname.c_malloc_linkname ) = (Standard__string.of_array Temp___159.temp___159 1 13))

end

(* Module for defining the value of constant "garbage_collected" defined at s-parame.ads:142, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__garbage_collected__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__parameters__garbage_collected

 axiom garbage_collected__def_axiom :
  ((System__parameters__garbage_collected.garbage_collected ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "single_lock" defined at s-parame.ads:157, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__single_lock__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__parameters__single_lock

 axiom single_lock__def_axiom :
  ((System__parameters__single_lock.single_lock ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "no_abort" defined at s-parame.ads:170, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__no_abort__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__parameters__no_abort

 axiom no_abort__def_axiom :
  ((System__parameters__no_abort.no_abort ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "max_attribute_count" defined at s-parame.ads:183, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__max_attribute_count__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__parameters__max_attribute_count

 axiom max_attribute_count__def_axiom :
  ((System__parameters__max_attribute_count.max_attribute_count ) = 32)

end

(* Module for defining the value of constant "runtime_traces" defined at s-parame.ads:190, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__runtime_traces__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__parameters__runtime_traces

 axiom runtime_traces__def_axiom :
  ((System__parameters__runtime_traces.runtime_traces ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "max_task_image_length" defined at s-parame.ads:199, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__max_task_image_length__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__parameters__max_task_image_length

 axiom max_task_image_length__def_axiom :
  ((System__parameters__max_task_image_length.max_task_image_length ) = 256)

end

(* Module for defining the value of constant "default_exception_msg_max_length" defined at s-parame.ads:206, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__default_exception_msg_max_length__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__parameters__default_exception_msg_max_length

 axiom default_exception_msg_max_length__def_axiom :
  ((System__parameters__default_exception_msg_max_length.default_exception_msg_max_length ) = 200)

end

(* Module for defining the value of constant "constraint_error_name" defined at s-stalib.ads:142, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__standard_library__constraint_error_name__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        System__standard_library__constraint_error_name
 use        Temp___160

 axiom constraint_error_name__def_axiom :
  ((System__standard_library__constraint_error_name.constraint_error_name ) = (Standard__string.of_array Temp___160.temp___160 1 17))

end

(* Module for defining the value of constant "program_error_name" defined at s-stalib.ads:143, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__standard_library__program_error_name__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        System__standard_library__program_error_name
 use        Temp___161

 axiom program_error_name__def_axiom :
  ((System__standard_library__program_error_name.program_error_name ) = (Standard__string.of_array Temp___161.temp___161 1 14))

end

(* Module for defining the value of constant "storage_error_name" defined at s-stalib.ads:144, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__standard_library__storage_error_name__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        System__standard_library__storage_error_name
 use        Temp___162

 axiom storage_error_name__def_axiom :
  ((System__standard_library__storage_error_name.storage_error_name ) = (Standard__string.of_array Temp___162.temp___162 1 14))

end

(* Module for defining the value of constant "tasking_error_name" defined at s-stalib.ads:145, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__standard_library__tasking_error_name__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        System__standard_library__tasking_error_name
 use        Temp___163

 axiom tasking_error_name__def_axiom :
  ((System__standard_library__tasking_error_name.tasking_error_name ) = (Standard__string.of_array Temp___163.temp___163 1 14))

end

(* Module for defining the value of constant "abort_signal_name" defined at s-stalib.ads:146, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__standard_library__abort_signal_name__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        System__standard_library__abort_signal_name
 use        Temp___164

 axiom abort_signal_name__def_axiom :
  ((System__standard_library__abort_signal_name.abort_signal_name ) = (Standard__string.of_array Temp___164.temp___164 1 14))

end

(* Module for defining the value of constant "numeric_error_name" defined at s-stalib.ads:148, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__standard_library__numeric_error_name__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        System__standard_library__numeric_error_name
 use        Temp___165

 axiom numeric_error_name__def_axiom :
  ((System__standard_library__numeric_error_name.numeric_error_name ) = (Standard__string.of_array Temp___165.temp___165 1 14))

end

(* Module for defining the value of constant "null_tb_entry" defined at s-traent.ads:53, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__traceback_entries__null_tb_entry__axiom
 use import "_gnatprove_standard".Main
 use        System__null_address
 use        System__traceback_entries__null_tb_entry

 axiom null_tb_entry__def_axiom :
  ((System__traceback_entries__null_tb_entry.null_tb_entry ) = System__null_address.null_address)

end

(* Module for defining the value of constant "exception_msg_max_length" defined at a-except.ads:153, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__exceptions__exception_msg_max_length__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__exceptions__exception_msg_max_length

 axiom exception_msg_max_length__def_axiom :
  ((Ada__exceptions__exception_msg_max_length.exception_msg_max_length ) = 200)

end

(* Module for defining the value of constant "null_loc" defined at a-except.ads:164, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__exceptions__null_loc__axiom
 use import "_gnatprove_standard".Main
 use        System__null_address
 use        Ada__exceptions__null_loc

 axiom null_loc__def_axiom :
  ((Ada__exceptions__null_loc.null_loc ) = System__null_address.null_address)

end

(* Module for defining the value of constant "max_tracebacks" defined at a-except.ads:280, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__exceptions__max_tracebacks__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__exceptions__max_tracebacks

 axiom max_tracebacks__def_axiom :
  ((Ada__exceptions__max_tracebacks.max_tracebacks ) = 50)

end

(* Module for declaring a program function (and possibly an axiom) for "set_fuel_price" defined at pump.ads:33, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__set_fuel_price__axiom
 use import "_gnatprove_standard".Main
 use        Pump__pump
 use        Pump__pump__axiom

 val set_fuel_price #"pump.ads" 33 0 0# 
   (pump_r__split_fields : Pump__pump.__split_fields__ref) (price : real) : unit
  requires { true }
  ensures { (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content } True True True) }
  writes {pump_r__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "set_pump_state" defined at pump.ads:34, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__set_pump_state__axiom
 use import "_gnatprove_standard".Main
 use        Pump__pump
 use        Pump__pump__axiom

 val set_pump_state #"pump.ads" 34 0 0# 
   (pump_r__split_fields : Pump__pump.__split_fields__ref) (statetype : int) : unit
  requires { true }
  ensures { (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content } True True True) }
  writes {pump_r__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "set_pumped" defined at pump.ads:35, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__set_pumped__axiom
 use import "_gnatprove_standard".Main
 use        Pump__pump
 use        Pump__pump__axiom

 val set_pumped #"pump.ads" 35 0 0# 
   (pump_r__split_fields : Pump__pump.__split_fields__ref) (amount : real) : unit
  requires { true }
  ensures { (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content } True True True) }
  writes {pump_r__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "set_pump_nozzle_state" defined at pump.ads:36, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__set_pump_nozzle_state__axiom
 use import "_gnatprove_standard".Main
 use        Pump__pump
 use        Pump__pump__axiom

 val set_pump_nozzle_state #"pump.ads" 36 0 0# 
   (pump_r__split_fields : Pump__pump.__split_fields__ref) (nozzletype : int) : unit
  requires { true }
  ensures { (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content } True True True) }
  writes {pump_r__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "append_reservoir" defined at pump.ads:38, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__append_reservoir__axiom
 use import "_gnatprove_standard".Main
 use        Pump__pump
 use        Pump__pump__axiom

 val append_reservoir #"pump.ads" 38 0 0# 
   (pump_r__split_fields : Pump__pump.__split_fields__ref) (fueltype : int) : unit
  requires { true }
  ensures { (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content } True True True) }
  writes {pump_r__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "set_reservoir_size" defined at pump.ads:40, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__set_reservoir_size__axiom
 use import "_gnatprove_standard".Main
 use        Pump__pump
 use        Pump__pump__axiom

 val set_reservoir_size #"pump.ads" 40 0 0# 
   (pump_r__split_fields : Pump__pump.__split_fields__ref) (size : real) : unit
  requires { true }
  ensures { (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content } True True True) }
  writes {pump_r__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "get_tanks_size" defined at pump.ads:51, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__get_tanks_size__axiom
 use import "_gnatprove_standard".Main
 use        Pump__float_number
 use        Pump__float_number__axiom
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__get_tanks_size

 val get_tanks_size #"pump.ads" 51 0 0# 
   (pump_r : Pump__pump.pump) : Pump__float_number.float_number
  requires { true }
  ensures { ( (result = (Pump__get_tanks_size.get_tanks_size pump_r)) /\ (Pump__float_number__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_tanks_size__post_axiom :
  (forall pump_r : Pump__pump.pump [(Pump__get_tanks_size.get_tanks_size pump_r)].
   ( (Pump__pump__axiom.dynamic_invariant pump_r True True True) -> (let result = (Pump__get_tanks_size.get_tanks_size pump_r) in (
    (Pump__float_number__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "remove_petrol_reservoir" defined at pump.ads:42, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__remove_petrol_reservoir__axiom
 use import "_gnatprove_standard".Main
 use import "real".RealInfix
 use        Pump__float_number
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__get_tanks_size

 val remove_petrol_reservoir #"pump.ads" 42 0 0# 
   (pump_r__split_fields : Pump__pump.__split_fields__ref) (amount : real) : unit
  requires { (amount <=. (Pump__float_number.to_real (Pump__get_tanks_size.get_tanks_size { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content }))) }
  ensures { ( ((Pump__float_number.to_real (Pump__get_tanks_size.get_tanks_size { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content })) >=. (0.0E-2)) /\ (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content } True True True) ) }
  writes {pump_r__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "get_state" defined at pump.ads:48, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__get_state__axiom
 use import "_gnatprove_standard".Main
 use        Pump__state_type__axiom
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__get_state

 val get_state #"pump.ads" 48 0 0# 
   (pump_r : Pump__pump.pump) : int
  requires { true }
  ensures { ( (result = (Pump__get_state.get_state pump_r)) /\ (Pump__state_type__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_state__post_axiom :
  (forall pump_r : Pump__pump.pump [(Pump__get_state.get_state pump_r)].
   ( (Pump__pump__axiom.dynamic_invariant pump_r True True True) -> (let result = (Pump__get_state.get_state pump_r) in (
    (Pump__state_type__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "get_current_nozzle_state" defined at pump.ads:49, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__get_current_nozzle_state__axiom
 use import "_gnatprove_standard".Main
 use        Pump__nozzle_type__axiom
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__get_current_nozzle_state

 val get_current_nozzle_state #"pump.ads" 49 0 0# 
   (pump_r : Pump__pump.pump) : int
  requires { true }
  ensures { ( (result = (Pump__get_current_nozzle_state.get_current_nozzle_state pump_r)) /\ (Pump__nozzle_type__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_current_nozzle_state__post_axiom :
  (forall pump_r : Pump__pump.pump [(Pump__get_current_nozzle_state.get_current_nozzle_state pump_r)].
   ( (Pump__pump__axiom.dynamic_invariant pump_r True True True) -> (let result = (Pump__get_current_nozzle_state.get_current_nozzle_state pump_r) in (
    (Pump__nozzle_type__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "get_unit_price" defined at pump.ads:50, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__get_unit_price__axiom
 use import "_gnatprove_standard".Main
 use        Pump__float_number
 use        Pump__float_number__axiom
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__get_unit_price

 val get_unit_price #"pump.ads" 50 0 0# 
   (pump_r : Pump__pump.pump) : Pump__float_number.float_number
  requires { true }
  ensures { ( (result = (Pump__get_unit_price.get_unit_price pump_r)) /\ (Pump__float_number__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_unit_price__post_axiom :
  (forall pump_r : Pump__pump.pump [(Pump__get_unit_price.get_unit_price pump_r)].
   ( (Pump__pump__axiom.dynamic_invariant pump_r True True True) -> (let result = (Pump__get_unit_price.get_unit_price pump_r) in (
    (Pump__float_number__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "get_resevoir_category" defined at pump.ads:52, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__get_resevoir_category__axiom
 use import "_gnatprove_standard".Main
 use        Pump__fuel_types__axiom
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__get_resevoir_category

 val get_resevoir_category #"pump.ads" 52 0 0# 
   (pump_r : Pump__pump.pump) : int
  requires { true }
  ensures { ( (result = (Pump__get_resevoir_category.get_resevoir_category pump_r)) /\ (Pump__fuel_types__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_resevoir_category__post_axiom :
  (forall pump_r : Pump__pump.pump [(Pump__get_resevoir_category.get_resevoir_category pump_r)].
   ( (Pump__pump__axiom.dynamic_invariant pump_r True True True) -> (let result = (Pump__get_resevoir_category.get_resevoir_category pump_r) in (
    (Pump__fuel_types__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "print" defined at sprint.ads:3, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Sprint__print__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string

 val print #"sprint.ads" 3 0 0# 
   (s : Standard__string.string) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "print_float_type" defined at sprint.ads:4, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Sprint__print_float_type__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string

 val print_float_type #"sprint.ads" 4 0 0# 
   (s1 : Standard__string.string) (s2 : real) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "print_state_type" defined at sprint.ads:5, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Sprint__print_state_type__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string

 val print_state_type #"sprint.ads" 5 0 0# 
   (s1 : Standard__string.string) (s2 : int) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "print_nozzle_type" defined at sprint.ads:6, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Sprint__print_nozzle_type__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string

 val print_nozzle_type #"sprint.ads" 6 0 0# 
   (s1 : Standard__string.string) (s2 : int) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "print_fuel_type" defined at sprint.ads:7, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Sprint__print_fuel_type__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string

 val print_fuel_type #"sprint.ads" 7 0 0# 
   (s1 : Standard__string.string) (s2 : int) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "Olt" defined at system.ads:77, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Olt__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__Olt

 val olt #"system.ads" 77 0 0# 
   (left : BV32.t) (right : BV32.t) : bool
  requires { true }
  ensures { (result = (System__Olt.olt left right)) }

end

(* Module for declaring a program function (and possibly an axiom) for "Ole" defined at system.ads:78, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Ole__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__Ole

 val ole #"system.ads" 78 0 0# 
   (left : BV32.t) (right : BV32.t) : bool
  requires { true }
  ensures { (result = (System__Ole.ole left right)) }

end

(* Module for declaring a program function (and possibly an axiom) for "Ogt" defined at system.ads:79, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Ogt__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__Ogt

 val ogt #"system.ads" 79 0 0# 
   (left : BV32.t) (right : BV32.t) : bool
  requires { true }
  ensures { (result = (System__Ogt.ogt left right)) }

end

(* Module for declaring a program function (and possibly an axiom) for "Oge" defined at system.ads:80, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Oge__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__Oge

 val oge #"system.ads" 80 0 0# 
   (left : BV32.t) (right : BV32.t) : bool
  requires { true }
  ensures { (result = (System__Oge.oge left right)) }

end

(* Module for declaring a program function (and possibly an axiom) for "Oeq" defined at system.ads:81, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Oeq__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__Oeq

 val oeq #"system.ads" 81 0 0# 
   (left : BV32.t) (right : BV32.t) : bool
  requires { true }
  ensures { (result = (System__Oeq.oeq left right)) }

end

(* Module for declaring a program function (and possibly an axiom) for "default_stack_size" defined at s-parame.ads:81, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__parameters__default_stack_size__axiom
 use import "_gnatprove_standard".Main
 use        System__parameters__size_type__axiom
 use        System__parameters__default_stack_size

 val default_stack_size #"s-parame.ads" 81 0 0# 
   (__void_param : unit) : int
  requires { true }
  ensures { ( (result = (System__parameters__default_stack_size.default_stack_size ())) /\ (System__parameters__size_type__axiom.dynamic_invariant result True False True) ) }
 
 axiom default_stack_size__post_axiom :
  (forall __void_param : unit [(System__parameters__default_stack_size.default_stack_size __void_param)].
   ( true -> (let result = (System__parameters__default_stack_size.default_stack_size __void_param) in (
    (System__parameters__size_type__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "minimum_stack_size" defined at s-parame.ads:84, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__parameters__minimum_stack_size__axiom
 use import "_gnatprove_standard".Main
 use        System__parameters__size_type__axiom
 use        System__parameters__minimum_stack_size

 val minimum_stack_size #"s-parame.ads" 84 0 0# 
   (__void_param : unit) : int
  requires { true }
  ensures { ( (result = (System__parameters__minimum_stack_size.minimum_stack_size ())) /\ (System__parameters__size_type__axiom.dynamic_invariant result True False True) ) }
 
 axiom minimum_stack_size__post_axiom :
  (forall __void_param : unit [(System__parameters__minimum_stack_size.minimum_stack_size __void_param)].
   ( true -> (let result = (System__parameters__minimum_stack_size.minimum_stack_size __void_param) in (
    (System__parameters__size_type__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "adjust_storage_size" defined at s-parame.ads:87, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__parameters__adjust_storage_size__axiom
 use import "_gnatprove_standard".Main
 use        System__parameters__size_type
 use        System__parameters__size_type__axiom
 use        System__parameters__adjust_storage_size

 val adjust_storage_size #"s-parame.ads" 87 0 0# 
   (size : int) : int
  requires { true }
  ensures { ( (result = (System__parameters__adjust_storage_size.adjust_storage_size size)) /\ (System__parameters__size_type__axiom.dynamic_invariant result True False True) ) }
 
 axiom adjust_storage_size__post_axiom :
  (forall size : int [(System__parameters__adjust_storage_size.adjust_storage_size size)].
   ( (System__parameters__size_type.in_range size) -> (let result = (System__parameters__adjust_storage_size.adjust_storage_size size) in (
    (System__parameters__size_type__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "abort_undefer_direct" defined at s-stalib.ads:254, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__standard_library__abort_undefer_direct__axiom
 use import "_gnatprove_standard".Main

 val abort_undefer_direct #"s-stalib.ads" 254 0 0# 
   (__void_param : unit) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "adafinal" defined at s-stalib.ads:259, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__standard_library__adafinal__axiom
 use import "_gnatprove_standard".Main

 val adafinal #"s-stalib.ads" 259 0 0# 
   (__void_param : unit) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "pc_for" defined at s-traent.ads:58, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__traceback_entries__pc_for__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__address__axiom
 use        System__traceback_entries__traceback_entry
 use        System__traceback_entries__pc_for

 val pc_for #"s-traent.ads" 58 0 0# 
   (tb_entry : BV32.t) : BV32.t
  requires { true }
  ensures { ( (result = (System__traceback_entries__pc_for.pc_for tb_entry)) /\ (System__address__axiom.dynamic_invariant result True False True) ) }
 
 axiom pc_for__post_axiom :
  (forall tb_entry : BV32.t [(System__traceback_entries__pc_for.pc_for tb_entry)].
   ( (if (( True \/ (BV32.ule System__traceback_entries__traceback_entry.first System__traceback_entries__traceback_entry.last) )) then (
    (System__traceback_entries__traceback_entry.dynamic_property System__traceback_entries__traceback_entry.first System__traceback_entries__traceback_entry.last tb_entry)) else true) -> (let result = (System__traceback_entries__pc_for.pc_for tb_entry) in (
    (System__address__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "tb_entry_for" defined at s-traent.ads:63, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__traceback_entries__tb_entry_for__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__address__axiom
 use        System__traceback_entries__traceback_entry
 use        System__traceback_entries__tb_entry_for

 val tb_entry_for #"s-traent.ads" 63 0 0# 
   (pc : BV32.t) : BV32.t
  requires { true }
  ensures { ( (result = (System__traceback_entries__tb_entry_for.tb_entry_for pc)) /\ (if (( True \/ (BV32.ule System__traceback_entries__traceback_entry.first System__traceback_entries__traceback_entry.last) )) then (
   (System__traceback_entries__traceback_entry.dynamic_property System__traceback_entries__traceback_entry.first System__traceback_entries__traceback_entry.last result)) else true) ) }
 
 axiom tb_entry_for__post_axiom :
  (forall pc : BV32.t [(System__traceback_entries__tb_entry_for.tb_entry_for pc)].
   ( (System__address__axiom.dynamic_invariant pc True True True) -> (let result = (System__traceback_entries__tb_entry_for.tb_entry_for pc) in (
    (if (( True \/ (BV32.ule System__traceback_entries__traceback_entry.first System__traceback_entries__traceback_entry.last) )) then (
     (System__traceback_entries__traceback_entry.dynamic_property System__traceback_entries__traceback_entry.first System__traceback_entries__traceback_entry.last result)) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "exception_name" defined at a-except.ads:70, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__exceptions__exception_name__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string__axiom
 use        Ada__exceptions__exception_id
 use        Ada__exceptions__exception_id__axiom
 use        Ada__exceptions__exception_name

 val exception_name #"a-except.ads" 70 0 0# 
   (id : Ada__exceptions__exception_id.exception_id) : Standard__string.string
  requires { true }
  ensures { ( (result = (Ada__exceptions__exception_name.exception_name id)) /\ (Standard__string__axiom.dynamic_invariant result True False True) ) }
 
 axiom exception_name__post_axiom :
  (forall id : Ada__exceptions__exception_id.exception_id [(Ada__exceptions__exception_name.exception_name id)].
   ( (Ada__exceptions__exception_id__axiom.dynamic_invariant id True True True) -> (let result = (Ada__exceptions__exception_name.exception_name id) in (
    (Standard__string__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "exception_name__2" defined at a-except.ads:72, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__exceptions__exception_name__2__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string__axiom
 use        Ada__exceptions__exception_occurrence
 use        Ada__exceptions__exception_occurrence__axiom
 use        Ada__exceptions__exception_name__2

 val exception_name__2 #"a-except.ads" 72 0 0# 
   (x : Ada__exceptions__exception_occurrence.exception_occurrence) : Standard__string.string
  requires { true }
  ensures { ( (result = (Ada__exceptions__exception_name__2.exception_name__2 x)) /\ (Standard__string__axiom.dynamic_invariant result True False True) ) }
 
 axiom exception_name__2__post_axiom :
  (forall x : Ada__exceptions__exception_occurrence.exception_occurrence [(Ada__exceptions__exception_name__2.exception_name__2 x)].
   ( (Ada__exceptions__exception_occurrence__axiom.dynamic_invariant x True True True) -> (let result = (Ada__exceptions__exception_name__2.exception_name__2 x) in (
    (Standard__string__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "wide_exception_name" defined at a-except.ads:74, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__exceptions__wide_exception_name__axiom
 use import "_gnatprove_standard".Main
 use        Standard__wide_string
 use        Standard__wide_string__axiom
 use        Ada__exceptions__exception_id
 use        Ada__exceptions__exception_id__axiom
 use        Ada__exceptions__wide_exception_name

 val wide_exception_name #"a-except.ads" 74 0 0# 
   (id : Ada__exceptions__exception_id.exception_id) : Standard__wide_string.wide_string
  requires { true }
  ensures { ( (result = (Ada__exceptions__wide_exception_name.wide_exception_name id)) /\ (Standard__wide_string__axiom.dynamic_invariant result True False True) ) }
 
 axiom wide_exception_name__post_axiom :
  (forall id : Ada__exceptions__exception_id.exception_id [(Ada__exceptions__wide_exception_name.wide_exception_name id)].
   ( (Ada__exceptions__exception_id__axiom.dynamic_invariant id True True True) -> (let result = (Ada__exceptions__wide_exception_name.wide_exception_name id) in (
    (Standard__wide_string__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "wide_exception_name__2" defined at a-except.ads:78, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__exceptions__wide_exception_name__2__axiom
 use import "_gnatprove_standard".Main
 use        Standard__wide_string
 use        Standard__wide_string__axiom
 use        Ada__exceptions__exception_occurrence
 use        Ada__exceptions__exception_occurrence__axiom
 use        Ada__exceptions__wide_exception_name__2

 val wide_exception_name__2 #"a-except.ads" 78 0 0# 
   (x : Ada__exceptions__exception_occurrence.exception_occurrence) : Standard__wide_string.wide_string
  requires { true }
  ensures { ( (result = (Ada__exceptions__wide_exception_name__2.wide_exception_name__2 x)) /\ (Standard__wide_string__axiom.dynamic_invariant result True False True) ) }
 
 axiom wide_exception_name__2__post_axiom :
  (forall x : Ada__exceptions__exception_occurrence.exception_occurrence [(Ada__exceptions__wide_exception_name__2.wide_exception_name__2 x)].
   ( (Ada__exceptions__exception_occurrence__axiom.dynamic_invariant x True True True) -> (let result = (Ada__exceptions__wide_exception_name__2.wide_exception_name__2 x) in (
    (Standard__wide_string__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "wide_wide_exception_name" defined at a-except.ads:82, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__exceptions__wide_wide_exception_name__axiom
 use import "_gnatprove_standard".Main
 use        Standard__wide_wide_string
 use        Standard__wide_wide_string__axiom
 use        Ada__exceptions__exception_id
 use        Ada__exceptions__exception_id__axiom
 use        Ada__exceptions__wide_wide_exception_name

 val wide_wide_exception_name #"a-except.ads" 82 0 0# 
   (id : Ada__exceptions__exception_id.exception_id) : Standard__wide_wide_string.wide_wide_string
  requires { true }
  ensures { ( (result = (Ada__exceptions__wide_wide_exception_name.wide_wide_exception_name id)) /\ (Standard__wide_wide_string__axiom.dynamic_invariant result True False True) ) }
 
 axiom wide_wide_exception_name__post_axiom :
  (forall id : Ada__exceptions__exception_id.exception_id [(Ada__exceptions__wide_wide_exception_name.wide_wide_exception_name id)].
   ( (Ada__exceptions__exception_id__axiom.dynamic_invariant id True True True) -> (let result = (Ada__exceptions__wide_wide_exception_name.wide_wide_exception_name id) in (
    (Standard__wide_wide_string__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "wide_wide_exception_name__2" defined at a-except.ads:86, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__exceptions__wide_wide_exception_name__2__axiom
 use import "_gnatprove_standard".Main
 use        Standard__wide_wide_string
 use        Standard__wide_wide_string__axiom
 use        Ada__exceptions__exception_occurrence
 use        Ada__exceptions__exception_occurrence__axiom
 use        Ada__exceptions__wide_wide_exception_name__2

 val wide_wide_exception_name__2 #"a-except.ads" 86 0 0# 
   (x : Ada__exceptions__exception_occurrence.exception_occurrence) : Standard__wide_wide_string.wide_wide_string
  requires { true }
  ensures { ( (result = (Ada__exceptions__wide_wide_exception_name__2.wide_wide_exception_name__2 x)) /\ (Standard__wide_wide_string__axiom.dynamic_invariant result True False True) ) }
 
 axiom wide_wide_exception_name__2__post_axiom :
  (forall x : Ada__exceptions__exception_occurrence.exception_occurrence [(Ada__exceptions__wide_wide_exception_name__2.wide_wide_exception_name__2 x)].
   ( (Ada__exceptions__exception_occurrence__axiom.dynamic_invariant x True True True) -> (let result = (Ada__exceptions__wide_wide_exception_name__2.wide_wide_exception_name__2 x) in (
    (Standard__wide_wide_string__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "raise_exception" defined at a-except.ads:90, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__exceptions__raise_exception__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Ada__exceptions__exception_id

 val raise_exception #"a-except.ads" 90 0 0# 
   (e : Ada__exceptions__exception_id.exception_id) (message : Standard__string.string) : unit
  requires { true }
  ensures { false }
 
 namespace No_Return
  val raise_exception #"a-except.ads" 90 0 0# 
    (e : Ada__exceptions__exception_id.exception_id) (message : Standard__string.string) : unit
   requires { false }
   ensures { false }

 end

end

(* Module for declaring a program function (and possibly an axiom) for "exception_message" defined at a-except.ads:94, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__exceptions__exception_message__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string__axiom
 use        Ada__exceptions__exception_occurrence
 use        Ada__exceptions__exception_occurrence__axiom
 use        Ada__exceptions__exception_message

 val exception_message #"a-except.ads" 94 0 0# 
   (x : Ada__exceptions__exception_occurrence.exception_occurrence) : Standard__string.string
  requires { true }
  ensures { ( (result = (Ada__exceptions__exception_message.exception_message x)) /\ (Standard__string__axiom.dynamic_invariant result True False True) ) }
 
 axiom exception_message__post_axiom :
  (forall x : Ada__exceptions__exception_occurrence.exception_occurrence [(Ada__exceptions__exception_message.exception_message x)].
   ( (Ada__exceptions__exception_occurrence__axiom.dynamic_invariant x True True True) -> (let result = (Ada__exceptions__exception_message.exception_message x) in (
    (Standard__string__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "reraise_occurrence" defined at a-except.ads:96, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__exceptions__reraise_occurrence__axiom
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_occurrence

 val reraise_occurrence #"a-except.ads" 96 0 0# 
   (x : Ada__exceptions__exception_occurrence.exception_occurrence) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "exception_identity" defined at a-except.ads:102, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__exceptions__exception_identity__axiom
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_id
 use        Ada__exceptions__exception_id__axiom
 use        Ada__exceptions__exception_occurrence
 use        Ada__exceptions__exception_occurrence__axiom
 use        Ada__exceptions__exception_identity

 val exception_identity #"a-except.ads" 102 0 0# 
   (x : Ada__exceptions__exception_occurrence.exception_occurrence) : Ada__exceptions__exception_id.exception_id
  requires { true }
  ensures { ( (result = (Ada__exceptions__exception_identity.exception_identity x)) /\ (Ada__exceptions__exception_id__axiom.dynamic_invariant result True False True) ) }
 
 axiom exception_identity__post_axiom :
  (forall x : Ada__exceptions__exception_occurrence.exception_occurrence [(Ada__exceptions__exception_identity.exception_identity x)].
   ( (Ada__exceptions__exception_occurrence__axiom.dynamic_invariant x True True True) -> (let result = (Ada__exceptions__exception_identity.exception_identity x) in (
    (Ada__exceptions__exception_id__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "exception_information" defined at a-except.ads:104, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__exceptions__exception_information__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string__axiom
 use        Ada__exceptions__exception_occurrence
 use        Ada__exceptions__exception_occurrence__axiom
 use        Ada__exceptions__exception_information

 val exception_information #"a-except.ads" 104 0 0# 
   (x : Ada__exceptions__exception_occurrence.exception_occurrence) : Standard__string.string
  requires { true }
  ensures { ( (result = (Ada__exceptions__exception_information.exception_information x)) /\ (Standard__string__axiom.dynamic_invariant result True False True) ) }
 
 axiom exception_information__post_axiom :
  (forall x : Ada__exceptions__exception_occurrence.exception_occurrence [(Ada__exceptions__exception_information.exception_information x)].
   ( (Ada__exceptions__exception_occurrence__axiom.dynamic_invariant x True True True) -> (let result = (Ada__exceptions__exception_information.exception_information x) in (
    (Standard__string__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "save_occurrence" defined at a-except.ads:123, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__exceptions__save_occurrence__axiom
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_occurrence
 use        Ada__exceptions__exception_occurrence__axiom

 val save_occurrence #"a-except.ads" 123 0 0# 
   (target : Ada__exceptions__exception_occurrence.exception_occurrence__ref) (source : Ada__exceptions__exception_occurrence.exception_occurrence) : unit
  requires { true }
  ensures { (Ada__exceptions__exception_occurrence__axiom.dynamic_invariant target.Ada__exceptions__exception_occurrence.exception_occurrence__content True True True) }
  writes {target}

end

(* Module for declaring a program function (and possibly an axiom) for "eid_to_string" defined at a-except.ads:169, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__exceptions__eid_to_string__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string__axiom
 use        Ada__exceptions__exception_id
 use        Ada__exceptions__exception_id__axiom
 use        Ada__exceptions__eid_to_string

 val eid_to_string #"a-except.ads" 169 0 0# 
   (x : Ada__exceptions__exception_id.exception_id) : Standard__string.string
  requires { true }
  ensures { ( (result = (Ada__exceptions__eid_to_string.eid_to_string x)) /\ (Standard__string__axiom.dynamic_invariant result True False True) ) }
 
 axiom eid_to_string__post_axiom :
  (forall x : Ada__exceptions__exception_id.exception_id [(Ada__exceptions__eid_to_string.eid_to_string x)].
   ( (Ada__exceptions__exception_id__axiom.dynamic_invariant x True True True) -> (let result = (Ada__exceptions__eid_to_string.eid_to_string x) in (
    (Standard__string__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "string_to_eid" defined at a-except.ads:170, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__exceptions__string_to_eid__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string__axiom
 use        Ada__exceptions__exception_id
 use        Ada__exceptions__exception_id__axiom
 use        Ada__exceptions__string_to_eid

 val string_to_eid #"a-except.ads" 170 0 0# 
   (s : Standard__string.string) : Ada__exceptions__exception_id.exception_id
  requires { true }
  ensures { ( (result = (Ada__exceptions__string_to_eid.string_to_eid s)) /\ (Ada__exceptions__exception_id__axiom.dynamic_invariant result True False True) ) }
 
 axiom string_to_eid__post_axiom :
  (forall s : Standard__string.string [(Ada__exceptions__string_to_eid.string_to_eid s)].
   ( (Standard__string__axiom.dynamic_invariant s True True True) -> (let result = (Ada__exceptions__string_to_eid.string_to_eid s) in (
    (Ada__exceptions__exception_id__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "exception_name_simple" defined at a-except.ads:180, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__exceptions__exception_name_simple__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string__axiom
 use        Ada__exceptions__exception_occurrence
 use        Ada__exceptions__exception_occurrence__axiom
 use        Ada__exceptions__exception_name_simple

 val exception_name_simple #"a-except.ads" 180 0 0# 
   (x : Ada__exceptions__exception_occurrence.exception_occurrence) : Standard__string.string
  requires { true }
  ensures { ( (result = (Ada__exceptions__exception_name_simple.exception_name_simple x)) /\ (Standard__string__axiom.dynamic_invariant result True False True) ) }
 
 axiom exception_name_simple__post_axiom :
  (forall x : Ada__exceptions__exception_occurrence.exception_occurrence [(Ada__exceptions__exception_name_simple.exception_name_simple x)].
   ( (Ada__exceptions__exception_occurrence__axiom.dynamic_invariant x True True True) -> (let result = (Ada__exceptions__exception_name_simple.exception_name_simple x) in (
    (Standard__string__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "raise_exception_always" defined at a-except.ads:188, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__exceptions__raise_exception_always__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Ada__exceptions__exception_id

 val raise_exception_always #"a-except.ads" 188 0 0# 
   (e : Ada__exceptions__exception_id.exception_id) (message : Standard__string.string) : unit
  requires { true }
  ensures { false }
 
 namespace No_Return
  val raise_exception_always #"a-except.ads" 188 0 0# 
    (e : Ada__exceptions__exception_id.exception_id) (message : Standard__string.string) : unit
   requires { false }
   ensures { false }

 end

end

(* Module for declaring a program function (and possibly an axiom) for "raise_from_signal_handler" defined at a-except.ads:197, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__exceptions__raise_from_signal_handler__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        Ada__exceptions__exception_id

 val raise_from_signal_handler #"a-except.ads" 197 0 0# 
   (e : Ada__exceptions__exception_id.exception_id) (m : BV32.t) : unit
  requires { true }
  ensures { false }
 
 namespace No_Return
  val raise_from_signal_handler #"a-except.ads" 197 0 0# 
    (e : Ada__exceptions__exception_id.exception_id) (m : BV32.t) : unit
   requires { false }
   ensures { false }

 end

end

(* Module for declaring a program function (and possibly an axiom) for "raise_from_controlled_operation" defined at a-except.ads:215, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__exceptions__raise_from_controlled_operation__axiom
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_occurrence

 val raise_from_controlled_operation #"a-except.ads" 215 0 0# 
   (x : Ada__exceptions__exception_occurrence.exception_occurrence) : unit
  requires { true }
  ensures { false }
 
 namespace No_Return
  val raise_from_controlled_operation #"a-except.ads" 215 0 0# 
    (x : Ada__exceptions__exception_occurrence.exception_occurrence) : unit
   requires { false }
   ensures { false }

 end

end

(* Module for declaring a program function (and possibly an axiom) for "reraise_library_exception_if_any" defined at a-except.ads:224, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__exceptions__reraise_library_exception_if_any__axiom
 use import "_gnatprove_standard".Main

 val reraise_library_exception_if_any #"a-except.ads" 224 0 0# 
   (__void_param : unit) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "reraise_occurrence_always" defined at a-except.ads:231, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__exceptions__reraise_occurrence_always__axiom
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_occurrence

 val reraise_occurrence_always #"a-except.ads" 231 0 0# 
   (x : Ada__exceptions__exception_occurrence.exception_occurrence) : unit
  requires { true }
  ensures { false }
 
 namespace No_Return
  val reraise_occurrence_always #"a-except.ads" 231 0 0# 
    (x : Ada__exceptions__exception_occurrence.exception_occurrence) : unit
   requires { false }
   ensures { false }

 end

end

(* Module for declaring a program function (and possibly an axiom) for "reraise_occurrence_no_defer" defined at a-except.ads:238, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__exceptions__reraise_occurrence_no_defer__axiom
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_occurrence

 val reraise_occurrence_no_defer #"a-except.ads" 238 0 0# 
   (x : Ada__exceptions__exception_occurrence.exception_occurrence) : unit
  requires { true }
  ensures { false }
 
 namespace No_Return
  val reraise_occurrence_no_defer #"a-except.ads" 238 0 0# 
    (x : Ada__exceptions__exception_occurrence.exception_occurrence) : unit
   requires { false }
   ensures { false }

 end

end

(* Module for declaring a program function (and possibly an axiom) for "triggered_by_abort" defined at a-except.ads:245, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__exceptions__triggered_by_abort__axiom
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__triggered_by_abort

 val triggered_by_abort #"a-except.ads" 245 0 0# 
   (__void_param : unit) : bool
  requires { true }
  ensures { (result = (Ada__exceptions__triggered_by_abort.triggered_by_abort ())) }

end

(* Module for declaring a program function (and possibly an axiom) for "poll" defined at a-except.ads:270, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__exceptions__poll__axiom
 use import "_gnatprove_standard".Main

 val poll #"a-except.ads" 270 0 0# 
   (__void_param : unit) : unit
  requires { true }
  ensures { true }

end

(* Module for declaring a program function (and possibly an axiom) for "Oeq" defined at a-except.ads:319, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__exceptions__Oeq__axiom
 use import "_gnatprove_standard".Main
 use        Ada__exceptions__exception_occurrence
 use        Ada__exceptions__Oeq

 val oeq #"a-except.ads" 319 0 0# 
   (left : Ada__exceptions__exception_occurrence.exception_occurrence) (right : Ada__exceptions__exception_occurrence.exception_occurrence) : bool
  requires { true }
  ensures { (result = (Ada__exceptions__Oeq.oeq left right)) }

end

(* Module for declaring a program function (and possibly an axiom) for "get_exception_machine_occurrence" defined at a-except.ads:325, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__exceptions__get_exception_machine_occurrence__axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        System__address__axiom
 use        Ada__exceptions__exception_occurrence
 use        Ada__exceptions__exception_occurrence__axiom
 use        Ada__exceptions__get_exception_machine_occurrence

 val get_exception_machine_occurrence #"a-except.ads" 325 0 0# 
   (x : Ada__exceptions__exception_occurrence.exception_occurrence) : BV32.t
  requires { true }
  ensures { ( (result = (Ada__exceptions__get_exception_machine_occurrence.get_exception_machine_occurrence x)) /\ (System__address__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_exception_machine_occurrence__post_axiom :
  (forall x : Ada__exceptions__exception_occurrence.exception_occurrence [(Ada__exceptions__get_exception_machine_occurrence.get_exception_machine_occurrence x)].
   ( (Ada__exceptions__exception_occurrence__axiom.dynamic_invariant x True True True) -> (let result = (Ada__exceptions__get_exception_machine_occurrence.get_exception_machine_occurrence x) in (
    (System__address__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "eo_to_string" defined at a-except.ads:334, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__exceptions__eo_to_string__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string__axiom
 use        Ada__exceptions__exception_occurrence
 use        Ada__exceptions__exception_occurrence__axiom
 use        Ada__exceptions__eo_to_string

 val eo_to_string #"a-except.ads" 334 0 0# 
   (x : Ada__exceptions__exception_occurrence.exception_occurrence) : Standard__string.string
  requires { true }
  ensures { ( (result = (Ada__exceptions__eo_to_string.eo_to_string x)) /\ (Standard__string__axiom.dynamic_invariant result True False True) ) }
 
 axiom eo_to_string__post_axiom :
  (forall x : Ada__exceptions__exception_occurrence.exception_occurrence [(Ada__exceptions__eo_to_string.eo_to_string x)].
   ( (Ada__exceptions__exception_occurrence__axiom.dynamic_invariant x True True True) -> (let result = (Ada__exceptions__eo_to_string.eo_to_string x) in (
    (Standard__string__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "string_to_eo" defined at a-except.ads:335, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__exceptions__string_to_eo__axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string__axiom
 use        Ada__exceptions__exception_occurrence
 use        Ada__exceptions__exception_occurrence__axiom
 use        Ada__exceptions__string_to_eo

 val string_to_eo #"a-except.ads" 335 0 0# 
   (s : Standard__string.string) : Ada__exceptions__exception_occurrence.exception_occurrence
  requires { true }
  ensures { ( (result = (Ada__exceptions__string_to_eo.string_to_eo s)) /\ (Ada__exceptions__exception_occurrence__axiom.dynamic_invariant result True False True) ) }
 
 axiom string_to_eo__post_axiom :
  (forall s : Standard__string.string [(Ada__exceptions__string_to_eo.string_to_eo s)].
   ( (Standard__string__axiom.dynamic_invariant s True True True) -> (let result = (Ada__exceptions__string_to_eo.string_to_eo s) in (
    (Ada__exceptions__exception_occurrence__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "get_pump" defined at pump_unit.ads:30, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__get_pump__axiom
 use import "_gnatprove_standard".Main
 use        Pump__fuel_types
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__get_pump

 val get_pump #"pump_unit.ads" 30 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) (fueltype : int) : Pump__pump.pump
  requires { true }
  ensures { ( (result = (Pump_unit__get_pump.get_pump pumpunit fueltype)) /\ (Pump__pump__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_pump__post_axiom :
  (forall pumpunit : Pump_unit__pump_unit.pump_unit.
  (forall fueltype : int [(Pump_unit__get_pump.get_pump pumpunit fueltype)].
   ( ( (Pump_unit__pump_unit__axiom.dynamic_invariant pumpunit True True True) /\ (Pump__fuel_types.in_range fueltype) ) -> (let result = (Pump_unit__get_pump.get_pump pumpunit fueltype) in (
    (Pump__pump__axiom.dynamic_invariant result True False True)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "get_tanks_size" defined at pump_unit.ads:31, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__get_tanks_size__axiom
 use import "_gnatprove_standard".Main
 use        Pump__float_number
 use        Pump__float_number__axiom
 use        Pump__fuel_types
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__get_tanks_size

 val get_tanks_size #"pump_unit.ads" 31 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) (fueltype : int) : Pump__float_number.float_number
  requires { true }
  ensures { ( (result = (Pump_unit__get_tanks_size.get_tanks_size pumpunit fueltype)) /\ (Pump__float_number__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_tanks_size__post_axiom :
  (forall pumpunit : Pump_unit__pump_unit.pump_unit.
  (forall fueltype : int [(Pump_unit__get_tanks_size.get_tanks_size pumpunit fueltype)].
   ( ( (Pump_unit__pump_unit__axiom.dynamic_invariant pumpunit True True True) /\ (Pump__fuel_types.in_range fueltype) ) -> (let result = (Pump_unit__get_tanks_size.get_tanks_size pumpunit fueltype) in (
    (Pump__float_number__axiom.dynamic_invariant result True False True)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "get_id" defined at pump_unit.ads:32, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__get_id__axiom
 use import "_gnatprove_standard".Main
 use        Pump_unit__unit_id_type__axiom
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__get_id
 use        Array__Int__Standard__character

 val get_id #"pump_unit.ads" 32 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) : Array__Int__Standard__character.map
  requires { true }
  ensures { ( (result = (Pump_unit__get_id.get_id pumpunit)) /\ (Pump_unit__unit_id_type__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_id__post_axiom :
  (forall pumpunit : Pump_unit__pump_unit.pump_unit [(Pump_unit__get_id.get_id pumpunit)].
   ( (Pump_unit__pump_unit__axiom.dynamic_invariant pumpunit True True True) -> (let result = (Pump_unit__get_id.get_id pumpunit) in (
    (Pump_unit__unit_id_type__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "get_to_pay" defined at pump_unit.ads:33, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__get_to_pay__axiom
 use import "_gnatprove_standard".Main
 use        Pump__float_number
 use        Pump__float_number__axiom
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__get_to_pay

 val get_to_pay #"pump_unit.ads" 33 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) : Pump__float_number.float_number
  requires { true }
  ensures { ( (result = (Pump_unit__get_to_pay.get_to_pay pumpunit)) /\ (Pump__float_number__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_to_pay__post_axiom :
  (forall pumpunit : Pump_unit__pump_unit.pump_unit [(Pump_unit__get_to_pay.get_to_pay pumpunit)].
   ( (Pump_unit__pump_unit__axiom.dynamic_invariant pumpunit True True True) -> (let result = (Pump_unit__get_to_pay.get_to_pay pumpunit) in (
    (Pump__float_number__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "get_pumped" defined at pump_unit.ads:34, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__get_pumped__axiom
 use import "_gnatprove_standard".Main
 use        Pump__float_number
 use        Pump__float_number__axiom
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__get_pumped

 val get_pumped #"pump_unit.ads" 34 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) : Pump__float_number.float_number
  requires { true }
  ensures { ( (result = (Pump_unit__get_pumped.get_pumped pumpunit)) /\ (Pump__float_number__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_pumped__post_axiom :
  (forall pumpunit : Pump_unit__pump_unit.pump_unit [(Pump_unit__get_pumped.get_pumped pumpunit)].
   ( (Pump_unit__pump_unit__axiom.dynamic_invariant pumpunit True True True) -> (let result = (Pump_unit__get_pumped.get_pumped pumpunit) in (
    (Pump__float_number__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "get_fuel" defined at pump_unit.ads:35, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__get_fuel__axiom
 use import "_gnatprove_standard".Main
 use        Pump__fuel_types__axiom
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__get_fuel

 val get_fuel #"pump_unit.ads" 35 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) : int
  requires { true }
  ensures { ( (result = (Pump_unit__get_fuel.get_fuel pumpunit)) /\ (Pump__fuel_types__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_fuel__post_axiom :
  (forall pumpunit : Pump_unit__pump_unit.pump_unit [(Pump_unit__get_fuel.get_fuel pumpunit)].
   ( (Pump_unit__pump_unit__axiom.dynamic_invariant pumpunit True True True) -> (let result = (Pump_unit__get_fuel.get_fuel pumpunit) in (
    (Pump__fuel_types__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "unit_is_using" defined at pump_unit.ads:36, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__unit_is_using__axiom
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit
 use        Pump_unit__unit_is_using

 val unit_is_using #"pump_unit.ads" 36 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) : bool
  requires { true }
  ensures { (result = (Pump_unit__unit_is_using.unit_is_using pumpunit)) }

end

(* Module for declaring a program function (and possibly an axiom) for "unit_is_paid" defined at pump_unit.ads:37, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__unit_is_paid__axiom
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit
 use        Pump_unit__unit_is_paid

 val unit_is_paid #"pump_unit.ads" 37 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) : bool
  requires { true }
  ensures { (result = (Pump_unit__unit_is_paid.unit_is_paid pumpunit)) }

end

(* Module for declaring a program function (and possibly an axiom) for "get_pump_unit_state" defined at pump_unit.ads:38, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__get_pump_unit_state__axiom
 use import "_gnatprove_standard".Main
 use        Pump__state_type__axiom
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__get_pump_unit_state

 val get_pump_unit_state #"pump_unit.ads" 38 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) : int
  requires { true }
  ensures { ( (result = (Pump_unit__get_pump_unit_state.get_pump_unit_state pumpunit)) /\ (Pump__state_type__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_pump_unit_state__post_axiom :
  (forall pumpunit : Pump_unit__pump_unit.pump_unit [(Pump_unit__get_pump_unit_state.get_pump_unit_state pumpunit)].
   ( (Pump_unit__pump_unit__axiom.dynamic_invariant pumpunit True True True) -> (let result = (Pump_unit__get_pump_unit_state.get_pump_unit_state pumpunit) in (
    (Pump__state_type__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "get_pump_nozzle_state" defined at pump_unit.ads:39, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__get_pump_nozzle_state__axiom
 use import "_gnatprove_standard".Main
 use        Pump__nozzle_type__axiom
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__get_pump_nozzle_state

 val get_pump_nozzle_state #"pump_unit.ads" 39 0 0# 
   (pumpunit : Pump_unit__pump_unit.pump_unit) : int
  requires { true }
  ensures { ( (result = (Pump_unit__get_pump_nozzle_state.get_pump_nozzle_state pumpunit)) /\ (Pump__nozzle_type__axiom.dynamic_invariant result True False True) ) }
 
 axiom get_pump_nozzle_state__post_axiom :
  (forall pumpunit : Pump_unit__pump_unit.pump_unit [(Pump_unit__get_pump_nozzle_state.get_pump_nozzle_state pumpunit)].
   ( (Pump_unit__pump_unit__axiom.dynamic_invariant pumpunit True True True) -> (let result = (Pump_unit__get_pump_nozzle_state.get_pump_nozzle_state pumpunit) in (
    (Pump__nozzle_type__axiom.dynamic_invariant result True False True)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "set_is_using" defined at pump_unit.ads:43, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__set_is_using__axiom
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom

 val set_is_using #"pump_unit.ads" 43 0 0# 
   (pumpunit__split_fields : Pump_unit__pump_unit.__split_fields__ref) : unit
  requires { true }
  ensures { (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True True True) }
  writes {pumpunit__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "set_is_paid" defined at pump_unit.ads:44, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__set_is_paid__axiom
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom

 val set_is_paid #"pump_unit.ads" 44 0 0# 
   (pumpunit__split_fields : Pump_unit__pump_unit.__split_fields__ref) : unit
  requires { true }
  ensures { (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True True True) }
  writes {pumpunit__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "set_to_pay" defined at pump_unit.ads:45, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__set_to_pay__axiom
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom

 val set_to_pay #"pump_unit.ads" 45 0 0# 
   (pumpunit__split_fields : Pump_unit__pump_unit.__split_fields__ref) (amount : real) : unit
  requires { true }
  ensures { (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True True True) }
  writes {pumpunit__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "set_unit_id" defined at pump_unit.ads:46, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__set_unit_id__axiom
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Array__Int__Standard__character

 val set_unit_id #"pump_unit.ads" 46 0 0# 
   (pumpunit__split_fields : Pump_unit__pump_unit.__split_fields__ref) (id : Array__Int__Standard__character.map) : unit
  requires { true }
  ensures { (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True True True) }
  writes {pumpunit__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "set_pumped" defined at pump_unit.ads:47, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__set_pumped__axiom
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom

 val set_pumped #"pump_unit.ads" 47 0 0# 
   (pumpunit__split_fields : Pump_unit__pump_unit.__split_fields__ref) (amount : real) : unit
  requires { true }
  ensures { (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True True True) }
  writes {pumpunit__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "set_pump_active_state" defined at pump_unit.ads:48, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__set_pump_active_state__axiom
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom

 val set_pump_active_state #"pump_unit.ads" 48 0 0# 
   (pumpunit__split_fields : Pump_unit__pump_unit.__split_fields__ref) (fueltype : int) (statetype : int) : unit
  requires { true }
  ensures { (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True True True) }
  writes {pumpunit__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "set_pump_nozzle_state" defined at pump_unit.ads:49, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__set_pump_nozzle_state__axiom
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom

 val set_pump_nozzle_state #"pump_unit.ads" 49 0 0# 
   (pumpunit__split_fields : Pump_unit__pump_unit.__split_fields__ref) (fueltype : int) (nozzletype : int) : unit
  requires { true }
  ensures { (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True True True) }
  writes {pumpunit__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "add_pump" defined at pump_unit.ads:51, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__add_pump__axiom
 use import "_gnatprove_standard".Main
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom

 val add_pump #"pump_unit.ads" 51 0 0# 
   (pumpunit__split_fields : Pump_unit__pump_unit.__split_fields__ref) (pump_r__split_fields : Pump__pump.__split_fields__ref) (fueltype : int) : unit
  requires { true }
  ensures { ( (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True True True) /\ (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content } True True True) ) }
  writes {pumpunit__split_fields, pump_r__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "left_nozzle" defined at pump_unit.ads:53, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__left_nozzle__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__state_type
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__get_state
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom

 val left_nozzle #"pump_unit.ads" 53 0 0# 
   (pumpunit__split_fields : Pump_unit__pump_unit.__split_fields__ref) (pump_r__split_fields : Pump__pump.__split_fields__ref) (fueltype : int) : unit
  requires { ( ((Pump__get_state.get_state { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content }) = 0) \/ ((Pump__get_state.get_state { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content }) = 3) ) }
  ensures { ( ((Pump__state_type.to_rep (Pump_unit__pump_unit.rec__pump_active_state (Pump_unit__pump_unit.__split_fields { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content }))) = 1) /\ ( (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True True True) /\ (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content } True True True) ) ) }
  writes {pumpunit__split_fields, pump_r__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "return_nozzle" defined at pump_unit.ads:58, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__return_nozzle__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__state_type
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__get_state
 use        Pump__get_current_nozzle_state
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom

 val return_nozzle #"pump_unit.ads" 58 0 0# 
   (pumpunit__split_fields : Pump_unit__pump_unit.__split_fields__ref) (pump_r__split_fields : Pump__pump.__split_fields__ref) : unit
  requires { ( ( ((Pump__get_state.get_state { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content }) = 1) \/ ((Pump__get_state.get_state { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content }) = 3) ) /\ ((Pump__get_current_nozzle_state.get_current_nozzle_state { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content }) = 5) ) }
  ensures { ( ( ((Pump__state_type.to_rep (Pump_unit__pump_unit.rec__pump_active_state (Pump_unit__pump_unit.__split_fields { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content }))) = 3) \/ ((Pump__state_type.to_rep (Pump_unit__pump_unit.rec__pump_active_state (Pump_unit__pump_unit.__split_fields { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content }))) = 0) ) /\ ( (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True True True) /\ (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content } True True True) ) ) }
  writes {pumpunit__split_fields, pump_r__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "start_pumping" defined at pump_unit.ads:67, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__start_pumping__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__float_number
 use        Pump__float_number__axiom
 use        Pump__state_type
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__get_state
 use        Pump__get_current_nozzle_state
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom

 val start_pumping #"pump_unit.ads" 67 0 0# 
   (pumpunit__split_fields : Pump_unit__pump_unit.__split_fields__ref) (pump_r__split_fields : Pump__pump.__split_fields__ref) (amount : real) (car_tank_space : Pump__float_number.float_number__ref) : unit
  requires { ( ((Pump__get_state.get_state { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content }) = 1) /\ ((Pump__get_current_nozzle_state.get_current_nozzle_state { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content }) = 1) ) }
  ensures { ( ((Pump__state_type.to_rep (Pump_unit__pump_unit.rec__pump_active_state (Pump_unit__pump_unit.__split_fields { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content }))) = 1) /\ ( ( (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True True True) /\ (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content } True True True) ) /\ (Pump__float_number__axiom.dynamic_invariant car_tank_space.Pump__float_number.float_number__content True True True) ) ) }
  writes {pumpunit__split_fields, pump_r__split_fields, car_tank_space}

end

(* Module for declaring a program function (and possibly an axiom) for "stop_pumping" defined at pump_unit.ads:72, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump_unit__stop_pumping__axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__state_type
 use        Pump__nozzle_type
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__get_state
 use        Pump__get_current_nozzle_state
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom

 val stop_pumping #"pump_unit.ads" 72 0 0# 
   (pumpunit__split_fields : Pump_unit__pump_unit.__split_fields__ref) (pump_r__split_fields : Pump__pump.__split_fields__ref) : unit
  requires { ( ((Pump__get_state.get_state { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content }) = 2) /\ ((Pump__get_current_nozzle_state.get_current_nozzle_state { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content }) = 3) ) }
  ensures { ( ( ((Pump__nozzle_type.to_rep (Pump_unit__pump_unit.rec__pump_nozzle_state (Pump_unit__pump_unit.__split_fields { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content }))) = 4) /\ ((Pump__state_type.to_rep (Pump_unit__pump_unit.rec__pump_active_state (Pump_unit__pump_unit.__split_fields { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content }))) = 1) ) /\ ( (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True True True) /\ (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = pump_r__split_fields.Pump__pump.__split_fields__content } True True True) ) ) }
  writes {pumpunit__split_fields, pump_r__split_fields}

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "pump_unit" defined at pump_unit.ads:3, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Pump_unit__package_def
 use import "_gnatprove_standard".Main

 let def #"pump_unit.ads" 72 0 0# "GP_Subp:pump_unit.ads:3" "W:diverges:N" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( "GP_Sloc:pump_unit.adb:435:1" () )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_pump" defined at pump_unit.ads:30, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump_unit__get_pump__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__fuel_types__axiom
 use        Pump__pump
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__get_pump__pumpunit
 use        Pump_unit__get_pump__fueltype
 use        Standard__character__axiom
 use        Pump_unit__unit_id_type__axiom
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__get_pump__pumpunit__axiom
 use        Pump_unit__get_pump__fueltype__axiom
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom

 val pump_unit__get_pump__result #"pump_unit.ads" 72 0 0# "model_projected" "model_trace:4650@result"  : Pump__pump.pump__ref 
 
 let def #"pump.ads" 20 0 0# "W:diverges:N" "GP_Subp:pump_unit.ads:30" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump_unit.ads:30 *)
  ;
  #"pump_unit.ads" 14 0 0# assume { (Pump_unit__pump_unit__axiom.dynamic_invariant Pump_unit__get_pump__pumpunit.pumpunit True False True) };
  #"pump.ads" 7 0 0# assume { (Pump__fuel_types__axiom.dynamic_invariant Pump_unit__get_pump__fueltype.fueltype True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump_unit.ads:30 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump_unit.ads:30 *)
  ;
  #"pump_unit.ads" 30 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump_unit.ads:30 *)
  ;
  #"pump_unit.ads" 30 0 0# assume { true };
  () (* checking of pragma precondition pump_unit.ads:30 *)
  ;
  try
   ( ( "GP_Sloc:pump_unit.adb:92:7" (if ((Pump_unit__get_pump__fueltype.fueltype = 0)) then (
    ( "GP_Sloc:pump_unit.adb:93:20" ( #"pump_unit.adb" 93 0 0# pump_unit__get_pump__result.Pump__pump.pump__content <- ( (Pump_unit__pump_unit.rec__pump_91((Pump_unit__pump_unit.__split_fields(Pump_unit__get_pump__pumpunit.pumpunit)))) );
    #"pump_unit.adb" 93 0 0# raise Return__exc ) )) else if ((Pump_unit__get_pump__fueltype.fueltype = 1)) then (
    ( "GP_Sloc:pump_unit.adb:94:20" ( #"pump_unit.adb" 94 0 0# pump_unit__get_pump__result.Pump__pump.pump__content <- ( (Pump_unit__pump_unit.rec__pump_95((Pump_unit__pump_unit.__split_fields(Pump_unit__get_pump__pumpunit.pumpunit)))) );
    #"pump_unit.adb" 94 0 0# raise Return__exc ) ))  else if ((Pump_unit__get_pump__fueltype.fueltype = 2)) then (
    ( "GP_Sloc:pump_unit.adb:95:20" ( #"pump_unit.adb" 95 0 0# pump_unit__get_pump__result.Pump__pump.pump__content <- ( (Pump_unit__pump_unit.rec__pump_diesel((Pump_unit__pump_unit.__split_fields(Pump_unit__get_pump__pumpunit.pumpunit)))) );
    #"pump_unit.adb" 95 0 0# raise Return__exc ) )) else (
    ( "GP_Sloc:pump_unit.adb:96:25" ( #"pump_unit.adb" 96 0 0# pump_unit__get_pump__result.Pump__pump.pump__content <- ( (Pump_unit__pump_unit.rec__pump_91((Pump_unit__pump_unit.__split_fields(Pump_unit__get_pump__pumpunit.pumpunit)))) );
    #"pump_unit.adb" 96 0 0# raise Return__exc ) ))) );
   #"pump_unit.adb" 89 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump_unit.ads:30 *)
  ;
  #"pump_unit.adb" 89 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  pump_unit__get_pump__result.Pump__pump.pump__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_tanks_size" defined at pump_unit.ads:31, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump_unit__get_tanks_size__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Pump__float_number
 use        Pump__fuel_types__axiom
 use        Pump__pump
 use        Pump__get_tanks_size__axiom
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__get_tanks_size__pumpunit
 use        Pump_unit__get_tanks_size__fueltype
 use        Standard__character__axiom
 use        Pump_unit__unit_id_type__axiom
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__get_tanks_size__pumpunit__axiom
 use        Pump_unit__get_tanks_size__fueltype__axiom
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom
 use        Pump__get_tanks_size__axiom

 val pump_unit__get_tanks_size__result #"pump.ads" 20 0 0#  : Pump__float_number.float_number__ref 
 
 let def #"pump.ads" 6 0 0# "W:diverges:N" "GP_Subp:pump_unit.ads:31" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump_unit.ads:31 *)
  ;
  #"pump_unit.ads" 14 0 0# assume { (Pump_unit__pump_unit__axiom.dynamic_invariant Pump_unit__get_tanks_size__pumpunit.pumpunit True False True) };
  #"pump.ads" 7 0 0# assume { (Pump__fuel_types__axiom.dynamic_invariant Pump_unit__get_tanks_size__fueltype.fueltype True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump_unit.ads:31 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump_unit.ads:31 *)
  ;
  #"pump_unit.ads" 31 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump_unit.ads:31 *)
  ;
  #"pump_unit.ads" 31 0 0# assume { true };
  () (* checking of pragma precondition pump_unit.ads:31 *)
  ;
  try
   ( ( "GP_Sloc:pump_unit.adb:107:7" (if ((Pump_unit__get_tanks_size__fueltype.fueltype = 0)) then (
    ( "GP_Sloc:pump_unit.adb:108:20" ( #"pump_unit.adb" 108 0 0# pump_unit__get_tanks_size__result.Pump__float_number.float_number__content <- ( (Pump__get_tanks_size__axiom.get_tanks_size((Pump_unit__pump_unit.rec__pump_91((Pump_unit__pump_unit.__split_fields(Pump_unit__get_tanks_size__pumpunit.pumpunit)))))) );
    #"pump_unit.adb" 108 0 0# raise Return__exc ) )) else if ((Pump_unit__get_tanks_size__fueltype.fueltype = 1)) then (
    ( "GP_Sloc:pump_unit.adb:109:20" ( #"pump_unit.adb" 109 0 0# pump_unit__get_tanks_size__result.Pump__float_number.float_number__content <- ( (Pump__get_tanks_size__axiom.get_tanks_size((Pump_unit__pump_unit.rec__pump_95((Pump_unit__pump_unit.__split_fields(Pump_unit__get_tanks_size__pumpunit.pumpunit)))))) );
    #"pump_unit.adb" 109 0 0# raise Return__exc ) ))  else if ((Pump_unit__get_tanks_size__fueltype.fueltype = 2)) then (
    ( "GP_Sloc:pump_unit.adb:110:20" ( #"pump_unit.adb" 110 0 0# pump_unit__get_tanks_size__result.Pump__float_number.float_number__content <- ( (Pump__get_tanks_size__axiom.get_tanks_size((Pump_unit__pump_unit.rec__pump_diesel((Pump_unit__pump_unit.__split_fields(Pump_unit__get_tanks_size__pumpunit.pumpunit)))))) );
    #"pump_unit.adb" 110 0 0# raise Return__exc ) )) else (
    ( "GP_Sloc:pump_unit.adb:111:25" ( #"pump_unit.adb" 111 0 0# pump_unit__get_tanks_size__result.Pump__float_number.float_number__content <- ( (Pump__get_tanks_size__axiom.get_tanks_size((Pump_unit__pump_unit.rec__pump_91((Pump_unit__pump_unit.__split_fields(Pump_unit__get_tanks_size__pumpunit.pumpunit)))))) );
    #"pump_unit.adb" 111 0 0# raise Return__exc ) ))) );
   #"pump_unit.adb" 104 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump_unit.ads:31 *)
  ;
  #"pump_unit.adb" 104 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  pump_unit__get_tanks_size__result.Pump__float_number.float_number__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_id" defined at pump_unit.ads:32, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump_unit__get_id__subprogram_def
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__get_id__pumpunit
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Standard__character__axiom
 use        Pump_unit__unit_id_type__axiom
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__get_id__pumpunit__axiom
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom

 val pump_unit__get_id__result #"pump.ads" 6 0 0# "model_projected" "model_trace:4714@result"  : Array__Int__Standard__character.map__ref 
 
 let def #"pump_unit.ads" 8 0 0# "W:diverges:N" "GP_Subp:pump_unit.ads:32" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump_unit.ads:32 *)
  ;
  #"pump_unit.ads" 14 0 0# assume { (Pump_unit__pump_unit__axiom.dynamic_invariant Pump_unit__get_id__pumpunit.pumpunit True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump_unit.ads:32 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump_unit.ads:32 *)
  ;
  #"pump_unit.ads" 32 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump_unit.ads:32 *)
  ;
  #"pump_unit.ads" 32 0 0# assume { true };
  () (* checking of pragma precondition pump_unit.ads:32 *)
  ;
  try
   ( ( "GP_Sloc:pump_unit.adb:121:7" ( #"pump_unit.adb" 121 0 0# pump_unit__get_id__result.Array__Int__Standard__character.map__content <- ( (Pump_unit__pump_unit.rec__id((Pump_unit__pump_unit.__split_fields(Pump_unit__get_id__pumpunit.pumpunit)))) );
   #"pump_unit.adb" 121 0 0# raise Return__exc ) );
   #"pump_unit.adb" 118 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump_unit.ads:32 *)
  ;
  #"pump_unit.adb" 118 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  pump_unit__get_id__result.Array__Int__Standard__character.map__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_to_pay" defined at pump_unit.ads:33, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump_unit__get_to_pay__subprogram_def
 use import "_gnatprove_standard".Main
 use        Pump__float_number
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__get_to_pay__pumpunit
 use        Standard__character__axiom
 use        Pump_unit__unit_id_type__axiom
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__get_to_pay__pumpunit__axiom
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom

 val pump_unit__get_to_pay__result #"pump_unit.ads" 8 0 0#  : Pump__float_number.float_number__ref 
 
 let def #"pump.ads" 6 0 0# "W:diverges:N" "GP_Subp:pump_unit.ads:33" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump_unit.ads:33 *)
  ;
  #"pump_unit.ads" 14 0 0# assume { (Pump_unit__pump_unit__axiom.dynamic_invariant Pump_unit__get_to_pay__pumpunit.pumpunit True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump_unit.ads:33 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump_unit.ads:33 *)
  ;
  #"pump_unit.ads" 33 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump_unit.ads:33 *)
  ;
  #"pump_unit.ads" 33 0 0# assume { true };
  () (* checking of pragma precondition pump_unit.ads:33 *)
  ;
  try
   ( ( "GP_Sloc:pump_unit.adb:130:7" ( #"pump_unit.adb" 130 0 0# pump_unit__get_to_pay__result.Pump__float_number.float_number__content <- ( (Pump_unit__pump_unit.rec__to_pay((Pump_unit__pump_unit.__split_fields(Pump_unit__get_to_pay__pumpunit.pumpunit)))) );
   #"pump_unit.adb" 130 0 0# raise Return__exc ) );
   #"pump_unit.adb" 127 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump_unit.ads:33 *)
  ;
  #"pump_unit.adb" 127 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  pump_unit__get_to_pay__result.Pump__float_number.float_number__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_pumped" defined at pump_unit.ads:34, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump_unit__get_pumped__subprogram_def
 use import "_gnatprove_standard".Main
 use        Pump__float_number
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__get_pumped__pumpunit
 use        Standard__character__axiom
 use        Pump_unit__unit_id_type__axiom
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__get_pumped__pumpunit__axiom
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom

 val pump_unit__get_pumped__result #"pump.ads" 6 0 0#  : Pump__float_number.float_number__ref 
 
 let def #"pump.ads" 6 0 0# "W:diverges:N" "GP_Subp:pump_unit.ads:34" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump_unit.ads:34 *)
  ;
  #"pump_unit.ads" 14 0 0# assume { (Pump_unit__pump_unit__axiom.dynamic_invariant Pump_unit__get_pumped__pumpunit.pumpunit True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump_unit.ads:34 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump_unit.ads:34 *)
  ;
  #"pump_unit.ads" 34 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump_unit.ads:34 *)
  ;
  #"pump_unit.ads" 34 0 0# assume { true };
  () (* checking of pragma precondition pump_unit.ads:34 *)
  ;
  try
   ( ( "GP_Sloc:pump_unit.adb:139:7" ( #"pump_unit.adb" 139 0 0# pump_unit__get_pumped__result.Pump__float_number.float_number__content <- ( (Pump_unit__pump_unit.rec__pumped((Pump_unit__pump_unit.__split_fields(Pump_unit__get_pumped__pumpunit.pumpunit)))) );
   #"pump_unit.adb" 139 0 0# raise Return__exc ) );
   #"pump_unit.adb" 136 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump_unit.ads:34 *)
  ;
  #"pump_unit.adb" 136 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  pump_unit__get_pumped__result.Pump__float_number.float_number__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_fuel" defined at pump_unit.ads:35, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump_unit__get_fuel__subprogram_def
 use import "_gnatprove_standard".Main
 use        Pump__fuel_types
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__get_fuel__pumpunit
 use        Standard__character__axiom
 use        Pump_unit__unit_id_type__axiom
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__get_fuel__pumpunit__axiom
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom

 val pump_unit__get_fuel__result #"pump.ads" 6 0 0# "model" "model_trace:4775@result"  : int__ref 
 
 let def #"pump.ads" 7 0 0# "W:diverges:N" "GP_Subp:pump_unit.ads:35" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump_unit.ads:35 *)
  ;
  #"pump_unit.ads" 14 0 0# assume { (Pump_unit__pump_unit__axiom.dynamic_invariant Pump_unit__get_fuel__pumpunit.pumpunit True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump_unit.ads:35 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump_unit.ads:35 *)
  ;
  #"pump_unit.ads" 35 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump_unit.ads:35 *)
  ;
  #"pump_unit.ads" 35 0 0# assume { true };
  () (* checking of pragma precondition pump_unit.ads:35 *)
  ;
  try
   ( ( "GP_Sloc:pump_unit.adb:148:7" ( #"pump_unit.adb" 148 0 0# pump_unit__get_fuel__result.int__content <- ( (Pump__fuel_types.to_rep((Pump_unit__pump_unit.rec__pump_active_fuel((Pump_unit__pump_unit.__split_fields(Pump_unit__get_fuel__pumpunit.pumpunit)))))) );
   #"pump_unit.adb" 148 0 0# raise Return__exc ) );
   #"pump_unit.adb" 145 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump_unit.ads:35 *)
  ;
  #"pump_unit.adb" 145 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  pump_unit__get_fuel__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "unit_is_using" defined at pump_unit.ads:36, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump_unit__unit_is_using__subprogram_def
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__unit_is_using__pumpunit
 use        Standard__character__axiom
 use        Pump_unit__unit_id_type__axiom
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__unit_is_using__pumpunit__axiom
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom

 val pump_unit__unit_is_using__result #"pump.ads" 7 0 0# "model" "model_trace:4796@result"  : bool__ref 
 
 let def #"pump.ads" 7 0 0# "W:diverges:N" "GP_Subp:pump_unit.ads:36" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump_unit.ads:36 *)
  ;
  #"pump_unit.ads" 14 0 0# assume { (Pump_unit__pump_unit__axiom.dynamic_invariant Pump_unit__unit_is_using__pumpunit.pumpunit True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump_unit.ads:36 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump_unit.ads:36 *)
  ;
  #"pump_unit.ads" 36 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump_unit.ads:36 *)
  ;
  #"pump_unit.ads" 36 0 0# assume { true };
  () (* checking of pragma precondition pump_unit.ads:36 *)
  ;
  try
   ( ( "GP_Sloc:pump_unit.adb:236:7" ( #"pump_unit.adb" 236 0 0# pump_unit__unit_is_using__result.bool__content <- ( (Pump_unit__pump_unit.rec__is_using((Pump_unit__pump_unit.__split_fields(Pump_unit__unit_is_using__pumpunit.pumpunit)))) );
   #"pump_unit.adb" 236 0 0# raise Return__exc ) );
   #"pump_unit.adb" 233 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump_unit.ads:36 *)
  ;
  #"pump_unit.adb" 233 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  pump_unit__unit_is_using__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "unit_is_paid" defined at pump_unit.ads:37, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump_unit__unit_is_paid__subprogram_def
 use import "_gnatprove_standard".Main
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__unit_is_paid__pumpunit
 use        Standard__character__axiom
 use        Pump_unit__unit_id_type__axiom
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__unit_is_paid__pumpunit__axiom
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom

 val pump_unit__unit_is_paid__result #"pump_unit.adb" 233 0 0# "model" "model_trace:4815@result"  : bool__ref 
 
 let def #"pump_unit.adb" 233 0 0# "W:diverges:N" "GP_Subp:pump_unit.ads:37" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump_unit.ads:37 *)
  ;
  #"pump_unit.ads" 14 0 0# assume { (Pump_unit__pump_unit__axiom.dynamic_invariant Pump_unit__unit_is_paid__pumpunit.pumpunit True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump_unit.ads:37 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump_unit.ads:37 *)
  ;
  #"pump_unit.ads" 37 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump_unit.ads:37 *)
  ;
  #"pump_unit.ads" 37 0 0# assume { true };
  () (* checking of pragma precondition pump_unit.ads:37 *)
  ;
  try
   ( ( "GP_Sloc:pump_unit.adb:245:7" ( #"pump_unit.adb" 245 0 0# pump_unit__unit_is_paid__result.bool__content <- ( (Pump_unit__pump_unit.rec__is_paid((Pump_unit__pump_unit.__split_fields(Pump_unit__unit_is_paid__pumpunit.pumpunit)))) );
   #"pump_unit.adb" 245 0 0# raise Return__exc ) );
   #"pump_unit.adb" 242 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump_unit.ads:37 *)
  ;
  #"pump_unit.adb" 242 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  pump_unit__unit_is_paid__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_pump_unit_state" defined at pump_unit.ads:38, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump_unit__get_pump_unit_state__subprogram_def
 use import "_gnatprove_standard".Main
 use        Pump__state_type
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__get_pump_unit_state__pumpunit
 use        Standard__character__axiom
 use        Pump_unit__unit_id_type__axiom
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__get_pump_unit_state__pumpunit__axiom
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom

 val pump_unit__get_pump_unit_state__result #"pump_unit.adb" 242 0 0# "model" "model_trace:4834@result"  : int__ref 
 
 let def #"pump.ads" 10 0 0# "W:diverges:N" "GP_Subp:pump_unit.ads:38" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump_unit.ads:38 *)
  ;
  #"pump_unit.ads" 14 0 0# assume { (Pump_unit__pump_unit__axiom.dynamic_invariant Pump_unit__get_pump_unit_state__pumpunit.pumpunit True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump_unit.ads:38 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump_unit.ads:38 *)
  ;
  #"pump_unit.ads" 38 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump_unit.ads:38 *)
  ;
  #"pump_unit.ads" 38 0 0# assume { true };
  () (* checking of pragma precondition pump_unit.ads:38 *)
  ;
  try
   ( ( "GP_Sloc:pump_unit.adb:254:7" ( #"pump_unit.adb" 254 0 0# pump_unit__get_pump_unit_state__result.int__content <- ( (Pump__state_type.to_rep((Pump_unit__pump_unit.rec__pump_active_state((Pump_unit__pump_unit.__split_fields(Pump_unit__get_pump_unit_state__pumpunit.pumpunit)))))) );
   #"pump_unit.adb" 254 0 0# raise Return__exc ) );
   #"pump_unit.adb" 251 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump_unit.ads:38 *)
  ;
  #"pump_unit.adb" 251 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  pump_unit__get_pump_unit_state__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_pump_nozzle_state" defined at pump_unit.ads:39, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump_unit__get_pump_nozzle_state__subprogram_def
 use import "_gnatprove_standard".Main
 use        Pump__nozzle_type
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__get_pump_nozzle_state__pumpunit
 use        Standard__character__axiom
 use        Pump_unit__unit_id_type__axiom
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__get_pump_nozzle_state__pumpunit__axiom
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom

 val pump_unit__get_pump_nozzle_state__result #"pump.ads" 10 0 0# "model" "model_trace:4855@result"  : int__ref 
 
 let def #"pump.ads" 11 0 0# "W:diverges:N" "GP_Subp:pump_unit.ads:39" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump_unit.ads:39 *)
  ;
  #"pump_unit.ads" 14 0 0# assume { (Pump_unit__pump_unit__axiom.dynamic_invariant Pump_unit__get_pump_nozzle_state__pumpunit.pumpunit True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump_unit.ads:39 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump_unit.ads:39 *)
  ;
  #"pump_unit.ads" 39 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump_unit.ads:39 *)
  ;
  #"pump_unit.ads" 39 0 0# assume { true };
  () (* checking of pragma precondition pump_unit.ads:39 *)
  ;
  try
   ( ( "GP_Sloc:pump_unit.adb:263:7" ( #"pump_unit.adb" 263 0 0# pump_unit__get_pump_nozzle_state__result.int__content <- ( (Pump__nozzle_type.to_rep((Pump_unit__pump_unit.rec__pump_nozzle_state((Pump_unit__pump_unit.__split_fields(Pump_unit__get_pump_nozzle_state__pumpunit.pumpunit)))))) );
   #"pump_unit.adb" 263 0 0# raise Return__exc ) );
   #"pump_unit.adb" 260 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump_unit.ads:39 *)
  ;
  #"pump_unit.adb" 260 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  pump_unit__get_pump_nozzle_state__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "set_is_using" defined at pump_unit.ads:43, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump_unit__set_is_using__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__string
 use        Pump__state_type__axiom
 use        Pump__pump
 use        Pump__get_state__axiom
 use        Sprint__print__axiom
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__set_is_using__pumpunit
 use        Pump_unit__set_is_using__basestatetype
 use        Temp___342
 use        Standard__positive__axiom
 use        Standard__character__axiom
 use        Standard__string__axiom
 use        Standard__integer__axiom
 use        Pump_unit__set_is_using__basestatetype__axiom
 use        Pump_unit__unit_id_type__axiom
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__set_is_using__pumpunit__axiom
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom
 use        Pump__get_state__axiom
 use        Sprint__print__axiom

 let def #"pump.ads" 11 0 0# "W:diverges:N" "GP_Subp:pump_unit.ads:43" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump_unit.ads:43 *)
  ;
  #"pump_unit.ads" 14 0 0# assume { (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = Pump_unit__set_is_using__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump_unit.ads:43 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump_unit.ads:43 *)
  ;
  #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump_unit.ads:43 *)
  ;
  #"pump_unit.ads" 14 0 0# assume { true };
  () (* checking of pragma precondition pump_unit.ads:43 *)
  ;
  try
   ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = () in (
    ()))
    end ;
   #"pump_unit.adb" 155 0 0# assume { (Pump__state_type__axiom.default_initial_assumption Pump_unit__set_is_using__basestatetype.basestatetype.int__content False) };
   #"pump.ads" 10 0 0# assume { (Pump__state_type__axiom.dynamic_invariant Pump_unit__set_is_using__basestatetype.basestatetype.int__content False False True) };
   ( "GP_Sloc:pump_unit.adb:158:20" #"pump_unit.adb" 158 0 0# Pump_unit__set_is_using__basestatetype.basestatetype.int__content <- ( 0 ) );
   ( "GP_Sloc:pump_unit.adb:159:7" (if ((Boolean.andb((Boolean.andb(((Pump__get_state__axiom.get_state((Pump_unit__pump_unit.rec__pump_91((Pump_unit__pump_unit.__split_fields({ Pump_unit__pump_unit.__split_fields = Pump_unit__set_is_using__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })))))) = Pump_unit__set_is_using__basestatetype.basestatetype.int__content)) (((Pump__get_state__axiom.get_state((Pump_unit__pump_unit.rec__pump_95((Pump_unit__pump_unit.__split_fields({ Pump_unit__pump_unit.__split_fields = Pump_unit__set_is_using__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })))))) = Pump_unit__set_is_using__basestatetype.basestatetype.int__content)))) (((Pump__get_state__axiom.get_state((Pump_unit__pump_unit.rec__pump_diesel((Pump_unit__pump_unit.__split_fields({ Pump_unit__pump_unit.__split_fields = Pump_unit__set_is_using__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })))))) = Pump_unit__set_is_using__basestatetype.basestatetype.int__content)))) then (
    ( ( "GP_Sloc:pump_unit.adb:160:28" (let temp___341 = (let temp___340 = { Pump_unit__pump_unit.__split_fields = Pump_unit__set_is_using__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
     ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__is_using((Pump_unit__pump_unit.__split_fields(temp___340)))) in (
      ()))
      end ;
     { ( temp___340 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___340)) ) with Pump_unit__pump_unit.rec__is_using = (Boolean.of_int(0)) } } )))
     in (
     #"pump_unit.adb" 160 0 0# Pump_unit__set_is_using__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___341)) )))
     );
    ( "GP_Sloc:pump_unit.adb:161:10" (Sprint__print__axiom.print((Standard__string.of_array(Temp___342.temp___342) (1) (39)))) ) )) else (
    ())) );
   #"pump_unit.adb" 152 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump_unit.ads:43 *)
  ;
  #"pump_unit.adb" 152 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "set_is_paid" defined at pump_unit.ads:44, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump_unit__set_is_paid__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__string
 use        Pump__state_type__axiom
 use        Pump__pump
 use        Pump__get_state__axiom
 use        Sprint__print__axiom
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__set_is_paid__pumpunit
 use        Pump_unit__set_is_paid__basestatetype
 use        Temp___345
 use        Standard__positive__axiom
 use        Standard__character__axiom
 use        Standard__string__axiom
 use        Standard__integer__axiom
 use        Pump_unit__set_is_paid__basestatetype__axiom
 use        Pump_unit__unit_id_type__axiom
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__set_is_paid__pumpunit__axiom
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom
 use        Pump__get_state__axiom
 use        Sprint__print__axiom

 let def #"pump_unit.adb" 152 0 0# "W:diverges:N" "GP_Subp:pump_unit.ads:44" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump_unit.ads:44 *)
  ;
  #"pump_unit.ads" 14 0 0# assume { (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = Pump_unit__set_is_paid__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump_unit.ads:44 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump_unit.ads:44 *)
  ;
  #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump_unit.ads:44 *)
  ;
  #"pump_unit.ads" 14 0 0# assume { true };
  () (* checking of pragma precondition pump_unit.ads:44 *)
  ;
  try
   ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = () in (
    ()))
    end ;
   #"pump_unit.adb" 170 0 0# assume { (Pump__state_type__axiom.default_initial_assumption Pump_unit__set_is_paid__basestatetype.basestatetype.int__content False) };
   #"pump.ads" 10 0 0# assume { (Pump__state_type__axiom.dynamic_invariant Pump_unit__set_is_paid__basestatetype.basestatetype.int__content False False True) };
   ( "GP_Sloc:pump_unit.adb:172:7" (if (((Boolean.to_int((Pump_unit__pump_unit.rec__is_paid((Pump_unit__pump_unit.__split_fields({ Pump_unit__pump_unit.__split_fields = Pump_unit__set_is_paid__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })))))) = (Boolean.to_int((Boolean.of_int(0)))))) then (
    ( ( "GP_Sloc:pump_unit.adb:173:23" #"pump_unit.adb" 173 0 0# Pump_unit__set_is_paid__basestatetype.basestatetype.int__content <- ( 0 ) );
    ( "GP_Sloc:pump_unit.adb:174:10" (if ((Boolean.andb((Boolean.andb(((Pump__get_state__axiom.get_state((Pump_unit__pump_unit.rec__pump_91((Pump_unit__pump_unit.__split_fields({ Pump_unit__pump_unit.__split_fields = Pump_unit__set_is_paid__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })))))) = Pump_unit__set_is_paid__basestatetype.basestatetype.int__content)) (((Pump__get_state__axiom.get_state((Pump_unit__pump_unit.rec__pump_95((Pump_unit__pump_unit.__split_fields({ Pump_unit__pump_unit.__split_fields = Pump_unit__set_is_paid__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })))))) = Pump_unit__set_is_paid__basestatetype.basestatetype.int__content)))) (((Pump__get_state__axiom.get_state((Pump_unit__pump_unit.rec__pump_diesel((Pump_unit__pump_unit.__split_fields({ Pump_unit__pump_unit.__split_fields = Pump_unit__set_is_paid__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })))))) = Pump_unit__set_is_paid__basestatetype.basestatetype.int__content)))) then (
     ( ( "GP_Sloc:pump_unit.adb:175:30" (let temp___344 = (let temp___343 = { Pump_unit__pump_unit.__split_fields = Pump_unit__set_is_paid__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
      ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__is_paid((Pump_unit__pump_unit.__split_fields(temp___343)))) in (
       ()))
       end ;
      { ( temp___343 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___343)) ) with Pump_unit__pump_unit.rec__is_paid = (Boolean.of_int(1)) } } )))
      in (
      #"pump_unit.adb" 175 0 0# Pump_unit__set_is_paid__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___344)) )))
      );
     ( "GP_Sloc:pump_unit.adb:176:13" (Sprint__print__axiom.print((Standard__string.of_array(Temp___345.temp___345) (1) (38)))) ) )) else (
     ())) ) )) else (
    ())) );
   #"pump_unit.adb" 167 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump_unit.ads:44 *)
  ;
  #"pump_unit.adb" 167 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "set_to_pay" defined at pump_unit.ads:45, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump_unit__set_to_pay__subprogram_def
 use import "_gnatprove_standard".Main
 use        Pump__float_number
 use        Pump__float_number__axiom
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__set_to_pay__pumpunit
 use        Pump_unit__set_to_pay__amount
 use        Standard__character__axiom
 use        Pump_unit__unit_id_type__axiom
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__set_to_pay__pumpunit__axiom
 use        Pump_unit__set_to_pay__amount__axiom
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom

 let def #"pump_unit.adb" 167 0 0# "W:diverges:N" "GP_Subp:pump_unit.ads:45" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump_unit.ads:45 *)
  ;
  #"pump_unit.ads" 14 0 0# assume { (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = Pump_unit__set_to_pay__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True False True) };
  #"pump.ads" 6 0 0# assume { (Pump__float_number__axiom.dynamic_invariant Pump_unit__set_to_pay__amount.amount True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump_unit.ads:45 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump_unit.ads:45 *)
  ;
  #"pump_unit.ads" 45 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump_unit.ads:45 *)
  ;
  #"pump_unit.ads" 45 0 0# assume { true };
  () (* checking of pragma precondition pump_unit.ads:45 *)
  ;
  try
   ( ( "GP_Sloc:pump_unit.adb:83:23" (let temp___347 = (let temp___346 = { Pump_unit__pump_unit.__split_fields = Pump_unit__set_to_pay__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
    ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__to_pay((Pump_unit__pump_unit.__split_fields(temp___346)))) in (
     ()))
     end ;
    { ( temp___346 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___346)) ) with Pump_unit__pump_unit.rec__to_pay = Pump_unit__set_to_pay__amount.amount } } )))
    in (
    #"pump_unit.adb" 83 0 0# Pump_unit__set_to_pay__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___347)) )))
    );
   #"pump_unit.adb" 80 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump_unit.ads:45 *)
  ;
  #"pump_unit.adb" 80 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "set_unit_id" defined at pump_unit.ads:46, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump_unit__set_unit_id__subprogram_def
 use import "_gnatprove_standard".Main
 use        Pump_unit__unit_id_type__axiom
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__set_unit_id__pumpunit
 use        Pump_unit__set_unit_id__id
 use        Array__Int__Standard__character
 use        Standard__character__axiom
 use        Pump_unit__unit_id_type__axiom
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__set_unit_id__pumpunit__axiom
 use        Pump_unit__set_unit_id__id__axiom
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom

 let def #"pump_unit.adb" 80 0 0# "W:diverges:N" "GP_Subp:pump_unit.ads:46" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump_unit.ads:46 *)
  ;
  #"pump_unit.ads" 14 0 0# assume { (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = Pump_unit__set_unit_id__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True False True) };
  #"pump_unit.ads" 8 0 0# assume { (Pump_unit__unit_id_type__axiom.dynamic_invariant Pump_unit__set_unit_id__id.id True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump_unit.ads:46 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump_unit.ads:46 *)
  ;
  #"pump_unit.ads" 46 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump_unit.ads:46 *)
  ;
  #"pump_unit.ads" 46 0 0# assume { true };
  () (* checking of pragma precondition pump_unit.ads:46 *)
  ;
  try
   ( ( "GP_Sloc:pump_unit.adb:187:19" (let temp___349 = (let temp___348 = { Pump_unit__pump_unit.__split_fields = Pump_unit__set_unit_id__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
    ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__id((Pump_unit__pump_unit.__split_fields(temp___348)))) in (
     ()))
     end ;
    { ( temp___348 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___348)) ) with Pump_unit__pump_unit.rec__id = Pump_unit__set_unit_id__id.id } } )))
    in (
    #"pump_unit.adb" 187 0 0# Pump_unit__set_unit_id__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___349)) )))
    );
   #"pump_unit.adb" 184 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump_unit.ads:46 *)
  ;
  #"pump_unit.adb" 184 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "set_pumped" defined at pump_unit.ads:47, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump_unit__set_pumped__subprogram_def
 use import "_gnatprove_standard".Main
 use        Pump__float_number
 use        Pump__float_number__axiom
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__set_pumped__pumpunit
 use        Pump_unit__set_pumped__amount
 use        Standard__character__axiom
 use        Pump_unit__unit_id_type__axiom
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__set_pumped__pumpunit__axiom
 use        Pump_unit__set_pumped__amount__axiom
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom

 let def #"pump_unit.adb" 184 0 0# "W:diverges:N" "GP_Subp:pump_unit.ads:47" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump_unit.ads:47 *)
  ;
  #"pump_unit.ads" 14 0 0# assume { (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = Pump_unit__set_pumped__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True False True) };
  #"pump.ads" 6 0 0# assume { (Pump__float_number__axiom.dynamic_invariant Pump_unit__set_pumped__amount.amount True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump_unit.ads:47 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump_unit.ads:47 *)
  ;
  #"pump_unit.ads" 47 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump_unit.ads:47 *)
  ;
  #"pump_unit.ads" 47 0 0# assume { true };
  () (* checking of pragma precondition pump_unit.ads:47 *)
  ;
  try
   ( ( "GP_Sloc:pump_unit.adb:74:23" (let temp___351 = (let temp___350 = { Pump_unit__pump_unit.__split_fields = Pump_unit__set_pumped__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
    ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pumped((Pump_unit__pump_unit.__split_fields(temp___350)))) in (
     ()))
     end ;
    { ( temp___350 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___350)) ) with Pump_unit__pump_unit.rec__pumped = Pump_unit__set_pumped__amount.amount } } )))
    in (
    #"pump_unit.adb" 74 0 0# Pump_unit__set_pumped__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___351)) )))
    );
   #"pump_unit.adb" 71 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump_unit.ads:47 *)
  ;
  #"pump_unit.adb" 71 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "set_pump_active_state" defined at pump_unit.ads:48, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump_unit__set_pump_active_state__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Pump__fuel_types
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__pump
 use        Pump__set_pump_state__axiom
 use        Sprint__print__axiom
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__set_pump_active_state__pumpunit
 use        Pump_unit__set_pump_active_state__fueltype
 use        Pump_unit__set_pump_active_state__statetype
 use        Temp___352
 use        Standard__positive__axiom
 use        Standard__character__axiom
 use        Standard__string__axiom
 use        Standard__integer__axiom
 use        Pump_unit__unit_id_type__axiom
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__set_pump_active_state__pumpunit__axiom
 use        Pump_unit__set_pump_active_state__fueltype__axiom
 use        Pump_unit__set_pump_active_state__statetype__axiom
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom
 use        Pump__set_pump_state__axiom
 use        Sprint__print__axiom

 let def #"pump_unit.adb" 71 0 0# "W:diverges:N" "GP_Subp:pump_unit.ads:48" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump_unit.ads:48 *)
  ;
  #"pump_unit.ads" 14 0 0# assume { (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = Pump_unit__set_pump_active_state__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True False True) };
  #"pump.ads" 7 0 0# assume { (Pump__fuel_types__axiom.dynamic_invariant Pump_unit__set_pump_active_state__fueltype.fueltype True False True) };
  #"pump.ads" 10 0 0# assume { (Pump__state_type__axiom.dynamic_invariant Pump_unit__set_pump_active_state__statetype.statetype True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump_unit.ads:48 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump_unit.ads:48 *)
  ;
  #"pump_unit.ads" 48 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump_unit.ads:48 *)
  ;
  #"pump_unit.ads" 48 0 0# assume { true };
  () (* checking of pragma precondition pump_unit.ads:48 *)
  ;
  try
   ( ( "GP_Sloc:pump_unit.adb:195:7" (if ((Pump_unit__set_pump_active_state__fueltype.fueltype = 0)) then (
    ( ( "GP_Sloc:pump_unit.adb:196:36" (let temp___362 = (let temp___361 = { Pump_unit__pump_unit.__split_fields = Pump_unit__set_pump_active_state__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
     ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_active_fuel((Pump_unit__pump_unit.__split_fields(temp___361)))) in (
      ()))
      end ;
     { ( temp___361 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___361)) ) with Pump_unit__pump_unit.rec__pump_active_fuel = (Pump__fuel_types.of_rep Pump_unit__set_pump_active_state__fueltype.fueltype) } } )))
     in (
     #"pump_unit.adb" 196 0 0# Pump_unit__set_pump_active_state__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___362)) )))
     );
    ( "GP_Sloc:pump_unit.adb:197:14" (let pump__set_pump_state__pump_r__compl = (Pump_unit__pump_unit.rec__pump_91((Pump_unit__pump_unit.__split_fields({ Pump_unit__pump_unit.__split_fields = Pump_unit__set_pump_active_state__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })))) in (
     #"pump_unit.ads" 14 0 0# let pump__set_pump_state__pump_r__fields = { Pump__pump.__split_fields__content = (Pump__pump.__split_fields(pump__set_pump_state__pump_r__compl)) } in 
      ( (Pump__set_pump_state__axiom.set_pump_state(pump__set_pump_state__pump_r__fields) (Pump_unit__set_pump_active_state__statetype.statetype));
      (let temp___364 = (let temp___363 = { Pump_unit__pump_unit.__split_fields = Pump_unit__set_pump_active_state__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
       ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_91((Pump_unit__pump_unit.__split_fields(temp___363)))) in (
        ()))
        end ;
       { ( temp___363 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___363)) ) with Pump_unit__pump_unit.rec__pump_91 = { Pump__pump.__split_fields = pump__set_pump_state__pump_r__fields.Pump__pump.__split_fields__content } } } )))
       in (
       #"pump_unit.adb" 197 0 0# Pump_unit__set_pump_active_state__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___364)) )))
       )))
     ) )) else (
    ( "GP_Sloc:pump_unit.adb:198:7" (if ((Pump_unit__set_pump_active_state__fueltype.fueltype = 1)) then (
     ( ( "GP_Sloc:pump_unit.adb:199:36" (let temp___358 = (let temp___357 = { Pump_unit__pump_unit.__split_fields = Pump_unit__set_pump_active_state__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
      ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_active_fuel((Pump_unit__pump_unit.__split_fields(temp___357)))) in (
       ()))
       end ;
      { ( temp___357 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___357)) ) with Pump_unit__pump_unit.rec__pump_active_fuel = (Pump__fuel_types.of_rep Pump_unit__set_pump_active_state__fueltype.fueltype) } } )))
      in (
      #"pump_unit.adb" 199 0 0# Pump_unit__set_pump_active_state__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___358)) )))
      );
     ( "GP_Sloc:pump_unit.adb:200:14" (let pump__set_pump_state__pump_r__compl = (Pump_unit__pump_unit.rec__pump_95((Pump_unit__pump_unit.__split_fields({ Pump_unit__pump_unit.__split_fields = Pump_unit__set_pump_active_state__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })))) in (
      #"pump_unit.ads" 14 0 0# let pump__set_pump_state__pump_r__fields = { Pump__pump.__split_fields__content = (Pump__pump.__split_fields(pump__set_pump_state__pump_r__compl)) } in 
       ( (Pump__set_pump_state__axiom.set_pump_state(pump__set_pump_state__pump_r__fields) (Pump_unit__set_pump_active_state__statetype.statetype));
       (let temp___360 = (let temp___359 = { Pump_unit__pump_unit.__split_fields = Pump_unit__set_pump_active_state__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
        ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_95((Pump_unit__pump_unit.__split_fields(temp___359)))) in (
         ()))
         end ;
        { ( temp___359 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___359)) ) with Pump_unit__pump_unit.rec__pump_95 = { Pump__pump.__split_fields = pump__set_pump_state__pump_r__fields.Pump__pump.__split_fields__content } } } )))
        in (
        #"pump_unit.adb" 200 0 0# Pump_unit__set_pump_active_state__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___360)) )))
        )))
      ) )) else (
     ( "GP_Sloc:pump_unit.adb:201:7" (if ((Pump_unit__set_pump_active_state__fueltype.fueltype = 2)) then (
      ( ( "GP_Sloc:pump_unit.adb:202:36" (let temp___354 = (let temp___353 = { Pump_unit__pump_unit.__split_fields = Pump_unit__set_pump_active_state__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
       ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_active_fuel((Pump_unit__pump_unit.__split_fields(temp___353)))) in (
        ()))
        end ;
       { ( temp___353 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___353)) ) with Pump_unit__pump_unit.rec__pump_active_fuel = (Pump__fuel_types.of_rep Pump_unit__set_pump_active_state__fueltype.fueltype) } } )))
       in (
       #"pump_unit.adb" 202 0 0# Pump_unit__set_pump_active_state__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___354)) )))
       );
      ( "GP_Sloc:pump_unit.adb:203:14" (let pump__set_pump_state__pump_r__compl = (Pump_unit__pump_unit.rec__pump_diesel((Pump_unit__pump_unit.__split_fields({ Pump_unit__pump_unit.__split_fields = Pump_unit__set_pump_active_state__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })))) in (
       #"pump_unit.ads" 14 0 0# let pump__set_pump_state__pump_r__fields = { Pump__pump.__split_fields__content = (Pump__pump.__split_fields(pump__set_pump_state__pump_r__compl)) } in 
        ( (Pump__set_pump_state__axiom.set_pump_state(pump__set_pump_state__pump_r__fields) (Pump_unit__set_pump_active_state__statetype.statetype));
        (let temp___356 = (let temp___355 = { Pump_unit__pump_unit.__split_fields = Pump_unit__set_pump_active_state__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
         ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_diesel((Pump_unit__pump_unit.__split_fields(temp___355)))) in (
          ()))
          end ;
         { ( temp___355 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___355)) ) with Pump_unit__pump_unit.rec__pump_diesel = { Pump__pump.__split_fields = pump__set_pump_state__pump_r__fields.Pump__pump.__split_fields__content } } } )))
         in (
         #"pump_unit.adb" 203 0 0# Pump_unit__set_pump_active_state__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___356)) )))
         )))
       ) )) else (
      ( "GP_Sloc:pump_unit.adb:205:10" (Sprint__print__axiom.print((Standard__string.of_array(Temp___352.temp___352) (1) (20)))) ))) ))) ))) );
   #"pump_unit.adb" 192 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump_unit.ads:48 *)
  ;
  #"pump_unit.adb" 192 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "set_pump_nozzle_state" defined at pump_unit.ads:49, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump_unit__set_pump_nozzle_state__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Pump__fuel_types__axiom
 use        Pump__nozzle_type
 use        Pump__nozzle_type__axiom
 use        Pump__pump
 use        Pump__set_pump_nozzle_state__axiom
 use        Sprint__print__axiom
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__set_pump_nozzle_state__pumpunit
 use        Pump_unit__set_pump_nozzle_state__fueltype
 use        Pump_unit__set_pump_nozzle_state__nozzletype
 use        Temp___365
 use        Standard__positive__axiom
 use        Standard__character__axiom
 use        Standard__string__axiom
 use        Standard__integer__axiom
 use        Pump_unit__unit_id_type__axiom
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__set_pump_nozzle_state__pumpunit__axiom
 use        Pump_unit__set_pump_nozzle_state__fueltype__axiom
 use        Pump_unit__set_pump_nozzle_state__nozzletype__axiom
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom
 use        Pump__set_pump_nozzle_state__axiom
 use        Sprint__print__axiom

 let def #"pump_unit.adb" 192 0 0# "W:diverges:N" "GP_Subp:pump_unit.ads:49" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump_unit.ads:49 *)
  ;
  #"pump_unit.ads" 14 0 0# assume { (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = Pump_unit__set_pump_nozzle_state__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True False True) };
  #"pump.ads" 7 0 0# assume { (Pump__fuel_types__axiom.dynamic_invariant Pump_unit__set_pump_nozzle_state__fueltype.fueltype True False True) };
  #"pump.ads" 11 0 0# assume { (Pump__nozzle_type__axiom.dynamic_invariant Pump_unit__set_pump_nozzle_state__nozzletype.nozzletype True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump_unit.ads:49 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump_unit.ads:49 *)
  ;
  #"pump_unit.ads" 49 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump_unit.ads:49 *)
  ;
  #"pump_unit.ads" 49 0 0# assume { true };
  () (* checking of pragma precondition pump_unit.ads:49 *)
  ;
  try
   ( ( "GP_Sloc:pump_unit.adb:215:7" (if ((Pump_unit__set_pump_nozzle_state__fueltype.fueltype = 0)) then (
    ( ( "GP_Sloc:pump_unit.adb:216:14" (let pump__set_pump_nozzle_state__pump_r__compl = (Pump_unit__pump_unit.rec__pump_91((Pump_unit__pump_unit.__split_fields({ Pump_unit__pump_unit.__split_fields = Pump_unit__set_pump_nozzle_state__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })))) in (
     #"pump_unit.ads" 14 0 0# let pump__set_pump_nozzle_state__pump_r__fields = { Pump__pump.__split_fields__content = (Pump__pump.__split_fields(pump__set_pump_nozzle_state__pump_r__compl)) } in 
      ( (Pump__set_pump_nozzle_state__axiom.set_pump_nozzle_state(pump__set_pump_nozzle_state__pump_r__fields) (Pump_unit__set_pump_nozzle_state__nozzletype.nozzletype));
      (let temp___375 = (let temp___374 = { Pump_unit__pump_unit.__split_fields = Pump_unit__set_pump_nozzle_state__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
       ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_91((Pump_unit__pump_unit.__split_fields(temp___374)))) in (
        ()))
        end ;
       { ( temp___374 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___374)) ) with Pump_unit__pump_unit.rec__pump_91 = { Pump__pump.__split_fields = pump__set_pump_nozzle_state__pump_r__fields.Pump__pump.__split_fields__content } } } )))
       in (
       #"pump_unit.adb" 216 0 0# Pump_unit__set_pump_nozzle_state__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___375)) )))
       )))
     );
    ( "GP_Sloc:pump_unit.adb:217:37" (let temp___377 = (let temp___376 = { Pump_unit__pump_unit.__split_fields = Pump_unit__set_pump_nozzle_state__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
     ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_nozzle_state((Pump_unit__pump_unit.__split_fields(temp___376)))) in (
      ()))
      end ;
     { ( temp___376 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___376)) ) with Pump_unit__pump_unit.rec__pump_nozzle_state = (Pump__nozzle_type.of_rep Pump_unit__set_pump_nozzle_state__nozzletype.nozzletype) } } )))
     in (
     #"pump_unit.adb" 217 0 0# Pump_unit__set_pump_nozzle_state__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___377)) )))
     ) )) else (
    ( "GP_Sloc:pump_unit.adb:218:7" (if ((Pump_unit__set_pump_nozzle_state__fueltype.fueltype = 1)) then (
     ( ( "GP_Sloc:pump_unit.adb:219:14" (let pump__set_pump_nozzle_state__pump_r__compl = (Pump_unit__pump_unit.rec__pump_95((Pump_unit__pump_unit.__split_fields({ Pump_unit__pump_unit.__split_fields = Pump_unit__set_pump_nozzle_state__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })))) in (
      #"pump_unit.ads" 14 0 0# let pump__set_pump_nozzle_state__pump_r__fields = { Pump__pump.__split_fields__content = (Pump__pump.__split_fields(pump__set_pump_nozzle_state__pump_r__compl)) } in 
       ( (Pump__set_pump_nozzle_state__axiom.set_pump_nozzle_state(pump__set_pump_nozzle_state__pump_r__fields) (Pump_unit__set_pump_nozzle_state__nozzletype.nozzletype));
       (let temp___371 = (let temp___370 = { Pump_unit__pump_unit.__split_fields = Pump_unit__set_pump_nozzle_state__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
        ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_95((Pump_unit__pump_unit.__split_fields(temp___370)))) in (
         ()))
         end ;
        { ( temp___370 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___370)) ) with Pump_unit__pump_unit.rec__pump_95 = { Pump__pump.__split_fields = pump__set_pump_nozzle_state__pump_r__fields.Pump__pump.__split_fields__content } } } )))
        in (
        #"pump_unit.adb" 219 0 0# Pump_unit__set_pump_nozzle_state__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___371)) )))
        )))
      );
     ( "GP_Sloc:pump_unit.adb:220:37" (let temp___373 = (let temp___372 = { Pump_unit__pump_unit.__split_fields = Pump_unit__set_pump_nozzle_state__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
      ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_nozzle_state((Pump_unit__pump_unit.__split_fields(temp___372)))) in (
       ()))
       end ;
      { ( temp___372 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___372)) ) with Pump_unit__pump_unit.rec__pump_nozzle_state = (Pump__nozzle_type.of_rep Pump_unit__set_pump_nozzle_state__nozzletype.nozzletype) } } )))
      in (
      #"pump_unit.adb" 220 0 0# Pump_unit__set_pump_nozzle_state__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___373)) )))
      ) )) else (
     ( "GP_Sloc:pump_unit.adb:221:7" (if ((Pump_unit__set_pump_nozzle_state__fueltype.fueltype = 2)) then (
      ( ( "GP_Sloc:pump_unit.adb:222:14" (let pump__set_pump_nozzle_state__pump_r__compl = (Pump_unit__pump_unit.rec__pump_diesel((Pump_unit__pump_unit.__split_fields({ Pump_unit__pump_unit.__split_fields = Pump_unit__set_pump_nozzle_state__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })))) in (
       #"pump_unit.ads" 14 0 0# let pump__set_pump_nozzle_state__pump_r__fields = { Pump__pump.__split_fields__content = (Pump__pump.__split_fields(pump__set_pump_nozzle_state__pump_r__compl)) } in 
        ( (Pump__set_pump_nozzle_state__axiom.set_pump_nozzle_state(pump__set_pump_nozzle_state__pump_r__fields) (Pump_unit__set_pump_nozzle_state__nozzletype.nozzletype));
        (let temp___367 = (let temp___366 = { Pump_unit__pump_unit.__split_fields = Pump_unit__set_pump_nozzle_state__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
         ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_diesel((Pump_unit__pump_unit.__split_fields(temp___366)))) in (
          ()))
          end ;
         { ( temp___366 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___366)) ) with Pump_unit__pump_unit.rec__pump_diesel = { Pump__pump.__split_fields = pump__set_pump_nozzle_state__pump_r__fields.Pump__pump.__split_fields__content } } } )))
         in (
         #"pump_unit.adb" 222 0 0# Pump_unit__set_pump_nozzle_state__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___367)) )))
         )))
       );
      ( "GP_Sloc:pump_unit.adb:223:37" (let temp___369 = (let temp___368 = { Pump_unit__pump_unit.__split_fields = Pump_unit__set_pump_nozzle_state__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
       ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_nozzle_state((Pump_unit__pump_unit.__split_fields(temp___368)))) in (
        ()))
        end ;
       { ( temp___368 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___368)) ) with Pump_unit__pump_unit.rec__pump_nozzle_state = (Pump__nozzle_type.of_rep Pump_unit__set_pump_nozzle_state__nozzletype.nozzletype) } } )))
       in (
       #"pump_unit.adb" 223 0 0# Pump_unit__set_pump_nozzle_state__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___369)) )))
       ) )) else (
      ( "GP_Sloc:pump_unit.adb:225:10" (Sprint__print__axiom.print((Standard__string.of_array(Temp___365.temp___365) (1) (20)))) ))) ))) ))) );
   #"pump_unit.adb" 212 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump_unit.ads:49 *)
  ;
  #"pump_unit.adb" 212 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "add_pump" defined at pump_unit.ads:51, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump_unit__add_pump__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use import "real".RealInfix
 use        "_gnatprove_standard".Boolean
 use        Standard__string
 use        Pump__float_number
 use        Pump__fuel_types__axiom
 use        Pump__state_type
 use        Pump__state_type__axiom
 use        Pump__nozzle_type
 use        Pump__nozzle_type__axiom
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__set_fuel_price__axiom
 use        Pump__set_pump_state__axiom
 use        Pump__set_pump_nozzle_state__axiom
 use        Pump__append_reservoir__axiom
 use        Pump__set_reservoir_size__axiom
 use        Sprint__print__axiom
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__add_pump__pumpunit
 use        Pump_unit__add_pump__pump_r
 use        Pump_unit__add_pump__fueltype
 use        Pump_unit__add_pump__nozzlestatetype
 use        Pump_unit__add_pump__basestatetype
 use        Temp___378
 use        Temp___393
 use        Temp___408
 use        Temp___423
 use        Standard__positive__axiom
 use        Standard__character__axiom
 use        Standard__string__axiom
 use        Standard__integer__axiom
 use        Pump_unit__add_pump__nozzlestatetype__axiom
 use        Pump_unit__add_pump__basestatetype__axiom
 use        Pump_unit__unit_id_type__axiom
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__add_pump__pumpunit__axiom
 use        Pump_unit__add_pump__pump_r__axiom
 use        Pump_unit__add_pump__fueltype__axiom
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom
 use        Pump__set_fuel_price__axiom
 use        Pump__set_pump_state__axiom
 use        Pump__set_pump_nozzle_state__axiom
 use        Pump__append_reservoir__axiom
 use        Pump__set_reservoir_size__axiom
 use        Sprint__print__axiom

 let def #"pump_unit.adb" 212 0 0# "W:diverges:N" "GP_Subp:pump_unit.ads:51" 
   (__void_param : unit)
  requires { true }
  ensures { true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump_unit.ads:51 *)
  ;
  #"pump_unit.ads" 14 0 0# assume { (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True False True) };
  #"pump.ads" 20 0 0# assume { (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = Pump_unit__add_pump__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content } True False True) };
  #"pump.ads" 7 0 0# assume { (Pump__fuel_types__axiom.dynamic_invariant Pump_unit__add_pump__fueltype.fueltype True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump_unit.ads:51 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump_unit.ads:51 *)
  ;
  #"pump_unit.ads" 51 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump_unit.ads:51 *)
  ;
  #"pump_unit.ads" 51 0 0# assume { true };
  () (* checking of pragma precondition pump_unit.ads:51 *)
  ;
  try
   ( #"pump_unit.ads" 51 0 0# abstract ensures {true}(let _ = () in (
    ()))
    end ;
   #"pump_unit.adb" 15 0 0# assume { (Pump__nozzle_type__axiom.default_initial_assumption Pump_unit__add_pump__nozzlestatetype.nozzlestatetype.int__content False) };
   #"pump.ads" 11 0 0# assume { (Pump__nozzle_type__axiom.dynamic_invariant Pump_unit__add_pump__nozzlestatetype.nozzlestatetype.int__content False False True) };
   #"pump.ads" 11 0 0# abstract ensures {true}(let _ = () in (
    ()))
    end ;
   #"pump_unit.adb" 16 0 0# assume { (Pump__state_type__axiom.default_initial_assumption Pump_unit__add_pump__basestatetype.basestatetype.int__content False) };
   #"pump.ads" 10 0 0# assume { (Pump__state_type__axiom.dynamic_invariant Pump_unit__add_pump__basestatetype.basestatetype.int__content False False True) };
   ( "GP_Sloc:pump_unit.adb:18:20" #"pump_unit.adb" 18 0 0# Pump_unit__add_pump__basestatetype.basestatetype.int__content <- ( 0 ) );
   ( "GP_Sloc:pump_unit.adb:19:23" #"pump_unit.adb" 19 0 0# Pump_unit__add_pump__nozzlestatetype.nozzlestatetype.int__content <- ( 0 ) );
   ( "GP_Sloc:pump_unit.adb:21:7" (if ((Pump_unit__add_pump__fueltype.fueltype = 0)) then (
    ( ( "GP_Sloc:pump_unit.adb:23:13" (Sprint__print__axiom.print((Standard__string.of_array(Temp___378.temp___378) (1) (12)))) );
    ( "GP_Sloc:pump_unit.adb:24:17" (Pump__set_fuel_price__axiom.set_fuel_price(Pump_unit__add_pump__pump_r.pump_r__split_fields) ((1.79999995231628417968750))) );
    ( "GP_Sloc:pump_unit.adb:25:17" (Pump__set_pump_state__axiom.set_pump_state(Pump_unit__add_pump__pump_r.pump_r__split_fields) (Pump_unit__add_pump__basestatetype.basestatetype.int__content)) );
    ( "GP_Sloc:pump_unit.adb:26:17" (Pump__append_reservoir__axiom.append_reservoir(Pump_unit__add_pump__pump_r.pump_r__split_fields) (Pump_unit__add_pump__fueltype.fueltype)) );
    ( "GP_Sloc:pump_unit.adb:27:17" (Pump__set_reservoir_size__axiom.set_reservoir_size(Pump_unit__add_pump__pump_r.pump_r__split_fields) ((1000.0))) );
    ( "GP_Sloc:pump_unit.adb:28:30" (let temp___380 = (let temp___379 = { Pump_unit__pump_unit.__split_fields = Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
     ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_91((Pump_unit__pump_unit.__split_fields(temp___379)))) in (
      ()))
      end ;
     { ( temp___379 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___379)) ) with Pump_unit__pump_unit.rec__pump_91 = { Pump__pump.__split_fields = Pump_unit__add_pump__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content } } } )))
     in (
     #"pump_unit.adb" 28 0 0# Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___380)) )))
     );
    ( "GP_Sloc:pump_unit.adb:29:31" (let temp___382 = (let temp___381 = { Pump_unit__pump_unit.__split_fields = Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
     ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__is_using((Pump_unit__pump_unit.__split_fields(temp___381)))) in (
      ()))
      end ;
     { ( temp___381 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___381)) ) with Pump_unit__pump_unit.rec__is_using = (Boolean.of_int(0)) } } )))
     in (
     #"pump_unit.adb" 29 0 0# Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___382)) )))
     );
    ( "GP_Sloc:pump_unit.adb:30:30" (let temp___384 = (let temp___383 = { Pump_unit__pump_unit.__split_fields = Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
     ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__is_paid((Pump_unit__pump_unit.__split_fields(temp___383)))) in (
      ()))
      end ;
     { ( temp___383 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___383)) ) with Pump_unit__pump_unit.rec__is_paid = (Boolean.of_int(1)) } } )))
     in (
     #"pump_unit.adb" 30 0 0# Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___384)) )))
     );
    ( "GP_Sloc:pump_unit.adb:31:28" (let temp___386 = (let temp___385 = { Pump_unit__pump_unit.__split_fields = Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
     ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__to_pay((Pump_unit__pump_unit.__split_fields(temp___385)))) in (
      ()))
      end ;
     { ( temp___385 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___385)) ) with Pump_unit__pump_unit.rec__to_pay = (Pump__float_number.of_real((0.0E-2))) } } )))
     in (
     #"pump_unit.adb" 31 0 0# Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___386)) )))
     );
    ( "GP_Sloc:pump_unit.adb:32:28" (let temp___388 = (let temp___387 = { Pump_unit__pump_unit.__split_fields = Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
     ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pumped((Pump_unit__pump_unit.__split_fields(temp___387)))) in (
      ()))
      end ;
     { ( temp___387 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___387)) ) with Pump_unit__pump_unit.rec__pumped = (Pump__float_number.of_real((0.0E-2))) } } )))
     in (
     #"pump_unit.adb" 32 0 0# Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___388)) )))
     );
    ( "GP_Sloc:pump_unit.adb:33:40" (let temp___390 = (let temp___389 = { Pump_unit__pump_unit.__split_fields = Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
     ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_active_state((Pump_unit__pump_unit.__split_fields(temp___389)))) in (
      ()))
      end ;
     { ( temp___389 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___389)) ) with Pump_unit__pump_unit.rec__pump_active_state = (Pump__state_type.of_rep Pump_unit__add_pump__basestatetype.basestatetype.int__content) } } )))
     in (
     #"pump_unit.adb" 33 0 0# Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___390)) )))
     );
    ( "GP_Sloc:pump_unit.adb:34:40" (let temp___392 = (let temp___391 = { Pump_unit__pump_unit.__split_fields = Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
     ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_nozzle_state((Pump_unit__pump_unit.__split_fields(temp___391)))) in (
      ()))
      end ;
     { ( temp___391 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___391)) ) with Pump_unit__pump_unit.rec__pump_nozzle_state = (Pump__nozzle_type.of_rep Pump_unit__add_pump__nozzlestatetype.nozzlestatetype.int__content) } } )))
     in (
     #"pump_unit.adb" 34 0 0# Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___392)) )))
     );
    ( "GP_Sloc:pump_unit.adb:35:17" (Pump__set_pump_nozzle_state__axiom.set_pump_nozzle_state(Pump_unit__add_pump__pump_r.pump_r__split_fields) (Pump_unit__add_pump__nozzlestatetype.nozzlestatetype.int__content)) ) )) else if ((Pump_unit__add_pump__fueltype.fueltype = 1)) then (
    ( ( "GP_Sloc:pump_unit.adb:37:13" (Sprint__print__axiom.print((Standard__string.of_array(Temp___393.temp___393) (1) (12)))) );
    ( "GP_Sloc:pump_unit.adb:38:17" (Pump__set_fuel_price__axiom.set_fuel_price(Pump_unit__add_pump__pump_r.pump_r__split_fields) ((2.0999999046325683593750))) );
    ( "GP_Sloc:pump_unit.adb:39:17" (Pump__set_pump_state__axiom.set_pump_state(Pump_unit__add_pump__pump_r.pump_r__split_fields) (Pump_unit__add_pump__basestatetype.basestatetype.int__content)) );
    ( "GP_Sloc:pump_unit.adb:40:17" (Pump__append_reservoir__axiom.append_reservoir(Pump_unit__add_pump__pump_r.pump_r__split_fields) (Pump_unit__add_pump__fueltype.fueltype)) );
    ( "GP_Sloc:pump_unit.adb:41:17" (Pump__set_reservoir_size__axiom.set_reservoir_size(Pump_unit__add_pump__pump_r.pump_r__split_fields) ((1000.0))) );
    ( "GP_Sloc:pump_unit.adb:42:30" (let temp___395 = (let temp___394 = { Pump_unit__pump_unit.__split_fields = Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
     ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_95((Pump_unit__pump_unit.__split_fields(temp___394)))) in (
      ()))
      end ;
     { ( temp___394 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___394)) ) with Pump_unit__pump_unit.rec__pump_95 = { Pump__pump.__split_fields = Pump_unit__add_pump__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content } } } )))
     in (
     #"pump_unit.adb" 42 0 0# Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___395)) )))
     );
    ( "GP_Sloc:pump_unit.adb:43:31" (let temp___397 = (let temp___396 = { Pump_unit__pump_unit.__split_fields = Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
     ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__is_using((Pump_unit__pump_unit.__split_fields(temp___396)))) in (
      ()))
      end ;
     { ( temp___396 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___396)) ) with Pump_unit__pump_unit.rec__is_using = (Boolean.of_int(0)) } } )))
     in (
     #"pump_unit.adb" 43 0 0# Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___397)) )))
     );
    ( "GP_Sloc:pump_unit.adb:44:30" (let temp___399 = (let temp___398 = { Pump_unit__pump_unit.__split_fields = Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
     ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__is_paid((Pump_unit__pump_unit.__split_fields(temp___398)))) in (
      ()))
      end ;
     { ( temp___398 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___398)) ) with Pump_unit__pump_unit.rec__is_paid = (Boolean.of_int(1)) } } )))
     in (
     #"pump_unit.adb" 44 0 0# Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___399)) )))
     );
    ( "GP_Sloc:pump_unit.adb:45:28" (let temp___401 = (let temp___400 = { Pump_unit__pump_unit.__split_fields = Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
     ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__to_pay((Pump_unit__pump_unit.__split_fields(temp___400)))) in (
      ()))
      end ;
     { ( temp___400 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___400)) ) with Pump_unit__pump_unit.rec__to_pay = (Pump__float_number.of_real((0.0E-2))) } } )))
     in (
     #"pump_unit.adb" 45 0 0# Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___401)) )))
     );
    ( "GP_Sloc:pump_unit.adb:46:28" (let temp___403 = (let temp___402 = { Pump_unit__pump_unit.__split_fields = Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
     ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pumped((Pump_unit__pump_unit.__split_fields(temp___402)))) in (
      ()))
      end ;
     { ( temp___402 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___402)) ) with Pump_unit__pump_unit.rec__pumped = (Pump__float_number.of_real((0.0E-2))) } } )))
     in (
     #"pump_unit.adb" 46 0 0# Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___403)) )))
     );
    ( "GP_Sloc:pump_unit.adb:47:40" (let temp___405 = (let temp___404 = { Pump_unit__pump_unit.__split_fields = Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
     ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_active_state((Pump_unit__pump_unit.__split_fields(temp___404)))) in (
      ()))
      end ;
     { ( temp___404 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___404)) ) with Pump_unit__pump_unit.rec__pump_active_state = (Pump__state_type.of_rep Pump_unit__add_pump__basestatetype.basestatetype.int__content) } } )))
     in (
     #"pump_unit.adb" 47 0 0# Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___405)) )))
     );
    ( "GP_Sloc:pump_unit.adb:48:40" (let temp___407 = (let temp___406 = { Pump_unit__pump_unit.__split_fields = Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
     ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_nozzle_state((Pump_unit__pump_unit.__split_fields(temp___406)))) in (
      ()))
      end ;
     { ( temp___406 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___406)) ) with Pump_unit__pump_unit.rec__pump_nozzle_state = (Pump__nozzle_type.of_rep Pump_unit__add_pump__nozzlestatetype.nozzlestatetype.int__content) } } )))
     in (
     #"pump_unit.adb" 48 0 0# Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___407)) )))
     );
    ( "GP_Sloc:pump_unit.adb:49:17" (Pump__set_pump_nozzle_state__axiom.set_pump_nozzle_state(Pump_unit__add_pump__pump_r.pump_r__split_fields) (Pump_unit__add_pump__nozzlestatetype.nozzlestatetype.int__content)) ) ))  else if ((Pump_unit__add_pump__fueltype.fueltype = 2)) then (
    ( ( "GP_Sloc:pump_unit.adb:51:13" (Sprint__print__axiom.print((Standard__string.of_array(Temp___408.temp___408) (1) (16)))) );
    ( "GP_Sloc:pump_unit.adb:52:17" (Pump__set_fuel_price__axiom.set_fuel_price(Pump_unit__add_pump__pump_r.pump_r__split_fields) ((1.10000002384185791015625))) );
    ( "GP_Sloc:pump_unit.adb:53:17" (Pump__set_pump_state__axiom.set_pump_state(Pump_unit__add_pump__pump_r.pump_r__split_fields) (Pump_unit__add_pump__basestatetype.basestatetype.int__content)) );
    ( "GP_Sloc:pump_unit.adb:54:17" (Pump__append_reservoir__axiom.append_reservoir(Pump_unit__add_pump__pump_r.pump_r__split_fields) (Pump_unit__add_pump__fueltype.fueltype)) );
    ( "GP_Sloc:pump_unit.adb:55:17" (Pump__set_reservoir_size__axiom.set_reservoir_size(Pump_unit__add_pump__pump_r.pump_r__split_fields) ((1000.0))) );
    ( "GP_Sloc:pump_unit.adb:56:34" (let temp___410 = (let temp___409 = { Pump_unit__pump_unit.__split_fields = Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
     ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_diesel((Pump_unit__pump_unit.__split_fields(temp___409)))) in (
      ()))
      end ;
     { ( temp___409 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___409)) ) with Pump_unit__pump_unit.rec__pump_diesel = { Pump__pump.__split_fields = Pump_unit__add_pump__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content } } } )))
     in (
     #"pump_unit.adb" 56 0 0# Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___410)) )))
     );
    ( "GP_Sloc:pump_unit.adb:57:31" (let temp___412 = (let temp___411 = { Pump_unit__pump_unit.__split_fields = Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
     ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__is_using((Pump_unit__pump_unit.__split_fields(temp___411)))) in (
      ()))
      end ;
     { ( temp___411 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___411)) ) with Pump_unit__pump_unit.rec__is_using = (Boolean.of_int(0)) } } )))
     in (
     #"pump_unit.adb" 57 0 0# Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___412)) )))
     );
    ( "GP_Sloc:pump_unit.adb:58:30" (let temp___414 = (let temp___413 = { Pump_unit__pump_unit.__split_fields = Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
     ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__is_paid((Pump_unit__pump_unit.__split_fields(temp___413)))) in (
      ()))
      end ;
     { ( temp___413 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___413)) ) with Pump_unit__pump_unit.rec__is_paid = (Boolean.of_int(1)) } } )))
     in (
     #"pump_unit.adb" 58 0 0# Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___414)) )))
     );
    ( "GP_Sloc:pump_unit.adb:59:28" (let temp___416 = (let temp___415 = { Pump_unit__pump_unit.__split_fields = Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
     ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__to_pay((Pump_unit__pump_unit.__split_fields(temp___415)))) in (
      ()))
      end ;
     { ( temp___415 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___415)) ) with Pump_unit__pump_unit.rec__to_pay = (Pump__float_number.of_real((0.0E-2))) } } )))
     in (
     #"pump_unit.adb" 59 0 0# Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___416)) )))
     );
    ( "GP_Sloc:pump_unit.adb:60:28" (let temp___418 = (let temp___417 = { Pump_unit__pump_unit.__split_fields = Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
     ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pumped((Pump_unit__pump_unit.__split_fields(temp___417)))) in (
      ()))
      end ;
     { ( temp___417 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___417)) ) with Pump_unit__pump_unit.rec__pumped = (Pump__float_number.of_real((0.0E-2))) } } )))
     in (
     #"pump_unit.adb" 60 0 0# Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___418)) )))
     );
    ( "GP_Sloc:pump_unit.adb:61:40" (let temp___420 = (let temp___419 = { Pump_unit__pump_unit.__split_fields = Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
     ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_active_state((Pump_unit__pump_unit.__split_fields(temp___419)))) in (
      ()))
      end ;
     { ( temp___419 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___419)) ) with Pump_unit__pump_unit.rec__pump_active_state = (Pump__state_type.of_rep Pump_unit__add_pump__basestatetype.basestatetype.int__content) } } )))
     in (
     #"pump_unit.adb" 61 0 0# Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___420)) )))
     );
    ( "GP_Sloc:pump_unit.adb:62:40" (let temp___422 = (let temp___421 = { Pump_unit__pump_unit.__split_fields = Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
     ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_nozzle_state((Pump_unit__pump_unit.__split_fields(temp___421)))) in (
      ()))
      end ;
     { ( temp___421 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___421)) ) with Pump_unit__pump_unit.rec__pump_nozzle_state = (Pump__nozzle_type.of_rep Pump_unit__add_pump__nozzlestatetype.nozzlestatetype.int__content) } } )))
     in (
     #"pump_unit.adb" 62 0 0# Pump_unit__add_pump__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___422)) )))
     );
    ( "GP_Sloc:pump_unit.adb:63:17" (Pump__set_pump_nozzle_state__axiom.set_pump_nozzle_state(Pump_unit__add_pump__pump_r.pump_r__split_fields) (Pump_unit__add_pump__nozzlestatetype.nozzlestatetype.int__content)) ) )) else (
    ( "GP_Sloc:pump_unit.adb:64:25" () ))) );
   ( "GP_Sloc:pump_unit.adb:66:7" (Sprint__print__axiom.print((Standard__string.of_array(Temp___423.temp___423) (1) (0)))) );
   #"pump_unit.adb" 10 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump_unit.ads:51 *)
  ;
  #"pump_unit.adb" 10 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "left_nozzle" defined at pump_unit.ads:53, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump_unit__left_nozzle__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__string
 use        Array__Int__Standard__character
 use        Pump__fuel_types
 use        Pump__fuel_types__axiom
 use        Pump__state_type
 use        Pump__nozzle_type
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__set_pump_state__axiom
 use        Pump__set_pump_nozzle_state__axiom
 use        Pump__get_state
 use        Pump__get_state__axiom
 use        Sprint__print__axiom
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__left_nozzle__pumpunit
 use        Pump_unit__left_nozzle__pump_r
 use        Pump_unit__left_nozzle__fueltype
 use        Temp___424
 use        Temp___431
 use        Temp___432
 use        Temp___434
 use        Temp___442
 use        Temp___443
 use        Standard__positive__axiom
 use        Standard__character__axiom
 use        Standard__string__axiom
 use        Standard__integer__axiom
 use        Pump_unit__unit_id_type__axiom
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__left_nozzle__pumpunit__axiom
 use        Pump_unit__left_nozzle__pump_r__axiom
 use        Pump_unit__left_nozzle__fueltype__axiom
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom
 use        Pump__set_pump_state__axiom
 use        Pump__set_pump_nozzle_state__axiom
 use        Pump__get_state__axiom
 use        Sprint__print__axiom

 let def #"pump_unit.adb" 10 0 0# "W:diverges:N" "GP_Subp:pump_unit.ads:53" 
   (__void_param : unit)
  requires { true }
  ensures { ( #"pump_unit.ads" 56 0 0# "model_vc_post" "keep_on_simp" "GP_Sloc:pump_unit.ads:56:14" "GP_Reason:VC_POSTCONDITION" "GP_Id:1" "comment:     Post => (pumpUnit.PUMP_ACTIVE_STATE = PUMP.Ready);
             ^ pump_unit.ads:56:14:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" ( "GP_Pretty_Ada:10409" "GP_Sloc:pump_unit.ads:56:14" ((Pump__state_type.to_rep (Pump_unit__pump_unit.rec__pump_active_state (Pump_unit__pump_unit.__split_fields { Pump_unit__pump_unit.__split_fields = Pump_unit__left_nozzle__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content }))) = 1) ) ) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump_unit.ads:53 *)
  ;
  #"pump_unit.ads" 14 0 0# assume { (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = Pump_unit__left_nozzle__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True False True) };
  #"pump.ads" 20 0 0# assume { (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = Pump_unit__left_nozzle__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content } True False True) };
  #"pump.ads" 7 0 0# assume { (Pump__fuel_types__axiom.dynamic_invariant Pump_unit__left_nozzle__fueltype.fueltype True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump_unit.ads:53 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump_unit.ads:53 *)
  ;
  #"pump_unit.ads" 53 0 0# abstract ensures {true}(let _ = (Boolean.orb(((Pump__get_state__axiom.get_state({ Pump__pump.__split_fields = Pump_unit__left_nozzle__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content })) = 0)) (((Pump__get_state__axiom.get_state({ Pump__pump.__split_fields = Pump_unit__left_nozzle__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content })) = 3))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump_unit.ads:53 *)
  ;
  #"pump.ads" 20 0 0# assume { ( ((Pump__get_state.get_state { Pump__pump.__split_fields = Pump_unit__left_nozzle__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content }) = 0) \/ ((Pump__get_state.get_state { Pump__pump.__split_fields = Pump_unit__left_nozzle__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content }) = 3) ) };
  () (* checking of pragma precondition pump_unit.ads:53 *)
  ;
  try
   ( ( "GP_Sloc:pump_unit.adb:272:7" (if ((let temp___444 = (Standard__string.to_string((Pump__state_type.attr__ATTRIBUTE_IMAGE((Pump__state_type.to_rep((Pump_unit__pump_unit.rec__pump_active_state((Pump_unit__pump_unit.__split_fields({ Pump_unit__pump_unit.__split_fields = Pump_unit__left_nozzle__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })))))))))) in (
    (Array__Int__Standard__character.bool_eq((Standard__string.to_array(temp___444))) ((Standard__string.first(temp___444))) ((Standard__string.last(temp___444))) (Temp___443.temp___443) (1) (4))))
   ) then (
    ( ( "GP_Sloc:pump_unit.adb:273:37" (let temp___437 = (let temp___436 = { Pump_unit__pump_unit.__split_fields = Pump_unit__left_nozzle__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
     ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_active_state((Pump_unit__pump_unit.__split_fields(temp___436)))) in (
      ()))
      end ;
     { ( temp___436 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___436)) ) with Pump_unit__pump_unit.rec__pump_active_state = (Pump__state_type.of_rep 1) } } )))
     in (
     #"pump_unit.adb" 273 0 0# Pump_unit__left_nozzle__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___437)) )))
     );
    ( "GP_Sloc:pump_unit.adb:274:35" (let temp___439 = (let temp___438 = { Pump_unit__pump_unit.__split_fields = Pump_unit__left_nozzle__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
     ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_active_fuel((Pump_unit__pump_unit.__split_fields(temp___438)))) in (
      ()))
      end ;
     { ( temp___438 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___438)) ) with Pump_unit__pump_unit.rec__pump_active_fuel = (Pump__fuel_types.of_rep Pump_unit__left_nozzle__fueltype.fueltype) } } )))
     in (
     #"pump_unit.adb" 274 0 0# Pump_unit__left_nozzle__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___439)) )))
     );
    ( "GP_Sloc:pump_unit.adb:275:36" (let temp___441 = (let temp___440 = { Pump_unit__pump_unit.__split_fields = Pump_unit__left_nozzle__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
     ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_nozzle_state((Pump_unit__pump_unit.__split_fields(temp___440)))) in (
      ()))
      end ;
     { ( temp___440 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___440)) ) with Pump_unit__pump_unit.rec__pump_nozzle_state = (Pump__nozzle_type.of_rep 1) } } )))
     in (
     #"pump_unit.adb" 275 0 0# Pump_unit__left_nozzle__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___441)) )))
     );
    ( "GP_Sloc:pump_unit.adb:276:14" (Pump__set_pump_state__axiom.set_pump_state(Pump_unit__left_nozzle__pump_r.pump_r__split_fields) (1)) );
    ( "GP_Sloc:pump_unit.adb:277:14" (Pump__set_pump_nozzle_state__axiom.set_pump_nozzle_state(Pump_unit__left_nozzle__pump_r.pump_r__split_fields) (1)) );
    ( "GP_Sloc:pump_unit.adb:278:10" (Sprint__print__axiom.print((Standard__string.of_array(Temp___442.temp___442) (1) (25)))) ) )) else (
    ( "GP_Sloc:pump_unit.adb:279:7" (if ((Boolean.andb((let temp___433 = (Standard__string.to_string((Pump__state_type.attr__ATTRIBUTE_IMAGE((Pump__state_type.to_rep((Pump_unit__pump_unit.rec__pump_active_state((Pump_unit__pump_unit.__split_fields({ Pump_unit__pump_unit.__split_fields = Pump_unit__left_nozzle__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })))))))))) in (
     (Array__Int__Standard__character.bool_eq((Standard__string.to_array(temp___433))) ((Standard__string.first(temp___433))) ((Standard__string.last(temp___433))) (Temp___432.temp___432) (1) (7))))
    ) ((let temp___435 = (Standard__string.to_string((Pump__state_type.attr__ATTRIBUTE_IMAGE((Pump__get_state__axiom.get_state({ Pump__pump.__split_fields = Pump_unit__left_nozzle__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content })))))) in (
     (Array__Int__Standard__character.bool_eq((Standard__string.to_array(temp___435))) ((Standard__string.first(temp___435))) ((Standard__string.last(temp___435))) (Temp___434.temp___434) (1) (7))))
    ))) then (
     ( ( "GP_Sloc:pump_unit.adb:280:37" (let temp___426 = (let temp___425 = { Pump_unit__pump_unit.__split_fields = Pump_unit__left_nozzle__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
      ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_active_state((Pump_unit__pump_unit.__split_fields(temp___425)))) in (
       ()))
       end ;
      { ( temp___425 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___425)) ) with Pump_unit__pump_unit.rec__pump_active_state = (Pump__state_type.of_rep 1) } } )))
      in (
      #"pump_unit.adb" 280 0 0# Pump_unit__left_nozzle__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___426)) )))
      );
     ( "GP_Sloc:pump_unit.adb:281:36" (let temp___428 = (let temp___427 = { Pump_unit__pump_unit.__split_fields = Pump_unit__left_nozzle__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
      ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_active_fuel((Pump_unit__pump_unit.__split_fields(temp___427)))) in (
       ()))
       end ;
      { ( temp___427 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___427)) ) with Pump_unit__pump_unit.rec__pump_active_fuel = (Pump__fuel_types.of_rep Pump_unit__left_nozzle__fueltype.fueltype) } } )))
      in (
      #"pump_unit.adb" 281 0 0# Pump_unit__left_nozzle__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___428)) )))
      );
     ( "GP_Sloc:pump_unit.adb:282:36" (let temp___430 = (let temp___429 = { Pump_unit__pump_unit.__split_fields = Pump_unit__left_nozzle__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
      ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_nozzle_state((Pump_unit__pump_unit.__split_fields(temp___429)))) in (
       ()))
       end ;
      { ( temp___429 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___429)) ) with Pump_unit__pump_unit.rec__pump_nozzle_state = (Pump__nozzle_type.of_rep 1) } } )))
      in (
      #"pump_unit.adb" 282 0 0# Pump_unit__left_nozzle__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___430)) )))
      );
     ( "GP_Sloc:pump_unit.adb:283:14" (Pump__set_pump_state__axiom.set_pump_state(Pump_unit__left_nozzle__pump_r.pump_r__split_fields) (1)) );
     ( "GP_Sloc:pump_unit.adb:284:14" (Pump__set_pump_nozzle_state__axiom.set_pump_nozzle_state(Pump_unit__left_nozzle__pump_r.pump_r__split_fields) (1)) );
     ( "GP_Sloc:pump_unit.adb:285:10" (Sprint__print__axiom.print((Standard__string.of_array(Temp___431.temp___431) (1) (28)))) ) )) else (
     ( ( "GP_Sloc:pump_unit.adb:287:10" (Sprint__print__axiom.print((Standard__string.of_array(Temp___424.temp___424) (1) (56)))) );
     ( "GP_Sloc:pump_unit.adb:288:10" #"pump_unit.adb" 287 0 0# assert { ( #"pump_unit.adb" 287 0 0# "model_vc" "keep_on_simp" "GP_Sloc:pump_unit.adb:288:10" "GP_Reason:VC_RAISE" "GP_Id:0" "comment:         Raise liftNozzleException;
         ^ pump_unit.adb:288:10:VC_RAISE" "GP_Shape:if__raise_liftnozzleexception" false ) } ) ))) ))) );
   #"pump_unit.adb" 269 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump_unit.ads:53 *)
  ;
  #"pump_unit.adb" 269 0 0# abstract ensures {true}(let _ = ((Pump__state_type.to_rep((Pump_unit__pump_unit.rec__pump_active_state((Pump_unit__pump_unit.__split_fields({ Pump_unit__pump_unit.__split_fields = Pump_unit__left_nozzle__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })))))) = 1) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "return_nozzle" defined at pump_unit.ads:58, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump_unit__return_nozzle__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use import "real".RealInfix
 use        "_gnatprove_standard".Boolean
 use        Standard__string
 use        Array__Int__Standard__character
 use        Pump__float_number
 use        Pump__float_number__axiom
 use        Pump__state_type
 use        Pump__nozzle_type
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__set_pump_state__axiom
 use        Pump__set_pump_nozzle_state__axiom
 use        Pump__get_state
 use        Pump__get_state__axiom
 use        Pump__get_current_nozzle_state
 use        Pump__get_current_nozzle_state__axiom
 use        Sprint__print__axiom
 use        Sprint__print_float_type__axiom
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__return_nozzle__pumpunit
 use        Pump_unit__return_nozzle__pump_r
 use        Pump_unit__return_nozzle__due
 use        Temp___445
 use        Temp___450
 use        Temp___455
 use        Temp___456
 use        Temp___458
 use        Standard__positive__axiom
 use        Standard__character__axiom
 use        Standard__string__axiom
 use        Standard__integer__axiom
 use        Pump_unit__return_nozzle__due__axiom
 use        Pump_unit__unit_id_type__axiom
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__return_nozzle__pumpunit__axiom
 use        Pump_unit__return_nozzle__pump_r__axiom
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom
 use        Pump__set_pump_state__axiom
 use        Pump__set_pump_nozzle_state__axiom
 use        Pump__get_state__axiom
 use        Pump__get_current_nozzle_state__axiom
 use        Sprint__print__axiom
 use        Sprint__print_float_type__axiom

 let def #"pump_unit.ads" 14 0 0# "W:diverges:N" "GP_Subp:pump_unit.ads:58" 
   (__void_param : unit)
  requires { true }
  ensures { ( #"pump_unit.ads" 64 0 0# "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Sloc:pump_unit.ads:64:14" "GP_Id:3" "comment:     Post => (pumpUnit.PUMP_ACTIVE_STATE = PUMP.Waiting or pumpUnit.PUMP_ACTIVE_STATE = PUMP.Base);
             ^ pump_unit.ads:64:14:VC_POSTCONDITION" "GP_Shape:pragargs__or" ( "GP_Pretty_Ada:10488" "GP_Sloc:pump_unit.ads:64:14" ( ((Pump__state_type.to_rep (Pump_unit__pump_unit.rec__pump_active_state (Pump_unit__pump_unit.__split_fields { Pump_unit__pump_unit.__split_fields = Pump_unit__return_nozzle__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content }))) = 3) \/ ((Pump__state_type.to_rep (Pump_unit__pump_unit.rec__pump_active_state (Pump_unit__pump_unit.__split_fields { Pump_unit__pump_unit.__split_fields = Pump_unit__return_nozzle__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content }))) = 0) ) ) ) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump_unit.ads:58 *)
  ;
  #"pump_unit.ads" 14 0 0# assume { (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = Pump_unit__return_nozzle__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True False True) };
  #"pump.ads" 20 0 0# assume { (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = Pump_unit__return_nozzle__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content } True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump_unit.ads:58 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump_unit.ads:58 *)
  ;
  #"pump.ads" 20 0 0# abstract ensures {true}(let _ = (Boolean.andb((Boolean.orb(((Pump__get_state__axiom.get_state({ Pump__pump.__split_fields = Pump_unit__return_nozzle__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content })) = 1)) (((Pump__get_state__axiom.get_state({ Pump__pump.__split_fields = Pump_unit__return_nozzle__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content })) = 3)))) (((Pump__get_current_nozzle_state__axiom.get_current_nozzle_state({ Pump__pump.__split_fields = Pump_unit__return_nozzle__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content })) = 5))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump_unit.ads:58 *)
  ;
  #"pump.ads" 20 0 0# assume { ( ( ((Pump__get_state.get_state { Pump__pump.__split_fields = Pump_unit__return_nozzle__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content }) = 1) \/ ((Pump__get_state.get_state { Pump__pump.__split_fields = Pump_unit__return_nozzle__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content }) = 3) ) /\ ((Pump__get_current_nozzle_state.get_current_nozzle_state { Pump__pump.__split_fields = Pump_unit__return_nozzle__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content }) = 5) ) };
  () (* checking of pragma precondition pump_unit.ads:58 *)
  ;
  try
   ( #"pump.ads" 20 0 0# abstract ensures {true}(let _ = () in (
    ()))
    end ;
   #"pump_unit.adb" 295 0 0# assume { (Pump__float_number__axiom.default_initial_assumption Pump_unit__return_nozzle__due.due.Pump__float_number.float_number__content False) };
   #"pump.ads" 6 0 0# assume { (Pump__float_number__axiom.dynamic_invariant Pump_unit__return_nozzle__due.due.Pump__float_number.float_number__content False False True) };
   ( "GP_Sloc:pump_unit.adb:299:10" #"pump_unit.adb" 299 0 0# Pump_unit__return_nozzle__due.due.Pump__float_number.float_number__content <- ( (Pump__float_number.of_real((0.0E-2))) ) );
   ( "GP_Sloc:pump_unit.adb:300:7" (if ((Boolean.andb((let temp___457 = (Standard__string.to_string((Pump__state_type.attr__ATTRIBUTE_IMAGE((Pump__state_type.to_rep((Pump_unit__pump_unit.rec__pump_active_state((Pump_unit__pump_unit.__split_fields({ Pump_unit__pump_unit.__split_fields = Pump_unit__return_nozzle__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })))))))))) in (
    (Array__Int__Standard__character.bool_eq((Standard__string.to_array(temp___457))) ((Standard__string.first(temp___457))) ((Standard__string.last(temp___457))) (Temp___456.temp___456) (1) (5))))
   ) ((let temp___459 = (Standard__string.to_string((Pump__state_type.attr__ATTRIBUTE_IMAGE((Pump__get_state__axiom.get_state({ Pump__pump.__split_fields = Pump_unit__return_nozzle__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content })))))) in (
    (Array__Int__Standard__character.bool_eq((Standard__string.to_array(temp___459))) ((Standard__string.first(temp___459))) ((Standard__string.last(temp___459))) (Temp___458.temp___458) (1) (5))))
   ))) then (
    ( "GP_Sloc:pump_unit.adb:301:10" (if (((Pump__float_number.to_real((Pump_unit__pump_unit.rec__to_pay((Pump_unit__pump_unit.__split_fields({ Pump_unit__pump_unit.__split_fields = Pump_unit__return_nozzle__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })))))) >. (Pump__float_number.to_real(Pump_unit__return_nozzle__due.due.Pump__float_number.float_number__content)))) then (
     ( ( "GP_Sloc:pump_unit.adb:302:40" (let temp___452 = (let temp___451 = { Pump_unit__pump_unit.__split_fields = Pump_unit__return_nozzle__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
      ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_active_state((Pump_unit__pump_unit.__split_fields(temp___451)))) in (
       ()))
       end ;
      { ( temp___451 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___451)) ) with Pump_unit__pump_unit.rec__pump_active_state = (Pump__state_type.of_rep 3) } } )))
      in (
      #"pump_unit.adb" 302 0 0# Pump_unit__return_nozzle__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___452)) )))
      );
     ( "GP_Sloc:pump_unit.adb:303:39" (let temp___454 = (let temp___453 = { Pump_unit__pump_unit.__split_fields = Pump_unit__return_nozzle__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
      ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_nozzle_state((Pump_unit__pump_unit.__split_fields(temp___453)))) in (
       ()))
       end ;
      { ( temp___453 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___453)) ) with Pump_unit__pump_unit.rec__pump_nozzle_state = (Pump__nozzle_type.of_rep 2) } } )))
      in (
      #"pump_unit.adb" 303 0 0# Pump_unit__return_nozzle__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___454)) )))
      );
     ( "GP_Sloc:pump_unit.adb:304:17" (Pump__set_pump_state__axiom.set_pump_state(Pump_unit__return_nozzle__pump_r.pump_r__split_fields) (3)) );
     ( "GP_Sloc:pump_unit.adb:305:17" (Pump__set_pump_nozzle_state__axiom.set_pump_nozzle_state(Pump_unit__return_nozzle__pump_r.pump_r__split_fields) (2)) );
     ( "GP_Sloc:pump_unit.adb:306:13" (Sprint__print_float_type__axiom.print_float_type((Standard__string.of_array(Temp___455.temp___455) (1) (39))) ((Pump__float_number.to_real((Pump_unit__pump_unit.rec__to_pay((Pump_unit__pump_unit.__split_fields({ Pump_unit__pump_unit.__split_fields = Pump_unit__return_nozzle__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })))))))) ) )) else (
     ( ( "GP_Sloc:pump_unit.adb:308:40" (let temp___447 = (let temp___446 = { Pump_unit__pump_unit.__split_fields = Pump_unit__return_nozzle__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
      ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_active_state((Pump_unit__pump_unit.__split_fields(temp___446)))) in (
       ()))
       end ;
      { ( temp___446 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___446)) ) with Pump_unit__pump_unit.rec__pump_active_state = (Pump__state_type.of_rep 0) } } )))
      in (
      #"pump_unit.adb" 308 0 0# Pump_unit__return_nozzle__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___447)) )))
      );
     ( "GP_Sloc:pump_unit.adb:309:39" (let temp___449 = (let temp___448 = { Pump_unit__pump_unit.__split_fields = Pump_unit__return_nozzle__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
      ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_nozzle_state((Pump_unit__pump_unit.__split_fields(temp___448)))) in (
       ()))
       end ;
      { ( temp___448 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___448)) ) with Pump_unit__pump_unit.rec__pump_nozzle_state = (Pump__nozzle_type.of_rep 0) } } )))
      in (
      #"pump_unit.adb" 309 0 0# Pump_unit__return_nozzle__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___449)) )))
      );
     ( "GP_Sloc:pump_unit.adb:310:17" (Pump__set_pump_state__axiom.set_pump_state(Pump_unit__return_nozzle__pump_r.pump_r__split_fields) (0)) );
     ( "GP_Sloc:pump_unit.adb:311:17" (Pump__set_pump_nozzle_state__axiom.set_pump_nozzle_state(Pump_unit__return_nozzle__pump_r.pump_r__split_fields) (0)) );
     ( "GP_Sloc:pump_unit.adb:312:13" (Sprint__print__axiom.print((Standard__string.of_array(Temp___450.temp___450) (1) (38)))) ) ))) )) else (
    ( ( "GP_Sloc:pump_unit.adb:315:10" (Sprint__print__axiom.print((Standard__string.of_array(Temp___445.temp___445) (1) (73)))) );
    ( "GP_Sloc:pump_unit.adb:317:10" #"pump_unit.adb" 315 0 0# assert { ( #"pump_unit.adb" 315 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_RAISE" "GP_Sloc:pump_unit.adb:317:10" "GP_Id:2" "comment:         Raise returnNozzleException;
         ^ pump_unit.adb:317:10:VC_RAISE" "GP_Shape:if__raise_returnnozzleexception" false ) } ) ))) );
   #"pump_unit.adb" 294 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump_unit.ads:58 *)
  ;
  #"pump_unit.adb" 294 0 0# abstract ensures {true}(let _ = (Boolean.orb(((Pump__state_type.to_rep((Pump_unit__pump_unit.rec__pump_active_state((Pump_unit__pump_unit.__split_fields({ Pump_unit__pump_unit.__split_fields = Pump_unit__return_nozzle__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })))))) = 3)) (((Pump__state_type.to_rep((Pump_unit__pump_unit.rec__pump_active_state((Pump_unit__pump_unit.__split_fields({ Pump_unit__pump_unit.__split_fields = Pump_unit__return_nozzle__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })))))) = 0))) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "start_pumping" defined at pump_unit.ads:67, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump_unit__start_pumping__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use import "real".RealInfix
 use        "_gnatprove_standard".Boolean
 use        Standard__string
 use        Pump__Tfloat_numberB
 use        Pump__float_number
 use        Pump__float_number__axiom
 use        Pump__state_type
 use        Pump__nozzle_type
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__set_pump_state__axiom
 use        Pump__set_pump_nozzle_state__axiom
 use        Pump__get_tanks_size__axiom
 use        Pump__remove_petrol_reservoir__axiom
 use        Pump__get_state
 use        Pump__get_state__axiom
 use        Pump__get_current_nozzle_state
 use        Pump__get_current_nozzle_state__axiom
 use        Pump__get_unit_price__axiom
 use        Sprint__print__axiom
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__start_pumping__pumpunit
 use        Pump_unit__start_pumping__pump_r
 use        Pump_unit__start_pumping__amount
 use        Pump_unit__start_pumping__car_tank_space
 use        Pump_unit__stop_pumping__axiom
 use        Pump_unit__start_pumping__tanksize
 use        Pump_unit__start_pumping__pumped
 use        Pump_unit__start_pumping__sensor
 use        Pump_unit__start_pumping__temp
 use        Pump_unit__start_pumping__L_1
 use        Pump_unit__start_pumping__L_2
 use        Temp___460
 use        Temp___461
 use        Temp___462
 use        Temp___471
 use        Temp___472
 use        Temp___473
 use        Temp___478
 use        Temp___479
 use        Temp___484
 use        Temp___485
 use        Standard__positive__axiom
 use        Standard__character__axiom
 use        Standard__string__axiom
 use        Standard__integer__axiom
 use        Pump_unit__start_pumping__tanksize__axiom
 use        Pump_unit__start_pumping__pumped__axiom
 use        Pump_unit__start_pumping__sensor__axiom
 use        Pump_unit__start_pumping__temp__axiom
 use        Pump_unit__start_pumping__L_1__axiom
 use        Pump_unit__start_pumping__L_2__axiom
 use        Pump_unit__unit_id_type__axiom
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__start_pumping__pumpunit__axiom
 use        Pump_unit__start_pumping__pump_r__axiom
 use        Pump_unit__start_pumping__amount__axiom
 use        Pump_unit__start_pumping__car_tank_space__axiom
 use        Pump_unit__stop_pumping__axiom
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom
 use        Pump__set_pump_state__axiom
 use        Pump__set_pump_nozzle_state__axiom
 use        Pump__remove_petrol_reservoir__axiom
 use        Pump__get_state__axiom
 use        Pump__get_current_nozzle_state__axiom
 use        Pump__get_unit_price__axiom
 use        Pump__get_tanks_size__axiom
 use        Sprint__print__axiom
 use        Pump__Tfloat_numberB__axiom

 let def #"pump_unit.ads" 14 0 0# "W:diverges:N" "GP_Subp:pump_unit.ads:67" 
   (__void_param : unit)
  requires { true }
  ensures { ( #"pump_unit.ads" 70 0 0# "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:pump_unit.ads:70:14" "GP_Id:19" "comment:     Post => (pumpUnit.PUMP_ACTIVE_STATE = PUMP.Ready);
             ^ pump_unit.ads:70:14:VC_POSTCONDITION" ( "GP_Pretty_Ada:10547" "GP_Sloc:pump_unit.ads:70:14" ((Pump__state_type.to_rep (Pump_unit__pump_unit.rec__pump_active_state (Pump_unit__pump_unit.__split_fields { Pump_unit__pump_unit.__split_fields = Pump_unit__start_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content }))) = 1) ) ) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump_unit.ads:67 *)
  ;
  #"pump_unit.ads" 14 0 0# assume { (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = Pump_unit__start_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True False True) };
  #"pump.ads" 20 0 0# assume { (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = Pump_unit__start_pumping__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content } True False True) };
  #"pump.ads" 6 0 0# assume { (Pump__float_number__axiom.dynamic_invariant Pump_unit__start_pumping__amount.amount True False True) };
  #"pump.ads" 6 0 0# assume { (Pump__float_number__axiom.dynamic_invariant Pump_unit__start_pumping__car_tank_space.car_tank_space.Pump__float_number.float_number__content True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump_unit.ads:67 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump_unit.ads:67 *)
  ;
  #"pump.ads" 6 0 0# abstract ensures {true}(let _ = (Boolean.andb(((Pump__get_state__axiom.get_state({ Pump__pump.__split_fields = Pump_unit__start_pumping__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content })) = 1)) (((Pump__get_current_nozzle_state__axiom.get_current_nozzle_state({ Pump__pump.__split_fields = Pump_unit__start_pumping__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content })) = 1))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump_unit.ads:67 *)
  ;
  #"pump.ads" 20 0 0# assume { ( ((Pump__get_state.get_state { Pump__pump.__split_fields = Pump_unit__start_pumping__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content }) = 1) /\ ((Pump__get_current_nozzle_state.get_current_nozzle_state { Pump__pump.__split_fields = Pump_unit__start_pumping__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content }) = 1) ) };
  () (* checking of pragma precondition pump_unit.ads:67 *)
  ;
  try
   ( #"pump.ads" 20 0 0# abstract ensures {true}(let _ = () in (
    ()))
    end ;
   #"pump_unit.adb" 326 0 0# assume { (Pump__float_number__axiom.default_initial_assumption Pump_unit__start_pumping__tanksize.tanksize.Pump__float_number.float_number__content False) };
   #"pump.ads" 6 0 0# assume { (Pump__float_number__axiom.dynamic_invariant Pump_unit__start_pumping__tanksize.tanksize.Pump__float_number.float_number__content False False True) };
   #"pump.ads" 6 0 0# abstract ensures {true}(let _ = () in (
    ()))
    end ;
   #"pump_unit.adb" 327 0 0# assume { (Pump__float_number__axiom.default_initial_assumption Pump_unit__start_pumping__pumped.pumped.Pump__float_number.float_number__content False) };
   #"pump.ads" 6 0 0# assume { (Pump__float_number__axiom.dynamic_invariant Pump_unit__start_pumping__pumped.pumped.Pump__float_number.float_number__content False False True) };
   #"pump.ads" 6 0 0# abstract ensures {true}(let _ = () in (
    ()))
    end ;
   #"pump_unit.adb" 329 0 0# assume { (Pump__float_number__axiom.default_initial_assumption Pump_unit__start_pumping__temp.temp.Pump__float_number.float_number__content False) };
   #"pump.ads" 6 0 0# assume { (Pump__float_number__axiom.dynamic_invariant Pump_unit__start_pumping__temp.temp.Pump__float_number.float_number__content False False True) };
   ( "GP_Sloc:pump_unit.adb:333:11" #"pump_unit.adb" 333 0 0# Pump_unit__start_pumping__temp.temp.Pump__float_number.float_number__content <- ( (Pump__float_number.of_real((0.0E-2))) ) );
   ( "GP_Sloc:pump_unit.adb:334:13" #"pump_unit.adb" 334 0 0# Pump_unit__start_pumping__pumped.pumped.Pump__float_number.float_number__content <- ( (Pump__float_number.of_real((0.0E-2))) ) );
   ( "GP_Sloc:pump_unit.adb:335:14" #"pump_unit.adb" 335 0 0# Pump_unit__start_pumping__sensor.sensor.bool__content <- ( (Boolean.of_int(0)) ) );
   ( "GP_Sloc:pump_unit.adb:336:7" (if ((Boolean.andb(((Pump__state_type.to_rep((Pump_unit__pump_unit.rec__pump_active_state((Pump_unit__pump_unit.__split_fields({ Pump_unit__pump_unit.__split_fields = Pump_unit__start_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })))))) = 1)) (((Pump__state_type.to_rep((Pump__pump.rec__pump_state((Pump__pump.__split_fields({ Pump__pump.__split_fields = Pump_unit__start_pumping__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content })))))) = 1)))) then (
    ( ( "GP_Sloc:pump_unit.adb:337:19" #"pump_unit.adb" 337 0 0# Pump_unit__start_pumping__tanksize.tanksize.Pump__float_number.float_number__content <- ( (Pump__get_tanks_size__axiom.get_tanks_size({ Pump__pump.__split_fields = Pump_unit__start_pumping__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content })) ) );
    ( "GP_Sloc:pump_unit.adb:338:10" (if (((Pump__float_number.to_real(Pump_unit__start_pumping__tanksize.tanksize.Pump__float_number.float_number__content)) <=. (0.0E-2))) then (
     ( ( "GP_Sloc:pump_unit.adb:339:13" (Sprint__print__axiom.print((Standard__string.of_array(Temp___461.temp___461) (1) (10)))) );
     ( "GP_Sloc:pump_unit.adb:340:13" #"pump_unit.adb" 339 0 0# assert { ( #"pump_unit.adb" 339 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_RAISE" "GP_Sloc:pump_unit.adb:340:13" "GP_Id:5" "comment:            Raise startPumpingException;
            ^ pump_unit.adb:340:13:VC_RAISE" "GP_Shape:if__if__raise_startpumpingexception" false ) } ) )) else (
     ())) );
    ( "GP_Sloc:pump_unit.adb:342:10" (if (((Pump__float_number.to_real(Pump_unit__start_pumping__car_tank_space.car_tank_space.Pump__float_number.float_number__content)) = (0.0E-2))) then (
     ( ( "GP_Sloc:pump_unit.adb:343:13" (Sprint__print__axiom.print((Standard__string.of_array(Temp___462.temp___462) (1) (29)))) );
     ( "GP_Sloc:pump_unit.adb:344:13" #"pump_unit.adb" 343 0 0# assert { ( #"pump_unit.adb" 343 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_RAISE" "GP_Shape:if__if__raise_startpumpingexception" "GP_Sloc:pump_unit.adb:344:13" "GP_Id:6" "comment:            Raise startPumpingException;
            ^ pump_unit.adb:344:13:VC_RAISE" false ) } ) )) else (
     ())) );
    ( "GP_Sloc:pump_unit.adb:346:10" (if ((Boolean.andb((Boolean.andb(((Pump__float_number.to_real(Pump_unit__start_pumping__amount.amount)) >. (0.0E-2))) (((Boolean.to_int(Pump_unit__start_pumping__sensor.sensor.bool__content)) = (Boolean.to_int((Boolean.of_int(0)))))))) (((Pump__float_number.to_real(Pump_unit__start_pumping__tanksize.tanksize.Pump__float_number.float_number__content)) >. (Pump__float_number.to_real(Pump_unit__start_pumping__temp.temp.Pump__float_number.float_number__content)))))) then (
     ( ( "GP_Sloc:pump_unit.adb:347:40" (let temp___464 = (let temp___463 = { Pump_unit__pump_unit.__split_fields = Pump_unit__start_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
      ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_active_state((Pump_unit__pump_unit.__split_fields(temp___463)))) in (
       ()))
       end ;
      { ( temp___463 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___463)) ) with Pump_unit__pump_unit.rec__pump_active_state = (Pump__state_type.of_rep 2) } } )))
      in (
      #"pump_unit.adb" 347 0 0# Pump_unit__start_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___464)) )))
      );
     ( "GP_Sloc:pump_unit.adb:348:39" (let temp___466 = (let temp___465 = { Pump_unit__pump_unit.__split_fields = Pump_unit__start_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
      ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_nozzle_state((Pump_unit__pump_unit.__split_fields(temp___465)))) in (
       ()))
       end ;
      { ( temp___465 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___465)) ) with Pump_unit__pump_unit.rec__pump_nozzle_state = (Pump__nozzle_type.of_rep 3) } } )))
      in (
      #"pump_unit.adb" 348 0 0# Pump_unit__start_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___466)) )))
      );
     ( "GP_Sloc:pump_unit.adb:349:17" (Pump__set_pump_nozzle_state__axiom.set_pump_nozzle_state(Pump_unit__start_pumping__pump_r.pump_r__split_fields) (3)) );
     ( "GP_Sloc:pump_unit.adb:350:17" (Pump__set_pump_state__axiom.set_pump_state(Pump_unit__start_pumping__pump_r.pump_r__split_fields) (2)) );
     ( "GP_Sloc:pump_unit.adb:351:98" ( () (* Translation of an Ada loop from pump_unit.adb:351 *)
     ;
     (if ((Boolean.andb((Boolean.andb((Boolean.andb(((Pump__float_number.to_real(Pump_unit__start_pumping__car_tank_space.car_tank_space.Pump__float_number.float_number__content)) >. (0.0E-2))) (((Pump__float_number.to_real(Pump_unit__start_pumping__tanksize.tanksize.Pump__float_number.float_number__content)) >. (Pump__float_number.to_real(Pump_unit__start_pumping__temp.temp.Pump__float_number.float_number__content)))))) (((Boolean.to_int(Pump_unit__start_pumping__sensor.sensor.bool__content)) = (Boolean.to_int((Boolean.of_int(0)))))))) (((Pump__float_number.to_real(Pump_unit__start_pumping__pumped.pumped.Pump__float_number.float_number__content)) <=. (Pump__float_number.to_real(Pump_unit__start_pumping__amount.amount)))))) then (
      try
       ( () (* First unroling of the loop statements appearing before the loop invariant of loop pump_unit.adb:351 *)
       ;
       () (* While loop translating the Ada loop from pump_unit.adb:351 *)
       ;
       #"pump_unit.adb" 351 0 0# while True do
        ( () (* Assume implicit invariants from the loop pump_unit.adb:351 *)
        ;
        #"pump_unit.adb" 351 0 0# assume { (Boolean.andb((Boolean.andb((Boolean.andb((Boolean.andb((Boolean.andb((Pump__float_number__axiom.dynamic_invariant Pump_unit__start_pumping__car_tank_space.car_tank_space.Pump__float_number.float_number__content False True True)) ((Pump__float_number__axiom.dynamic_invariant Pump_unit__start_pumping__tanksize.tanksize.Pump__float_number.float_number__content False True True)))) ((Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = Pump_unit__start_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } False True True)))) ((Pump__float_number__axiom.dynamic_invariant Pump_unit__start_pumping__pumped.pumped.Pump__float_number.float_number__content False True True)))) ((Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = Pump_unit__start_pumping__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content } False True True)))) (( ( ( ((Pump__float_number.to_real Pump_unit__start_pumping__car_tank_space.car_tank_space.Pump__float_number.float_number__content) >. (0.0E-2)) /\ ((Pump__float_number.to_real Pump_unit__start_pumping__tanksize.tanksize.Pump__float_number.float_number__content) >. (Pump__float_number.to_real Pump_unit__start_pumping__temp.temp.Pump__float_number.float_number__content)) ) /\ ( (Pump_unit__start_pumping__sensor.sensor.bool__content = True) <-> false ) ) /\ ((Pump__float_number.to_real Pump_unit__start_pumping__pumped.pumped.Pump__float_number.float_number__content) <=. (Pump__float_number.to_real Pump_unit__start_pumping__amount.amount)) ))) };
        () (* Check for absence of RTE in the invariant of loop pump_unit.adb:351 *)
        ;
        () (* Loop statements appearing after the loop invariant of loop pump_unit.adb:351 *)
        ;
        ( "GP_Sloc:pump_unit.adb:352:22" #"pump_unit.adb" 352 0 0# Pump_unit__start_pumping__pumped.pumped.Pump__float_number.float_number__content <- ( (Pump__float_number.of_real((Pump__Tfloat_numberB.round_real(((Pump__float_number.to_real(Pump_unit__start_pumping__pumped.pumped.Pump__float_number.float_number__content)) +. (0.009999999776482582092285156250)))))) ) );
        ( "GP_Sloc:pump_unit.adb:353:32" (let temp___468 = (let temp___467 = { Pump_unit__pump_unit.__split_fields = Pump_unit__start_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
         ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pumped((Pump_unit__pump_unit.__split_fields(temp___467)))) in (
          ()))
          end ;
         { ( temp___467 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___467)) ) with Pump_unit__pump_unit.rec__pumped = (Pump__float_number.of_real((Pump__Tfloat_numberB.round_real(((Pump__float_number.to_real((Pump_unit__pump_unit.rec__pumped((Pump_unit__pump_unit.__split_fields({ Pump_unit__pump_unit.__split_fields = Pump_unit__start_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })))))) +. (0.009999999776482582092285156250)))))) } } )))
         in (
         #"pump_unit.adb" 353 0 0# Pump_unit__start_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___468)) )))
         );
        ( "GP_Sloc:pump_unit.adb:354:32" (let temp___470 = (let temp___469 = { Pump_unit__pump_unit.__split_fields = Pump_unit__start_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
         ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__to_pay((Pump_unit__pump_unit.__split_fields(temp___469)))) in (
          ()))
          end ;
         { ( temp___469 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___469)) ) with Pump_unit__pump_unit.rec__to_pay = (Pump__float_number.of_real(( #"pump_unit.adb" 354 0 0# "model_vc" "keep_on_simp" "GP_Sloc:pump_unit.adb:354:51" "GP_Reason:VC_RANGE_CHECK" "GP_Id:7" "comment:               pumpUnit.TO_PAY := pumpUnit.TO_PAY + (0.01 * PUMP.GET_UNIT_PRICE(pump_r));
                                                  ^ pump_unit.adb:354:51:VC_RANGE_CHECK" "GP_Shape:if__if__L_1_while__pumpunit_assign__add" (Pump__float_number.range_check_((Pump__Tfloat_numberB.round_real(((Pump__float_number.to_real((Pump_unit__pump_unit.rec__to_pay((Pump_unit__pump_unit.__split_fields({ Pump_unit__pump_unit.__split_fields = Pump_unit__start_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })))))) +. (Pump__Tfloat_numberB.round_real(((0.009999999776482582092285156250) *. (Pump__float_number.to_real((Pump__get_unit_price__axiom.get_unit_price({ Pump__pump.__split_fields = Pump_unit__start_pumping__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content })))))))))))) ))) } } )))
         in (
         #"pump_unit.adb" 354 0 0# Pump_unit__start_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___470)) )))
         );
        ( "GP_Sloc:pump_unit.adb:355:30" #"pump_unit.adb" 355 0 0# Pump_unit__start_pumping__car_tank_space.car_tank_space.Pump__float_number.float_number__content <- ( (Pump__float_number.of_real(( #"pump_unit.adb" 355 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:pump_unit.adb:355:48" "GP_Id:8" "comment:               CAR_TANK_SPACE:= CAR_TANK_SPACE - 0.01;
                                               ^ pump_unit.adb:355:48:VC_RANGE_CHECK" "GP_Shape:if__if__L_1_while__car_tank_space_assign__sub" (Pump__float_number.range_check_((Pump__Tfloat_numberB.round_real(((Pump__float_number.to_real(Pump_unit__start_pumping__car_tank_space.car_tank_space.Pump__float_number.float_number__content)) -. (0.009999999776482582092285156250)))))) ))) ) );
        ( "GP_Sloc:pump_unit.adb:359:20" ( #"pump_unit.adb" 359 0 0# "model_vc" "keep_on_simp" "GP_Sloc:pump_unit.adb:359:20" "GP_Reason:VC_PRECONDITION" "GP_Id:9" "comment:               PUMP.REMOVE_PETROL_RESERVOIR(pump_r,0.01);
                   ^ pump_unit.adb:359:20:VC_PRECONDITION" "GP_Shape:if__if__L_1_while__call_remove_petrol_reservoir" (Pump__remove_petrol_reservoir__axiom.remove_petrol_reservoir(Pump_unit__start_pumping__pump_r.pump_r__split_fields) ((0.009999999776482582092285156250))) ) );
        ( "GP_Sloc:pump_unit.adb:360:25" #"pump_unit.adb" 360 0 0# Pump_unit__start_pumping__tanksize.tanksize.Pump__float_number.float_number__content <- ( (Pump__get_tanks_size__axiom.get_tanks_size({ Pump__pump.__split_fields = Pump_unit__start_pumping__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content })) ) );
        ( "GP_Sloc:pump_unit.adb:361:16" (if (((Pump__float_number.to_real(Pump_unit__start_pumping__car_tank_space.car_tank_space.Pump__float_number.float_number__content)) <=. (0.0E-2))) then (
         ( ( "GP_Sloc:pump_unit.adb:362:26" #"pump_unit.adb" 362 0 0# Pump_unit__start_pumping__sensor.sensor.bool__content <- ( (Boolean.of_int(1)) ) );
         ( "GP_Sloc:pump_unit.adb:363:19" ( #"pump_unit.adb" 363 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Shape:if__if__L_1_while__if__call_stop_pumping" "GP_Sloc:pump_unit.adb:363:19" "GP_Id:12" "comment:                  STOP_PUMPING(pumpUnit, pump_r);
                  ^ pump_unit.adb:363:19:VC_PRECONDITION" (Pump_unit__stop_pumping__axiom.stop_pumping(Pump_unit__start_pumping__pumpunit.pumpunit__split_fields) (Pump_unit__start_pumping__pump_r.pump_r__split_fields)) ) );
         ( "GP_Sloc:pump_unit.adb:364:19" (Sprint__print__axiom.print((Standard__string.of_array(Temp___473.temp___473) (1) (35)))) ) )) else (
         ( "GP_Sloc:pump_unit.adb:365:16" (if (((Pump__float_number.to_real(Pump_unit__start_pumping__tanksize.tanksize.Pump__float_number.float_number__content)) <=. (0.0E-2))) then (
          ( ( "GP_Sloc:pump_unit.adb:366:19" ( #"pump_unit.adb" 366 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Shape:if__if__L_1_while__if__call_stop_pumping" "GP_Sloc:pump_unit.adb:366:19" "GP_Id:11" "comment:                  STOP_PUMPING(pumpUnit, pump_r);
                  ^ pump_unit.adb:366:19:VC_PRECONDITION" (Pump_unit__stop_pumping__axiom.stop_pumping(Pump_unit__start_pumping__pumpunit.pumpunit__split_fields) (Pump_unit__start_pumping__pump_r.pump_r__split_fields)) ) );
          ( "GP_Sloc:pump_unit.adb:367:19" (Sprint__print__axiom.print((Standard__string.of_array(Temp___472.temp___472) (1) (23)))) ) )) else (
          ( "GP_Sloc:pump_unit.adb:368:16" (if (((Pump__float_number.to_real(Pump_unit__start_pumping__pumped.pumped.Pump__float_number.float_number__content)) >=. (Pump__float_number.to_real(Pump_unit__start_pumping__amount.amount)))) then (
           ( ( "GP_Sloc:pump_unit.adb:369:19" (Sprint__print__axiom.print((Standard__string.of_array(Temp___471.temp___471) (1) (19)))) );
           ( "GP_Sloc:pump_unit.adb:370:19" ( #"pump_unit.adb" 370 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:pump_unit.adb:370:19" "GP_Id:10" "comment:                  STOP_PUMPING(pumpUnit, pump_r);
                  ^ pump_unit.adb:370:19:VC_PRECONDITION" "GP_Shape:if__if__L_1_while__if__call_stop_pumping" (Pump_unit__stop_pumping__axiom.stop_pumping(Pump_unit__start_pumping__pumpunit.pumpunit__split_fields) (Pump_unit__start_pumping__pump_r.pump_r__split_fields)) ) ) )) else (
           ())) ))) ))) );
        () (* Check for the exit condition and loop statements appearing before the loop invariant of loop pump_unit.adb:351 *)
        ;
        (if ((Boolean.andb((Boolean.andb((Boolean.andb(((Pump__float_number.to_real(Pump_unit__start_pumping__car_tank_space.car_tank_space.Pump__float_number.float_number__content)) >. (0.0E-2))) (((Pump__float_number.to_real(Pump_unit__start_pumping__tanksize.tanksize.Pump__float_number.float_number__content)) >. (Pump__float_number.to_real(Pump_unit__start_pumping__temp.temp.Pump__float_number.float_number__content)))))) (((Boolean.to_int(Pump_unit__start_pumping__sensor.sensor.bool__content)) = (Boolean.to_int((Boolean.of_int(0)))))))) (((Pump__float_number.to_real(Pump_unit__start_pumping__pumped.pumped.Pump__float_number.float_number__content)) <=. (Pump__float_number.to_real(Pump_unit__start_pumping__amount.amount)))))) then (
         ()) else (
         #"pump_unit.ads" 67 0 0# raise Pump_unit__start_pumping__L_1.L_1)) )
       done )
      with
       Pump_unit__start_pumping__L_1.L_1 -> ()
      end)) ) ) )) else (
     ())) );
    ( "GP_Sloc:pump_unit.adb:375:10" (if ((Boolean.andb((Boolean.andb(((Pump__float_number.to_real(Pump_unit__start_pumping__amount.amount)) = (0.0E-2))) (((Boolean.to_int(Pump_unit__start_pumping__sensor.sensor.bool__content)) = (Boolean.to_int((Boolean.of_int(0)))))))) (((Pump__float_number.to_real(Pump_unit__start_pumping__tanksize.tanksize.Pump__float_number.float_number__content)) >. (Pump__float_number.to_real(Pump_unit__start_pumping__temp.temp.Pump__float_number.float_number__content)))))) then (
     ( ( "GP_Sloc:pump_unit.adb:376:39" (let temp___475 = (let temp___474 = { Pump_unit__pump_unit.__split_fields = Pump_unit__start_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
      ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_nozzle_state((Pump_unit__pump_unit.__split_fields(temp___474)))) in (
       ()))
       end ;
      { ( temp___474 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___474)) ) with Pump_unit__pump_unit.rec__pump_nozzle_state = (Pump__nozzle_type.of_rep 3) } } )))
      in (
      #"pump_unit.adb" 376 0 0# Pump_unit__start_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___475)) )))
      );
     ( "GP_Sloc:pump_unit.adb:377:40" (let temp___477 = (let temp___476 = { Pump_unit__pump_unit.__split_fields = Pump_unit__start_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
      ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_active_state((Pump_unit__pump_unit.__split_fields(temp___476)))) in (
       ()))
       end ;
      { ( temp___476 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___476)) ) with Pump_unit__pump_unit.rec__pump_active_state = (Pump__state_type.of_rep 2) } } )))
      in (
      #"pump_unit.adb" 377 0 0# Pump_unit__start_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___477)) )))
      );
     ( "GP_Sloc:pump_unit.adb:378:17" (Pump__set_pump_nozzle_state__axiom.set_pump_nozzle_state(Pump_unit__start_pumping__pump_r.pump_r__split_fields) (3)) );
     ( "GP_Sloc:pump_unit.adb:379:17" (Pump__set_pump_state__axiom.set_pump_state(Pump_unit__start_pumping__pump_r.pump_r__split_fields) (2)) );
     ( "GP_Sloc:pump_unit.adb:380:13" (if (((Pump__float_number.to_real(Pump_unit__start_pumping__tanksize.tanksize.Pump__float_number.float_number__content)) <=. (0.0E-2))) then (
      ( ( "GP_Sloc:pump_unit.adb:381:16" (Sprint__print__axiom.print((Standard__string.of_array(Temp___478.temp___478) (1) (10)))) );
      ( "GP_Sloc:pump_unit.adb:382:16" #"pump_unit.adb" 381 0 0# assert { ( #"pump_unit.adb" 381 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_RAISE" "GP_Sloc:pump_unit.adb:382:16" "GP_Id:13" "comment:               Raise startPumpingException;
               ^ pump_unit.adb:382:16:VC_RAISE" "GP_Shape:if__if__if__raise_startpumpingexception" false ) } ) )) else (
      ())) );
     ( "GP_Sloc:pump_unit.adb:384:13" (if (((Pump__float_number.to_real(Pump_unit__start_pumping__car_tank_space.car_tank_space.Pump__float_number.float_number__content)) = (0.0E-2))) then (
      ( ( "GP_Sloc:pump_unit.adb:385:16" (Sprint__print__axiom.print((Standard__string.of_array(Temp___479.temp___479) (1) (29)))) );
      ( "GP_Sloc:pump_unit.adb:386:16" #"pump_unit.adb" 385 0 0# assert { ( #"pump_unit.adb" 385 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_RAISE" "GP_Shape:if__if__if__raise_startpumpingexception" "GP_Sloc:pump_unit.adb:386:16" "GP_Id:14" "comment:               Raise startPumpingException;
               ^ pump_unit.adb:386:16:VC_RAISE" false ) } ) )) else (
      ())) );
     ( "GP_Sloc:pump_unit.adb:388:54" ( () (* Translation of an Ada loop from pump_unit.adb:388 *)
     ;
     (if ((Boolean.andb(((Boolean.to_int(Pump_unit__start_pumping__sensor.sensor.bool__content)) = (Boolean.to_int((Boolean.of_int(0)))))) (((Pump__float_number.to_real(Pump_unit__start_pumping__tanksize.tanksize.Pump__float_number.float_number__content)) >. (0.0E-2))))) then (
      try
       ( () (* First unroling of the loop statements appearing before the loop invariant of loop pump_unit.adb:388 *)
       ;
       () (* While loop translating the Ada loop from pump_unit.adb:388 *)
       ;
       #"pump_unit.adb" 388 0 0# while True do
        ( () (* Assume implicit invariants from the loop pump_unit.adb:388 *)
        ;
        #"pump_unit.adb" 388 0 0# assume { (Boolean.andb((Boolean.andb((Boolean.andb((Boolean.andb((Pump__float_number__axiom.dynamic_invariant Pump_unit__start_pumping__car_tank_space.car_tank_space.Pump__float_number.float_number__content False True True)) ((Pump__float_number__axiom.dynamic_invariant Pump_unit__start_pumping__tanksize.tanksize.Pump__float_number.float_number__content False True True)))) ((Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = Pump_unit__start_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } False True True)))) ((Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = Pump_unit__start_pumping__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content } False True True)))) (( ( (Pump_unit__start_pumping__sensor.sensor.bool__content = True) <-> false ) /\ ((Pump__float_number.to_real Pump_unit__start_pumping__tanksize.tanksize.Pump__float_number.float_number__content) >. (0.0E-2)) ))) };
        () (* Check for absence of RTE in the invariant of loop pump_unit.adb:388 *)
        ;
        () (* Loop statements appearing after the loop invariant of loop pump_unit.adb:388 *)
        ;
        ( "GP_Sloc:pump_unit.adb:391:32" (let temp___481 = (let temp___480 = { Pump_unit__pump_unit.__split_fields = Pump_unit__start_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
         ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pumped((Pump_unit__pump_unit.__split_fields(temp___480)))) in (
          ()))
          end ;
         { ( temp___480 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___480)) ) with Pump_unit__pump_unit.rec__pumped = (Pump__float_number.of_real((Pump__Tfloat_numberB.round_real(((Pump__float_number.to_real((Pump_unit__pump_unit.rec__pumped((Pump_unit__pump_unit.__split_fields({ Pump_unit__pump_unit.__split_fields = Pump_unit__start_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })))))) +. (0.009999999776482582092285156250)))))) } } )))
         in (
         #"pump_unit.adb" 391 0 0# Pump_unit__start_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___481)) )))
         );
        ( "GP_Sloc:pump_unit.adb:392:32" (let temp___483 = (let temp___482 = { Pump_unit__pump_unit.__split_fields = Pump_unit__start_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
         ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__to_pay((Pump_unit__pump_unit.__split_fields(temp___482)))) in (
          ()))
          end ;
         { ( temp___482 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___482)) ) with Pump_unit__pump_unit.rec__to_pay = (Pump__float_number.of_real(( #"pump_unit.adb" 392 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:pump_unit.adb:392:51" "GP_Id:15" "comment:               pumpUnit.TO_PAY := pumpUnit.TO_PAY + (0.01 * PUMP.GET_UNIT_PRICE(pump_r));
                                                  ^ pump_unit.adb:392:51:VC_RANGE_CHECK" "GP_Shape:if__if__L_2_while__pumpunit_assign__add" (Pump__float_number.range_check_((Pump__Tfloat_numberB.round_real(((Pump__float_number.to_real((Pump_unit__pump_unit.rec__to_pay((Pump_unit__pump_unit.__split_fields({ Pump_unit__pump_unit.__split_fields = Pump_unit__start_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })))))) +. (Pump__Tfloat_numberB.round_real(((0.009999999776482582092285156250) *. (Pump__float_number.to_real((Pump__get_unit_price__axiom.get_unit_price({ Pump__pump.__split_fields = Pump_unit__start_pumping__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content })))))))))))) ))) } } )))
         in (
         #"pump_unit.adb" 392 0 0# Pump_unit__start_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___483)) )))
         );
        ( "GP_Sloc:pump_unit.adb:393:30" #"pump_unit.adb" 393 0 0# Pump_unit__start_pumping__car_tank_space.car_tank_space.Pump__float_number.float_number__content <- ( (Pump__float_number.of_real(( #"pump_unit.adb" 393 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:pump_unit.adb:393:48" "GP_Id:16" "comment:               CAR_TANK_SPACE:= CAR_TANK_SPACE - 0.01;
                                               ^ pump_unit.adb:393:48:VC_RANGE_CHECK" "GP_Shape:if__if__L_2_while__car_tank_space_assign__sub" (Pump__float_number.range_check_((Pump__Tfloat_numberB.round_real(((Pump__float_number.to_real(Pump_unit__start_pumping__car_tank_space.car_tank_space.Pump__float_number.float_number__content)) -. (0.009999999776482582092285156250)))))) ))) ) );
        ( "GP_Sloc:pump_unit.adb:397:25" #"pump_unit.adb" 397 0 0# Pump_unit__start_pumping__tanksize.tanksize.Pump__float_number.float_number__content <- ( (Pump__get_tanks_size__axiom.get_tanks_size({ Pump__pump.__split_fields = Pump_unit__start_pumping__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content })) ) );
        ( "GP_Sloc:pump_unit.adb:398:16" (if (((Pump__float_number.to_real(Pump_unit__start_pumping__car_tank_space.car_tank_space.Pump__float_number.float_number__content)) <=. (0.0E-2))) then (
         ( ( "GP_Sloc:pump_unit.adb:399:26" #"pump_unit.adb" 399 0 0# Pump_unit__start_pumping__sensor.sensor.bool__content <- ( (Boolean.of_int(1)) ) );
         ( "GP_Sloc:pump_unit.adb:400:19" ( #"pump_unit.adb" 400 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Shape:if__if__L_2_while__if__call_stop_pumping" "GP_Sloc:pump_unit.adb:400:19" "GP_Id:18" "comment:                  STOP_PUMPING(pumpUnit, pump_r);
                  ^ pump_unit.adb:400:19:VC_PRECONDITION" (Pump_unit__stop_pumping__axiom.stop_pumping(Pump_unit__start_pumping__pumpunit.pumpunit__split_fields) (Pump_unit__start_pumping__pump_r.pump_r__split_fields)) ) );
         ( "GP_Sloc:pump_unit.adb:402:19" (Sprint__print__axiom.print((Standard__string.of_array(Temp___485.temp___485) (1) (35)))) ) )) else (
         ( "GP_Sloc:pump_unit.adb:403:16" (if (((Pump__float_number.to_real(Pump_unit__start_pumping__tanksize.tanksize.Pump__float_number.float_number__content)) <=. (0.0E-2))) then (
          ( ( "GP_Sloc:pump_unit.adb:404:19" ( #"pump_unit.adb" 404 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:pump_unit.adb:404:19" "GP_Id:17" "comment:                  STOP_PUMPING(pumpUnit, pump_r);
                  ^ pump_unit.adb:404:19:VC_PRECONDITION" "GP_Shape:if__if__L_2_while__if__call_stop_pumping" (Pump_unit__stop_pumping__axiom.stop_pumping(Pump_unit__start_pumping__pumpunit.pumpunit__split_fields) (Pump_unit__start_pumping__pump_r.pump_r__split_fields)) ) );
          ( "GP_Sloc:pump_unit.adb:405:19" (Sprint__print__axiom.print((Standard__string.of_array(Temp___484.temp___484) (1) (23)))) ) )) else (
          ())) ))) );
        () (* Check for the exit condition and loop statements appearing before the loop invariant of loop pump_unit.adb:388 *)
        ;
        (if ((Boolean.andb(((Boolean.to_int(Pump_unit__start_pumping__sensor.sensor.bool__content)) = (Boolean.to_int((Boolean.of_int(0)))))) (((Pump__float_number.to_real(Pump_unit__start_pumping__tanksize.tanksize.Pump__float_number.float_number__content)) >. (0.0E-2))))) then (
         ()) else (
         #"pump_unit.adb" 388 0 0# raise Pump_unit__start_pumping__L_2.L_2)) )
       done )
      with
       Pump_unit__start_pumping__L_2.L_2 -> ()
      end)) ) ) )) else (
     ())) ) )) else (
    ( ( "GP_Sloc:pump_unit.adb:410:10" (Sprint__print__axiom.print((Standard__string.of_array(Temp___460.temp___460) (1) (49)))) );
    ( "GP_Sloc:pump_unit.adb:412:10" #"pump_unit.adb" 410 0 0# assert { ( #"pump_unit.adb" 410 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_RAISE" "GP_Sloc:pump_unit.adb:412:10" "GP_Id:4" "comment:         Raise startPumpingException;
         ^ pump_unit.adb:412:10:VC_RAISE" "GP_Shape:if__raise_startpumpingexception" false ) } ) ))) );
   #"pump_unit.adb" 323 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump_unit.ads:67 *)
  ;
  #"pump_unit.adb" 323 0 0# abstract ensures {true}(let _ = ((Pump__state_type.to_rep((Pump_unit__pump_unit.rec__pump_active_state((Pump_unit__pump_unit.__split_fields({ Pump_unit__pump_unit.__split_fields = Pump_unit__start_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })))))) = 1) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "stop_pumping" defined at pump_unit.ads:72, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pump_unit__stop_pumping__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__string
 use        Array__Int__Standard__character
 use        Pump__state_type
 use        Pump__nozzle_type
 use        Pump__pump
 use        Pump__pump__axiom
 use        Pump__set_pump_state__axiom
 use        Pump__set_pump_nozzle_state__axiom
 use        Pump__get_state
 use        Pump__get_state__axiom
 use        Pump__get_current_nozzle_state
 use        Pump__get_current_nozzle_state__axiom
 use        Sprint__print__axiom
 use        Pump_unit__pump_unit
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__stop_pumping__pumpunit
 use        Pump_unit__stop_pumping__pump_r
 use        Temp___490
 use        Temp___491
 use        Temp___493
 use        Standard__positive__axiom
 use        Standard__character__axiom
 use        Standard__string__axiom
 use        Standard__integer__axiom
 use        Pump_unit__unit_id_type__axiom
 use        Pump_unit__pump_unit__axiom
 use        Pump_unit__stop_pumping__pumpunit__axiom
 use        Pump_unit__stop_pumping__pump_r__axiom
 use        Pump__float_number__axiom
 use        Pump__fuel_types__axiom
 use        Pump__state_type__axiom
 use        Pump__nozzle_type__axiom
 use        Pump__reservoir__axiom
 use        Pump__pump__axiom
 use        Pump__set_pump_state__axiom
 use        Pump__set_pump_nozzle_state__axiom
 use        Pump__get_state__axiom
 use        Pump__get_current_nozzle_state__axiom
 use        Sprint__print__axiom

 let def #"pump_unit.ads" 14 0 0# "W:diverges:N" "GP_Subp:pump_unit.ads:72" 
   (__void_param : unit)
  requires { true }
  ensures { ( #"pump_unit.ads" 75 0 0# "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Sloc:pump_unit.ads:75:14" "GP_Id:21" "comment:     Post => (pumpUnit.PUMP_NOZZLE_STATE = PUMP.Stop and pumpUnit.PUMP_ACTIVE_STATE = PUMP.Ready);
             ^ pump_unit.ads:75:14:VC_POSTCONDITION" "GP_Shape:pragargs__and" ( ( "GP_Pretty_Ada:5436" "GP_Sloc:pump_unit.ads:75:15" ((Pump__nozzle_type.to_rep (Pump_unit__pump_unit.rec__pump_nozzle_state (Pump_unit__pump_unit.__split_fields { Pump_unit__pump_unit.__split_fields = Pump_unit__stop_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content }))) = 4) ) /\ ( "GP_Pretty_Ada:5444" "GP_Sloc:pump_unit.ads:75:58" ((Pump__state_type.to_rep (Pump_unit__pump_unit.rec__pump_active_state (Pump_unit__pump_unit.__split_fields { Pump_unit__pump_unit.__split_fields = Pump_unit__stop_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content }))) = 1) ) ) ) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram pump_unit.ads:72 *)
  ;
  #"pump_unit.ads" 14 0 0# assume { (Pump_unit__pump_unit__axiom.dynamic_invariant { Pump_unit__pump_unit.__split_fields = Pump_unit__stop_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } True False True) };
  #"pump.ads" 20 0 0# assume { (Pump__pump__axiom.dynamic_invariant { Pump__pump.__split_fields = Pump_unit__stop_pumping__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content } True False True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram pump_unit.ads:72 *)
  ;
  () (* Check for RTE in the Pre of the subprogram pump_unit.ads:72 *)
  ;
  #"pump.ads" 20 0 0# abstract ensures {true}(let _ = (Boolean.andb(((Pump__get_state__axiom.get_state({ Pump__pump.__split_fields = Pump_unit__stop_pumping__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content })) = 2)) (((Pump__get_current_nozzle_state__axiom.get_current_nozzle_state({ Pump__pump.__split_fields = Pump_unit__stop_pumping__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content })) = 3))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram pump_unit.ads:72 *)
  ;
  #"pump.ads" 20 0 0# assume { ( ((Pump__get_state.get_state { Pump__pump.__split_fields = Pump_unit__stop_pumping__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content }) = 2) /\ ((Pump__get_current_nozzle_state.get_current_nozzle_state { Pump__pump.__split_fields = Pump_unit__stop_pumping__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content }) = 3) ) };
  () (* checking of pragma precondition pump_unit.ads:72 *)
  ;
  try
   ( ( "GP_Sloc:pump_unit.adb:422:7" (if ((Boolean.andb((let temp___492 = (Standard__string.to_string((Pump__state_type.attr__ATTRIBUTE_IMAGE((Pump__state_type.to_rep((Pump_unit__pump_unit.rec__pump_active_state((Pump_unit__pump_unit.__split_fields({ Pump_unit__pump_unit.__split_fields = Pump_unit__stop_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })))))))))) in (
    (Array__Int__Standard__character.bool_eq((Standard__string.to_array(temp___492))) ((Standard__string.first(temp___492))) ((Standard__string.last(temp___492))) (Temp___491.temp___491) (1) (7))))
   ) ((let temp___494 = (Standard__string.to_string((Pump__state_type.attr__ATTRIBUTE_IMAGE((Pump__get_state__axiom.get_state({ Pump__pump.__split_fields = Pump_unit__stop_pumping__pump_r.pump_r__split_fields.Pump__pump.__split_fields__content })))))) in (
    (Array__Int__Standard__character.bool_eq((Standard__string.to_array(temp___494))) ((Standard__string.first(temp___494))) ((Standard__string.last(temp___494))) (Temp___493.temp___493) (1) (7))))
   ))) then (
    ( ( "GP_Sloc:pump_unit.adb:423:37" (let temp___487 = (let temp___486 = { Pump_unit__pump_unit.__split_fields = Pump_unit__stop_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
     ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_active_state((Pump_unit__pump_unit.__split_fields(temp___486)))) in (
      ()))
      end ;
     { ( temp___486 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___486)) ) with Pump_unit__pump_unit.rec__pump_active_state = (Pump__state_type.of_rep 1) } } )))
     in (
     #"pump_unit.adb" 423 0 0# Pump_unit__stop_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___487)) )))
     );
    ( "GP_Sloc:pump_unit.adb:424:36" (let temp___489 = (let temp___488 = { Pump_unit__pump_unit.__split_fields = Pump_unit__stop_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content } in (
     ( #"pump_unit.ads" 14 0 0# abstract ensures {true}(let _ = (Pump_unit__pump_unit.rec__pump_nozzle_state((Pump_unit__pump_unit.__split_fields(temp___488)))) in (
      ()))
      end ;
     { ( temp___488 ) with Pump_unit__pump_unit.__split_fields = { ( (Pump_unit__pump_unit.__split_fields(temp___488)) ) with Pump_unit__pump_unit.rec__pump_nozzle_state = (Pump__nozzle_type.of_rep 4) } } )))
     in (
     #"pump_unit.adb" 424 0 0# Pump_unit__stop_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content <- ( (Pump_unit__pump_unit.__split_fields(temp___489)) )))
     );
    ( "GP_Sloc:pump_unit.adb:425:14" (Pump__set_pump_state__axiom.set_pump_state(Pump_unit__stop_pumping__pump_r.pump_r__split_fields) (1)) );
    ( "GP_Sloc:pump_unit.adb:426:14" (Pump__set_pump_nozzle_state__axiom.set_pump_nozzle_state(Pump_unit__stop_pumping__pump_r.pump_r__split_fields) (4)) );
    ( "GP_Sloc:pump_unit.adb:427:10" (Sprint__print__axiom.print((Standard__string.of_array(Temp___490.temp___490) (1) (12)))) ) )) else (
    ( "GP_Sloc:pump_unit.adb:429:10" #"pump_unit.adb" 427 0 0# assert { ( #"pump_unit.adb" 427 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_RAISE" "GP_Sloc:pump_unit.adb:429:10" "GP_Id:20" "comment:         Raise stopPumpingException;
         ^ pump_unit.adb:429:10:VC_RAISE" "GP_Shape:if__raise_stoppumpingexception" false ) } ))) );
   #"pump_unit.adb" 419 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  () (* checking of pragma postcondition pump_unit.ads:72 *)
  ;
  #"pump_unit.adb" 419 0 0# abstract ensures {true}(let _ = (Boolean.andb(((Pump__nozzle_type.to_rep((Pump_unit__pump_unit.rec__pump_nozzle_state((Pump_unit__pump_unit.__split_fields({ Pump_unit__pump_unit.__split_fields = Pump_unit__stop_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })))))) = 4)) (((Pump__state_type.to_rep((Pump_unit__pump_unit.rec__pump_active_state((Pump_unit__pump_unit.__split_fields({ Pump_unit__pump_unit.__split_fields = Pump_unit__stop_pumping__pumpunit.pumpunit__split_fields.Pump_unit__pump_unit.__split_fields__content })))))) = 1))) in (
   ()))
   end  )
end
